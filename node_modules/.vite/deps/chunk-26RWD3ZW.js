// node_modules/colortranslator/esm/index.js
var t = function() {
  return t = Object.assign || function(t2) {
    for (var e2, r2 = 1, n2 = arguments.length; r2 < n2; r2++)
      for (var a2 in e2 = arguments[r2])
        Object.prototype.hasOwnProperty.call(e2, a2) && (t2[a2] = e2[a2]);
    return t2;
  }, t.apply(this, arguments);
};
function e(t2, e2, r2) {
  if (r2 || 2 === arguments.length)
    for (var n2, a2 = 0, o2 = e2.length; a2 < o2; a2++)
      !n2 && a2 in e2 || (n2 || (n2 = Array.prototype.slice.call(e2, 0, a2)), n2[a2] = e2[a2]);
  return t2.concat(n2 || Array.prototype.slice.call(e2));
}
var r;
var n;
var a;
var o;
!function(t2) {
  t2.HEX = "HEX", t2.RGB = "RGB", t2.HSL = "HSL", t2.CMYK = "CMYK";
}(r || (r = {})), function(t2) {
  t2.ANALOGOUS = "ANALOGOUS", t2.COMPLEMENTARY = "COMPLEMENTARY", t2.SPLIT_COMPLEMENTARY = "SPLIT_COMPLEMENTARY", t2.TRIADIC = "TRIADIC", t2.TETRADIC = "TETRADIC", t2.SQUARE = "SQUARE";
}(n || (n = {})), function(t2) {
  t2.ADDITIVE = "ADDITIVE", t2.SUBTRACTIVE = "SUBTRACTIVE";
}(a || (a = {})), function(t2) {
  t2.black = "#000000", t2.silver = "#C0C0C0", t2.gray = "#808080", t2.white = "#FFFFFF", t2.maroon = "#800000", t2.red = "#FF0000", t2.purple = "#800080", t2.fuchsia = "#FF00FF", t2.green = "#008000", t2.lime = "#00FF00", t2.olive = "#808000", t2.yellow = "#FFFF00", t2.navy = "#000080", t2.blue = "#0000FF", t2.teal = "#008080", t2.aqua = "#00FFFF", t2.orange = "#FFA500", t2.aliceblue = "#F0F8FF", t2.antiquewhite = "#FAEBD7", t2.aquamarine = "#7FFFD4", t2.azure = "#F0FFFF", t2.beige = "#F5F5DC", t2.bisque = "#FFE4C4", t2.blanchedalmond = "#FFEBCD", t2.blueviolet = "#8A2BE2", t2.brown = "#A52A2A", t2.burlywood = "#DEB887", t2.cadetblue = "#5F9EA0", t2.chartreuse = "#7FFF00", t2.chocolate = "#D2691E", t2.coral = "#FF7F50", t2.cornflowerblue = "#6495ED", t2.cornsilk = "#FFF8DC", t2.crimson = "#DC143C", t2.cyan = "#00FFFF", t2.darkblue = "#00008B", t2.darkcyan = "#008B8B", t2.darkgoldenrod = "#B8860B", t2.darkgray = "#A9A9A9", t2.darkgreen = "#006400", t2.darkgrey = "#A9A9A9", t2.darkkhaki = "#BDB76B", t2.darkmagenta = "#8B008B", t2.darkolivegreen = "#556B2F", t2.darkorange = "#FF8C00", t2.darkorchid = "#9932CC", t2.darkred = "#8B0000", t2.darksalmon = "#E9967A", t2.darkseagreen = "#8FBC8F", t2.darkslateblue = "#483D8B", t2.darkslategray = "#2F4F4F", t2.darkslategrey = "#2F4F4F", t2.darkturquoise = "#00CED1", t2.darkviolet = "#9400D3", t2.deeppink = "#FF1493", t2.deepskyblue = "#00BFFF", t2.dimgray = "#696969", t2.dimgrey = "#696969", t2.dodgerblue = "#1E90FF", t2.firebrick = "#B22222", t2.floralwhite = "#FFFAF0", t2.forestgreen = "#228B22", t2.gainsboro = "#DCDCDC", t2.ghostwhite = "#F8F8FF", t2.gold = "#FFD700", t2.goldenrod = "#DAA520", t2.greenyellow = "#ADFF2F", t2.grey = "#808080", t2.honeydew = "#F0FFF0", t2.hotpink = "#FF69B4", t2.indianred = "#CD5C5C", t2.indigo = "#4B0082", t2.ivory = "#FFFFF0", t2.khaki = "#F0E68C", t2.lavender = "#E6E6FA", t2.lavenderblush = "#FFF0F5", t2.lawngreen = "#7CFC00", t2.lemonchiffon = "#FFFACD", t2.lightblue = "#ADD8E6", t2.lightcoral = "#F08080", t2.lightcyan = "#E0FFFF", t2.lightgoldenrodyellow = "#FAFAD2", t2.lightgray = "#D3D3D3", t2.lightgreen = "#90EE90", t2.lightgrey = "#D3D3D3", t2.lightpink = "#FFB6C1", t2.lightsalmon = "#FFA07A", t2.lightseagreen = "#20B2AA", t2.lightskyblue = "#87CEFA", t2.lightslategray = "#778899", t2.lightslategrey = "#778899", t2.lightsteelblue = "#B0C4DE", t2.lightyellow = "#FFFFE0", t2.limegreen = "#32CD32", t2.linen = "#FAF0E6", t2.magenta = "#FF00FF", t2.mediumaquamarine = "#66CDAA", t2.mediumblue = "#0000CD", t2.mediumorchid = "#BA55D3", t2.mediumpurple = "#9370DB", t2.mediumseagreen = "#3CB371", t2.mediumslateblue = "#7B68EE", t2.mediumspringgreen = "#00FA9A", t2.mediumturquoise = "#48D1CC", t2.mediumvioletred = "#C71585", t2.midnightblue = "#191970", t2.mintcream = "#F5FFFA", t2.mistyrose = "#FFE4E1", t2.moccasin = "#FFE4B5", t2.navajowhite = "#FFDEAD", t2.oldlace = "#FDF5E6", t2.olivedrab = "#6B8E23", t2.orangered = "#FF4500", t2.orchid = "#DA70D6", t2.palegoldenrod = "#EEE8AA", t2.palegreen = "#98FB98", t2.paleturquoise = "#AFEEEE", t2.palevioletred = "#DB7093", t2.papayawhip = "#FFEFD5", t2.peachpuff = "#FFDAB9", t2.peru = "#CD853F", t2.pink = "#FFC0CB", t2.plum = "#DDA0DD", t2.powderblue = "#B0E0E6", t2.rosybrown = "#BC8F8F", t2.royalblue = "#4169E1", t2.saddlebrown = "#8B4513", t2.salmon = "#FA8072", t2.sandybrown = "#F4A460", t2.seagreen = "#2E8B57", t2.seashell = "#FFF5EE", t2.sienna = "#A0522D", t2.skyblue = "#87CEEB", t2.slateblue = "#6A5ACD", t2.slategray = "#708090", t2.slategrey = "#708090", t2.snow = "#FFFAFA", t2.springgreen = "#00FF7F", t2.steelblue = "#4682B4", t2.tan = "#D2B48C", t2.thistle = "#D8BFD8", t2.tomato = "#FF6347", t2.turquoise = "#40E0D0", t2.violet = "#EE82EE", t2.wheat = "#F5DEB3", t2.whitesmoke = "#F5F5F5", t2.yellowgreen = "#9ACD32", t2.rebeccapurple = "#663399";
}(o || (o = {}));
var i;
var u;
var c;
var s;
var d;
var h;
var l;
var f = Object.keys(o);
var g = ((i = {})[r.HEX] = /^#(?:([a-f\d])([a-f\d])([a-f\d])([a-f\d])?|([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})?)$/i, i[r.RGB] = /^rgba?\s*\(\s*(?:((?:\d*\.)?\d+%?)\s*,\s*((?:\d*\.)?\d+%?)\s*,\s*((?:\d*\.)?\d+%?)(?:\s*,\s*((?:\d*\.)?\d+))?|((?:\d*\.)?\d+%?)\s*((?:\d*\.)?\d+%?)\s*((?:\d*\.)?\d+%?)(?:\s*\/\s*((?:\d*\.)?\d+%?))?)\s*\)$/, i[r.HSL] = /^hsla?\s*\(\s*(?:(-?(?:\d*\.)?\d+(?:deg|grad|rad|turn)?)\s*,\s*((?:\d*\.)?\d+)%\s*,\s*((?:\d*\.)?\d+)%(?:\s*,\s*((?:\d*\.)?\d+))?|(-?(?:\d*\.)?\d+(?:deg|grad|rad|turn)?)\s*((?:\d*\.)?\d+)%\s*((?:\d*\.)?\d+)%(?:\s*\/\s*((?:\d*\.)?\d+%?))?)\s*\)$/, i[r.CMYK] = /^(?:device-cmyk|cmyk)\s*\(\s*(?:((?:\d*\.)?\d+%?)\s*,\s*((?:\d*\.)?\d+%?)\s*,\s*((?:\d*\.)?\d+%?)\s*,\s*((?:\d*\.)?\d+%?)(?:\s*,\s*((?:\d*\.)?\d+))?|((?:\d*\.)?\d+%?)\s*((?:\d*\.)?\d+%?)\s*((?:\d*\.)?\d+%?)\s*((?:\d*\.)?\d+%?)(?:\s*\/\s*((?:\d*\.)?\d+%?))?)\s*\)$/, i);
var p = /^(-?(?:\d*\.)?\d+)((?:deg|grad|rad|turn)?)$/;
var b = /^(\d+(?:\.\d+)?|\.\d+)%$/;
var F = /^0x([a-f\d]{1,2})$/i;
var y = "The provided string color doesn't have a correct format";
var m = "The provided color object doesn't have the proper keys or format";
var A = function(t2, e2, r2) {
  return r2 < 0 && (r2 += 6), r2 >= 6 && (r2 -= 6), r2 < 1 ? Math.round(255 * ((e2 - t2) * r2 + t2)) : r2 < 3 ? Math.round(255 * e2) : r2 < 4 ? Math.round(255 * ((e2 - t2) * (4 - r2) + t2)) : Math.round(255 * t2);
};
var E = function(t2, e2, r2) {
  e2 /= 100;
  var n2 = (r2 /= 100) <= 0.5 ? r2 * (e2 + 1) : r2 + e2 - r2 * e2, a2 = 2 * r2 - n2;
  return { r: A(a2, n2, (t2 /= 60) + 2), g: A(a2, n2, t2), b: A(a2, n2, t2 - 2) };
};
var H = function(t2, e2, r2, n2) {
  return n2 = 1 - n2, { r: Math.round(255 * (1 - t2) * n2), g: Math.round(255 * (1 - e2) * n2), b: Math.round(255 * (1 - r2) * n2) };
};
var v = function(t2, e2, r2) {
  t2 /= 255, e2 /= 255, r2 /= 255;
  var n2 = 1 - Math.max(t2, e2, r2), a2 = 1 - n2, o2 = (a2 - t2) / a2, i2 = (a2 - e2) / a2, u2 = (a2 - r2) / a2;
  return { c: Math.round(100 * o2), m: Math.round(100 * i2), y: Math.round(100 * u2), k: Math.round(100 * n2) };
};
var B = function(t2, e2, r2, n2) {
  void 0 === n2 && (n2 = 1), t2 /= 255, e2 /= 255, r2 /= 255, n2 = Math.min(n2, 1);
  var a2 = Math.max(t2, e2, r2), o2 = Math.min(t2, e2, r2), i2 = a2 - o2, u2 = 0, c2 = 0, s2 = (a2 + o2) / 2;
  if (0 === i2)
    u2 = 0, c2 = 0;
  else {
    switch (a2) {
      case t2:
        u2 = (e2 - r2) / i2 % 6;
        break;
      case e2:
        u2 = (r2 - t2) / i2 + 2;
        break;
      case r2:
        u2 = (t2 - e2) / i2 + 4;
    }
    (u2 = Math.round(60 * u2)) < 0 && (u2 += 360), c2 = i2 / (1 - Math.abs(2 * s2 - 1));
  }
  return { h: u2, s: Math.round(100 * c2), l: Math.round(100 * s2), a: n2 };
};
var M = function(t2, e2) {
  if (t2 < 0 && (t2 += 360), t2 > 360 && (t2 -= 360), 360 === t2 || 0 === t2)
    return t2;
  var r2 = [[0, 120], [120, 180], [180, 240], [240, 360]], n2 = [[0, 60], [60, 120], [120, 240], [240, 360]], a2 = e2 ? n2 : r2, o2 = 0, i2 = 0, u2 = 0, c2 = 0;
  return (e2 ? r2 : n2).find(function(e3, r3) {
    return t2 >= e3[0] && t2 < e3[1] && (o2 = e3[0], i2 = e3[1], u2 = a2[r3][0], c2 = a2[r3][1], true);
  }), u2 + (c2 - u2) / (i2 - o2) * (t2 - o2);
};
var C = function(t2, e2) {
  return Object.prototype.hasOwnProperty.call(t2, e2);
};
var D = function(t2) {
  return b.test("".concat(t2)) ? +"".concat(t2).replace(b, "$1") : Math.min(+t2, 100);
};
var R = function(t2) {
  return 1 === t2.length && (t2 += t2), parseInt(t2, 16);
};
var S = function(t2) {
  var e2 = X(t2).toString(16).toUpperCase();
  return 1 === e2.length ? "0x0".concat(e2) : "0x".concat(e2);
};
var L = function(t2) {
  var e2 = X(t2).toString(16).toUpperCase();
  return 1 === e2.length && (e2 = "0".concat(e2)), e2;
};
var G = function(t2, e2) {
  return void 0 === e2 && (e2 = false), !e2 && b.test(t2) ? Math.min(255 * +t2.replace(b, "$1") / 100, 255) : F.test(t2) ? 3 === t2.length ? e2 ? parseInt(t2 + t2.slice(-1)) / 255 : parseInt(t2 + t2.slice(-1)) : e2 ? X(t2, 6) / 255 : X(t2, 6) : Math.min(+t2, e2 ? 1 : 255);
};
var k = function(t2) {
  return Math.min(b.test(t2) ? +t2.replace(b, "$1") / 100 : +t2, 1);
};
var O = function(t2) {
  return t2.sort().join("").toUpperCase();
};
var X = function(t2, e2) {
  void 0 === e2 && (e2 = 0);
  var r2 = Math.pow(10, e2);
  return Math.round(+t2 * r2) / r2;
};
var j = function(t2, e2, r2) {
  return Math.max(e2, Math.min(t2, r2));
};
var I = ((u = {})[r.HEX] = function(t2) {
  return "#".concat(L(t2.r)).concat(L(t2.g)).concat(L(t2.b)).concat(C(t2, "a") && L(t2.a) || "");
}, u[r.RGB] = function(t2) {
  return "rgb".concat(C(t2, "a") ? "a" : "", "(").concat(X(t2.r), ",").concat(X(t2.g), ",").concat(X(t2.b)).concat(C(t2, "a") && ",".concat(X(t2.a, 2)) || "", ")");
}, u[r.HSL] = function(t2) {
  return "hsl".concat(C(t2, "a") ? "a" : "", "(").concat(X(t2.h), ",").concat(X(t2.s), "%,").concat(X(t2.l), "%").concat(C(t2, "a") && ",".concat(X(t2.a, 2)) || "", ")");
}, u[r.CMYK] = function(t2) {
  return "cmyk(".concat(X(t2.c), "%,").concat(X(t2.m), "%,").concat(X(t2.y), "%,").concat(X(t2.k), "%").concat(C(t2, "a") && ",".concat(X(t2.a, 2)) || "", ")");
}, u);
var Y = function(t2) {
  if ("string" == typeof t2) {
    var e2 = t2.match(p), r2 = +e2[1];
    switch (e2[2]) {
      case "rad":
        t2 = Math.round(180 * r2 / Math.PI);
        break;
      case "turn":
        t2 = Math.round(360 * r2);
        break;
      default:
        t2 = r2;
    }
  }
  return (t2 > 360 || t2 < 0) && (t2 -= 360 * Math.floor(t2 / 360)), t2;
};
var T = function(t2) {
  return "string" == typeof t2 && (t2 = b.test(t2) ? +t2.replace(b, "$1") / 100 : +t2), isNaN(+t2) || t2 > 1 ? 1 : X(t2, 6);
};
var K = function(r2, n2, o2) {
  return n2.reduce(function(n3, i2) {
    return e(e([], n3, true), [t(t({}, r2), { h: o2 === a.ADDITIVE ? Y(r2.h + i2) : Y(M(M(r2.h, false) + i2, true)) })], false);
  }, [t({}, r2)]);
};
var P = function(t2, e2) {
  return K(t2, [30, -30], e2);
};
var w = function(t2, e2) {
  return K(t2, [180], e2);
};
var x = function(t2, e2) {
  return K(t2, [150, -150], e2);
};
var N = function(t2, e2) {
  return K(t2, [120, -120], e2);
};
var V = function(t2, e2) {
  return K(t2, [60, -120, 180], e2);
};
var U = function(t2, e2) {
  return K(t2, [90, -90, 180], e2);
};
var $ = Object.entries(r).reduce(function(t2, e2) {
  var n2 = e2[0], a2 = e2[1];
  if (n2 !== r.HEX) {
    var o2 = O(n2.split(""));
    t2[o2] = a2, t2["A" + o2] = a2;
  }
  return t2;
}, {});
var q = function(t2) {
  return "string" == typeof t2 ? function(t3) {
    var e2;
    if (Object.keys(r).some(function(r2) {
      if (g[r2].test(t3))
        return e2 = r2, true;
    }), !e2 && ~f.indexOf(t3) && (e2 = r.HEX), !e2)
      throw new Error(y);
    return e2;
  }(t2) : function(t3) {
    var e2, n2 = false, a2 = O(Object.keys(t3));
    if ($[a2] && (e2 = $[a2]), e2 && e2 === r.RGB) {
      var o2 = Object.entries(t3).some(function(t4) {
        return !F.test("".concat(t4[1]));
      }), i2 = Object.entries(t3).some(function(t4) {
        return !(b.test("".concat(t4[1])) || !F.test("".concat(t4[1])) && !isNaN(+t4[1]) && +t4[1] <= 255);
      });
      o2 && i2 && (n2 = true), o2 || (e2 = r.HEX);
    }
    if (!e2 || n2)
      throw new Error(m);
    return e2;
  }(t2);
};
var Q = ((c = {})[r.HEX] = function(t2) {
  var e2 = (~f.indexOf(t2) ? o[t2] : t2).match(g.HEX), r2 = { r: R(e2[1] || e2[5]), g: R(e2[2] || e2[6]), b: R(e2[3] || e2[7]) }, n2 = e2[4] || e2[8];
  return void 0 !== n2 && (r2.a = R(n2) / 255), r2;
}, c[r.RGB] = function(t2) {
  var e2 = t2.match(g.RGB), r2 = G(e2[1] || e2[5]), n2 = G(e2[2] || e2[6]), a2 = G(e2[3] || e2[7]), o2 = e2[4] || e2[8], i2 = { r: Math.min(r2, 255), g: Math.min(n2, 255), b: Math.min(a2, 255) };
  return void 0 !== o2 && (i2.a = T(o2)), i2;
}, c[r.HSL] = function(t2) {
  var e2 = t2.match(g.HSL), r2 = Y(e2[1] || e2[5]), n2 = D(e2[2] || e2[6]), a2 = D(e2[3] || e2[7]), o2 = e2[4] || e2[8], i2 = E(r2, n2, a2);
  return void 0 !== o2 && (i2.a = T(o2)), i2;
}, c[r.CMYK] = function(t2) {
  var e2 = t2.match(g.CMYK), r2 = k(e2[1] || e2[6]), n2 = k(e2[2] || e2[7]), a2 = k(e2[3] || e2[8]), o2 = k(e2[4] || e2[9]), i2 = e2[5] || e2[10], u2 = H(r2, n2, a2, o2);
  return void 0 !== i2 && (u2.a = T(i2)), u2;
}, c);
var _ = ((s = {})[r.HEX] = function(t2) {
  var e2 = { r: G("".concat(t2.r)), g: G("".concat(t2.g)), b: G("".concat(t2.b)) };
  return C(t2, "a") && (e2.a = Math.min(G("".concat(t2.a), true), 1)), e2;
}, s[r.RGB] = function(t2) {
  return this.HEX(t2);
}, s[r.HSL] = function(t2) {
  var e2 = D("".concat(t2.s)), r2 = D("".concat(t2.l)), n2 = E(Y(t2.h), e2, r2);
  return C(t2, "a") && (n2.a = T(t2.a)), n2;
}, s[r.CMYK] = function(t2) {
  var e2 = k("".concat(t2.c)), r2 = k("".concat(t2.m)), n2 = k("".concat(t2.y)), a2 = k("".concat(t2.k)), o2 = H(e2, r2, n2, a2);
  return C(t2, "a") && (o2.a = T(t2.a)), o2;
}, s);
var z = function(t2, e2) {
  return void 0 === e2 && (e2 = q(t2)), "string" == typeof t2 ? Q[e2](t2) : _[e2](t2);
};
var J = ((d = {})[r.HEX] = function(t2) {
  return { r: S(t2.r), g: S(t2.g), b: S(t2.b) };
}, d.HEXA = function(t2) {
  var e2 = J.HEX(t2);
  return e2.a = C(t2, "a") ? S(255 * t2.a) : "0xFF", e2;
}, d[r.RGB] = function(t2) {
  return C(t2, "a") && delete t2.a, t2;
}, d.RGBA = function(t2) {
  return t2.a = C(t2, "a") ? X(t2.a, 2) : 1, t2;
}, d[r.HSL] = function(t2) {
  var e2 = B(t2.r, t2.g, t2.b);
  return delete e2.a, e2;
}, d.HSLA = function(t2) {
  var e2 = J.HSL(t2);
  return e2.a = C(t2, "a") ? X(t2.a, 2) : 1, e2;
}, d[r.CMYK] = function(t2) {
  return v(t2.r, t2.g, t2.b);
}, d.CMYKA = function(t2) {
  var e2 = v(t2.r, t2.g, t2.b);
  return e2.a = C(t2, "a") ? X(t2.a, 2) : 1, e2;
}, d);
var W = function(e2, n2, a2) {
  var o2 = q(e2), i2 = "string" == typeof e2, u2 = z(e2, o2), c2 = "string" == typeof e2 && C(u2, "a") || "string" != typeof e2 && C(e2, "a"), s2 = B(u2.r, u2.g, u2.b, u2.a);
  c2 || delete s2.a;
  var d2 = a2 ? s2.l / (n2 + 1) : (100 - s2.l) / (n2 + 1), h2 = Array(n2).fill(null).map(function(e3, r2) {
    return t(t({}, s2), { l: s2.l + d2 * (r2 + 1) * (1 - 2 * +a2) });
  });
  switch (o2) {
    case r.HEX:
    default:
      return h2.map(function(e3) {
        var r2 = E(e3.h, e3.s, e3.l);
        return c2 && (r2.a = e3.a), i2 ? c2 ? I.HEX(t(t({}, r2), { a: X(255 * r2.a, 6) })) : I.HEX(r2) : c2 ? J.HEXA(r2) : J.HEX(r2);
      });
    case r.RGB:
      return h2.map(function(t2) {
        var e3 = E(t2.h, t2.s, t2.l);
        return c2 && (e3.a = t2.a), i2 ? I.RGB(e3) : c2 ? J.RGBA(e3) : J.RGB(e3);
      });
    case r.HSL:
      return h2.map(function(e3) {
        return i2 ? I.HSL(e3) : c2 ? J.HSLA(t(t({}, E(e3.h, e3.s, e3.l)), { a: e3.a })) : J.HSL(E(e3.h, e3.s, e3.l));
      });
  }
};
var Z = ((h = { buildHarmony: function(t2, e2, n2) {
  var a2 = q(t2), o2 = z(t2, a2), i2 = B(o2.r, o2.g, o2.b, o2.a), u2 = "string" == typeof t2 && C(o2, "a") || "string" != typeof t2 && C(t2, "a"), c2 = "string" == typeof t2;
  switch (a2) {
    case r.HEX:
    default:
      return u2 ? this.HEXA(i2, e2, n2, c2) : this.HEX(i2, e2, n2, c2);
    case r.HSL:
      return u2 ? this.HSLA(i2, e2, n2, c2) : this.HSL(i2, e2, n2, c2);
    case r.RGB:
      return u2 ? this.RGBA(i2, e2, n2, c2) : this.RGB(i2, e2, n2, c2);
  }
} })[r.HEX] = function(t2, e2, r2, n2) {
  return e2(t2, r2).map(function(t3) {
    return n2 ? I.HEX(E(t3.h, t3.s, t3.l)) : J.HEX(E(t3.h, t3.s, t3.l));
  });
}, h.HEXA = function(e2, r2, n2, a2) {
  return r2(e2, n2).map(function(e3) {
    return a2 ? I.HEX(t(t({}, E(e3.h, e3.s, e3.l)), { a: 255 * T(e3.a) })) : J.HEXA(t(t({}, E(e3.h, e3.s, e3.l)), { a: T(e3.a) }));
  });
}, h[r.RGB] = function(t2, e2, r2, n2) {
  return e2(t2, r2).map(function(t3) {
    return n2 ? I.RGB(E(t3.h, t3.s, t3.l)) : J.RGB(E(t3.h, t3.s, t3.l));
  });
}, h.RGBA = function(e2, r2, n2, a2) {
  return r2(e2, n2).map(function(e3) {
    return a2 ? I.RGB(t(t({}, E(e3.h, e3.s, e3.l)), { a: T(e3.a) })) : J.RGBA(t(t({}, E(e3.h, e3.s, e3.l)), { a: T(e3.a) }));
  });
}, h[r.HSL] = function(t2, e2, r2, n2) {
  return e2(t2, r2).map(function(t3) {
    return n2 ? I.HSL({ h: t3.h, s: t3.s, l: t3.l }) : J.HSL(E(t3.h, t3.s, t3.l));
  });
}, h.HSLA = function(e2, r2, n2, a2) {
  return r2(e2, n2).map(function(e3) {
    return a2 ? I.HSL(t(t({}, e3), { a: T(e3.a) })) : J.HSLA(t(t({}, E(e3.h, e3.s, e3.l)), { a: T(e3.a) }));
  });
}, h);
var tt = ((l = { mix: function(e2, r2) {
  var n2, o2, i2, u2, c2, s2, d2, h2, l2, f2, g2, p2, b2, F2, y2, m2 = e2.map(function(t2) {
    var e3 = q(t2);
    return z(t2, e3);
  }), A2 = r2 === a.SUBTRACTIVE ? m2.map(function(t2) {
    var e3, r3, n3, a2, o3, i3, u3, c3, s3, d3, h3, l3, f3, g3, p3 = (e3 = t2.r, r3 = t2.g, n3 = t2.b, a2 = Math.min(e3, r3, n3), o3 = Math.min(255 - e3, 255 - r3, 255 - n3), i3 = e3 - a2, u3 = r3 - a2, c3 = n3 - a2, s3 = Math.min(i3, u3), d3 = i3 - s3, h3 = (u3 + s3) / 2, l3 = (c3 + u3 - s3) / 2, f3 = Math.max(d3, h3, l3) / Math.max(i3, u3, c3), g3 = isNaN(f3) || f3 === 1 / 0 || f3 <= 0 ? 1 : f3, { r: d3 / g3 + o3, y: h3 / g3 + o3, b: l3 / g3 + o3 });
    return C(t2, "a") && (p3.a = t2.a), p3;
  }) : null;
  function E2(e3) {
    var n3 = r2 === a.ADDITIVE ? { r: 0, g: 0, b: 0, a: 0 } : { r: 0, y: 0, b: 0, a: 0 };
    return e3.reduce(function(e4, n4) {
      var o3 = C(n4, "a") ? n4.a : 1, i3 = { r: Math.min(e4.r + n4.r * o3, 255), b: Math.min(e4.b + n4.b * o3, 255), a: 1 - (1 - o3) * (1 - e4.a) }, u3 = "g" in e4 ? e4.g : e4.y, c3 = "g" in n4 ? n4.g : n4.y;
      return t(t({}, i3), r2 === a.ADDITIVE ? { g: Math.min(u3 + c3 * o3, 255) } : { y: Math.min(u3 + c3 * o3, 255) });
    }, n3);
  }
  if (r2 === a.ADDITIVE)
    n2 = E2(m2);
  else {
    var H2 = E2(A2);
    o2 = H2.r, i2 = H2.y, u2 = H2.b, c2 = Math.min(o2, i2, u2), s2 = Math.min(255 - o2, 255 - i2, 255 - u2), d2 = o2 - c2, h2 = i2 - c2, l2 = u2 - c2, f2 = Math.min(h2, l2), g2 = d2 + h2 - f2, p2 = h2 + f2, b2 = 2 * (l2 - f2), F2 = Math.max(g2, p2, b2) / Math.max(d2, h2, l2), y2 = isNaN(F2) || F2 === 1 / 0 || F2 <= 0 ? 1 : F2, (n2 = { r: g2 / y2 + s2, g: p2 / y2 + s2, b: b2 / y2 + s2 }).a = H2.a;
  }
  return { r: X(n2.r, 2), g: X(n2.g, 2), b: X(n2.b, 2), a: j(n2.a, 0, 1) };
} })[r.HEX] = function(t2, e2, r2) {
  var n2 = this.mix(t2, e2);
  return delete n2.a, r2 ? I.HEX(n2) : J.HEX(n2);
}, l.HEXA = function(t2, e2, r2) {
  var n2 = this.mix(t2, e2);
  return n2.a = r2 ? 255 * T(n2.a) : T(n2.a), r2 ? I.HEX(n2) : J.HEXA(n2);
}, l[r.RGB] = function(t2, e2, r2) {
  var n2 = this.mix(t2, e2);
  return delete n2.a, r2 ? I.RGB(n2) : J.RGB(n2);
}, l.RGBA = function(t2, e2, r2) {
  var n2 = this.mix(t2, e2);
  return r2 ? I.RGB(n2) : J.RGBA(n2);
}, l[r.HSL] = function(t2, e2, r2) {
  var n2 = this.mix(t2, e2), a2 = B(n2.r, n2.g, n2.b);
  return delete n2.a, delete a2.a, r2 ? I.HSL(a2) : J.HSL(n2);
}, l.HSLA = function(t2, e2, r2) {
  var n2 = this.mix(t2, e2), a2 = B(n2.r, n2.g, n2.b, n2.a);
  return r2 ? I.HSL(a2) : J.HSLA(n2);
}, l);
var et = function(t2, e2, r2, n2, a2) {
  var o2 = n2(z(t2, e2));
  return r2 ? a2(o2) : o2;
};
var rt = function(t2, e2, r2, n2, a2, o2) {
  r2 < 1 && (r2 = 5);
  var i2 = function(t3, e3, r3) {
    var n3 = r3 - 1, a3 = (e3.r - t3.r) / n3, o3 = (e3.g - t3.g) / n3, i3 = (e3.b - t3.b) / n3, u2 = T(t3.a), c2 = (T(e3.a) - u2) / n3;
    return Array(r3).fill(null).map(function(r4, s2) {
      return 0 === s2 ? t3 : s2 === n3 ? e3 : { r: X(t3.r + a3 * s2), g: X(t3.g + o3 * s2), b: X(t3.b + i3 * s2), a: X(u2 + c2 * s2, 2) };
    });
  }(z(t2), z(e2), r2);
  return i2.map(function(t3) {
    var e3 = a2(t3);
    return n2 ? o2(e3) : e3;
  });
};
var nt = function() {
  function e2(t2) {
    this.rgb = z(t2), this.updateHSL(), this.updateCMYK();
  }
  return e2.prototype.updateRGB = function() {
    this.rgb = t(t({}, E(this.hsl.h, this.hsl.s, this.hsl.l)), { a: this.hsl.a });
  }, e2.prototype.updateRGBFromCMYK = function() {
    this.rgb = t(t({}, H(this.cmyk.c, this.cmyk.m, this.cmyk.y, this.cmyk.k)), { a: this.rgb.a });
  }, e2.prototype.updateHSL = function() {
    this.hsl = B(this.rgb.r, this.rgb.g, this.rgb.b, this.rgb.a);
  }, e2.prototype.updateCMYK = function() {
    this.cmyk = v(this.rgb.r, this.rgb.g, this.rgb.b);
  }, e2.prototype.updateRGBAndCMYK = function() {
    return this.updateRGB(), this.updateCMYK(), this;
  }, e2.prototype.updateHSLAndCMYK = function() {
    return this.updateHSL(), this.updateCMYK(), this;
  }, e2.prototype.updateRGBAndHSL = function() {
    return this.updateRGBFromCMYK(), this.updateHSL(), this;
  }, e2.prototype.setH = function(t2) {
    return this.hsl.h = Y(t2), this.updateRGBAndCMYK();
  }, e2.prototype.setS = function(t2) {
    return this.hsl.s = j(t2, 0, 100), this.updateRGBAndCMYK();
  }, e2.prototype.setL = function(t2) {
    return this.hsl.l = j(t2, 0, 100), this.updateRGBAndCMYK();
  }, e2.prototype.setR = function(t2) {
    return this.rgb.r = j(t2, 0, 255), this.updateHSLAndCMYK();
  }, e2.prototype.setG = function(t2) {
    return this.rgb.g = j(t2, 0, 255), this.updateHSLAndCMYK();
  }, e2.prototype.setB = function(t2) {
    return this.rgb.b = j(t2, 0, 255), this.updateHSLAndCMYK();
  }, e2.prototype.setA = function(t2) {
    return this.hsl.a = this.rgb.a = j(t2, 0, 1), this;
  }, e2.prototype.setC = function(t2) {
    return this.cmyk.c = j(t2, 0, 100), this.updateRGBAndHSL();
  }, e2.prototype.setM = function(t2) {
    return this.cmyk.m = j(t2, 0, 100), this.updateRGBAndHSL();
  }, e2.prototype.setY = function(t2) {
    return this.cmyk.y = j(t2, 0, 100), this.updateRGBAndHSL();
  }, e2.prototype.setK = function(t2) {
    return this.cmyk.k = j(t2, 0, 100), this.updateRGBAndHSL();
  }, Object.defineProperty(e2.prototype, "H", { get: function() {
    return X(this.hsl.h);
  }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "S", { get: function() {
    return X(this.hsl.s);
  }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "L", { get: function() {
    return X(this.hsl.l);
  }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "R", { get: function() {
    return X(this.rgb.r);
  }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "G", { get: function() {
    return X(this.rgb.g);
  }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "B", { get: function() {
    return X(this.rgb.b);
  }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "A", { get: function() {
    return X(this.hsl.a, 2);
  }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "C", { get: function() {
    return X(this.cmyk.c);
  }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "M", { get: function() {
    return X(this.cmyk.m);
  }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "Y", { get: function() {
    return X(this.cmyk.y);
  }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "K", { get: function() {
    return X(this.cmyk.k);
  }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "HEXObject", { get: function() {
    return J.HEX(this.rgb);
  }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "HEXAObject", { get: function() {
    return J.HEXA(this.rgb);
  }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "RGBObject", { get: function() {
    return { r: this.R, g: this.G, b: this.B };
  }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "RGBAObject", { get: function() {
    return t(t({}, this.RGBObject), { a: this.hsl.a });
  }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "HSLObject", { get: function() {
    return { h: this.H, s: this.S, l: this.L };
  }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "HSLAObject", { get: function() {
    return t(t({}, this.HSLObject), { a: this.hsl.a });
  }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "CMYKObject", { get: function() {
    return { c: this.C, m: this.M, y: this.Y, k: this.K };
  }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "CMYKAObject", { get: function() {
    return { c: this.C, m: this.M, y: this.Y, k: this.K, a: this.hsl.a };
  }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "HEX", { get: function() {
    var t2 = this.rgb, e3 = { r: t2.r, g: t2.g, b: t2.b };
    return I.HEX(e3);
  }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "HEXA", { get: function() {
    var t2 = this.rgb, e3 = { r: t2.r, g: t2.g, b: t2.b, a: 255 * this.hsl.a };
    return I.HEX(e3);
  }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "RGB", { get: function() {
    var t2 = this.rgb, e3 = { r: t2.r, g: t2.g, b: t2.b };
    return I.RGB(e3);
  }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "RGBA", { get: function() {
    var t2 = this.rgb, e3 = { r: t2.r, g: t2.g, b: t2.b, a: this.hsl.a };
    return I.RGB(e3);
  }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "HSL", { get: function() {
    var t2 = this.hsl, e3 = { h: t2.h, s: t2.s, l: t2.l };
    return I.HSL(e3);
  }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "HSLA", { get: function() {
    return I.HSL(this.hsl);
  }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "CMYK", { get: function() {
    return I.CMYK(this.cmyk);
  }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "CMYKA", { get: function() {
    return I.CMYK(t(t({}, this.cmyk), { a: this.hsl.a }));
  }, enumerable: false, configurable: true }), e2.toHEX = function(t2, e3) {
    void 0 === e3 && (e3 = true);
    var r2 = q(t2);
    return et(t2, r2, e3, J.HEX, I.HEX);
  }, e2.toHEXA = function(t2, e3) {
    void 0 === e3 && (e3 = true);
    var r2 = q(t2);
    return et(t2, r2, e3, J.HEXA, I.HEX);
  }, e2.toRGB = function(t2, e3) {
    void 0 === e3 && (e3 = true);
    var r2 = q(t2);
    return et(t2, r2, e3, J.RGB, I.RGB);
  }, e2.toRGBA = function(t2, e3) {
    void 0 === e3 && (e3 = true);
    var r2 = q(t2);
    return et(t2, r2, e3, J.RGBA, I.RGB);
  }, e2.toHSL = function(t2, e3) {
    void 0 === e3 && (e3 = true);
    var r2 = q(t2);
    return et(t2, r2, e3, J.HSL, I.HSL);
  }, e2.toHSLA = function(t2, e3) {
    void 0 === e3 && (e3 = true);
    var r2 = q(t2);
    return et(t2, r2, e3, J.HSLA, I.HSL);
  }, e2.toCMYK = function(t2, e3) {
    void 0 === e3 && (e3 = true);
    var r2 = q(t2);
    return et(t2, r2, e3, J.CMYK, I.CMYK);
  }, e2.toCMYKA = function(t2, e3) {
    void 0 === e3 && (e3 = true);
    var r2 = q(t2);
    return et(t2, r2, e3, J.CMYKA, I.CMYK);
  }, e2.getBlendHEX = function(t2, e3, r2, n2) {
    return void 0 === r2 && (r2 = 5), void 0 === n2 && (n2 = true), rt(t2, e3, r2, n2, J.HEX, I.HEX);
  }, e2.getBlendHEXA = function(t2, e3, r2, n2) {
    return void 0 === r2 && (r2 = 5), void 0 === n2 && (n2 = true), rt(t2, e3, r2, n2, J.HEXA, I.HEX);
  }, e2.getBlendRGB = function(t2, e3, r2, n2) {
    return void 0 === r2 && (r2 = 5), void 0 === n2 && (n2 = true), rt(t2, e3, r2, n2, J.RGB, I.RGB);
  }, e2.getBlendRGBA = function(t2, e3, r2, n2) {
    return void 0 === r2 && (r2 = 5), void 0 === n2 && (n2 = true), rt(t2, e3, r2, n2, J.RGBA, I.RGB);
  }, e2.getBlendHSL = function(t2, e3, r2, n2) {
    return void 0 === r2 && (r2 = 5), void 0 === n2 && (n2 = true), rt(t2, e3, r2, n2, J.HSL, I.HSL);
  }, e2.getBlendHSLA = function(t2, e3, r2, n2) {
    return void 0 === r2 && (r2 = 5), void 0 === n2 && (n2 = true), rt(t2, e3, r2, n2, J.HSLA, I.HSL);
  }, e2.getMixHEX = function(t2, e3, r2) {
    return void 0 === e3 && (e3 = a.ADDITIVE), void 0 === r2 && (r2 = true), tt.HEX(t2, e3, r2);
  }, e2.getMixHEXA = function(t2, e3, r2) {
    return void 0 === e3 && (e3 = a.ADDITIVE), void 0 === r2 && (r2 = true), tt.HEXA(t2, e3, r2);
  }, e2.getMixRGB = function(t2, e3, r2) {
    return void 0 === e3 && (e3 = a.ADDITIVE), void 0 === r2 && (r2 = true), tt.RGB(t2, e3, r2);
  }, e2.getMixRGBA = function(t2, e3, r2) {
    return void 0 === e3 && (e3 = a.ADDITIVE), void 0 === r2 && (r2 = true), tt.RGBA(t2, e3, r2);
  }, e2.getMixHSL = function(t2, e3, r2) {
    return void 0 === e3 && (e3 = a.ADDITIVE), void 0 === r2 && (r2 = true), tt.HSL(t2, e3, r2);
  }, e2.getMixHSLA = function(t2, e3, r2) {
    return void 0 === e3 && (e3 = a.ADDITIVE), void 0 === r2 && (r2 = true), tt.HSLA(t2, e3, r2);
  }, e2.getShades = function(t2, e3) {
    return W(t2, e3, true);
  }, e2.getTints = function(t2, e3) {
    return W(t2, e3, false);
  }, e2.getHarmony = function(t2, e3, r2) {
    switch (void 0 === e3 && (e3 = n.COMPLEMENTARY), void 0 === r2 && (r2 = a.ADDITIVE), e3) {
      case n.ANALOGOUS:
        return Z.buildHarmony(t2, P, r2);
      case n.SPLIT_COMPLEMENTARY:
        return Z.buildHarmony(t2, x, r2);
      case n.TRIADIC:
        return Z.buildHarmony(t2, N, r2);
      case n.TETRADIC:
        return Z.buildHarmony(t2, V, r2);
      case n.SQUARE:
        return Z.buildHarmony(t2, U, r2);
      default:
        return Z.buildHarmony(t2, w, r2);
    }
  }, e2;
}();

// node_modules/cleave.js/dist/cleave-esm.js
var commonjsGlobal = typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
var NumeralFormatter = function(numeralDecimalMark, numeralIntegerScale, numeralDecimalScale, numeralThousandsGroupStyle, numeralPositiveOnly, stripLeadingZeroes, prefix, signBeforePrefix, tailPrefix, delimiter) {
  var owner = this;
  owner.numeralDecimalMark = numeralDecimalMark || ".";
  owner.numeralIntegerScale = numeralIntegerScale > 0 ? numeralIntegerScale : 0;
  owner.numeralDecimalScale = numeralDecimalScale >= 0 ? numeralDecimalScale : 2;
  owner.numeralThousandsGroupStyle = numeralThousandsGroupStyle || NumeralFormatter.groupStyle.thousand;
  owner.numeralPositiveOnly = !!numeralPositiveOnly;
  owner.stripLeadingZeroes = stripLeadingZeroes !== false;
  owner.prefix = prefix || prefix === "" ? prefix : "";
  owner.signBeforePrefix = !!signBeforePrefix;
  owner.tailPrefix = !!tailPrefix;
  owner.delimiter = delimiter || delimiter === "" ? delimiter : ",";
  owner.delimiterRE = delimiter ? new RegExp("\\" + delimiter, "g") : "";
};
NumeralFormatter.groupStyle = {
  thousand: "thousand",
  lakh: "lakh",
  wan: "wan",
  none: "none"
};
NumeralFormatter.prototype = {
  getRawValue: function(value) {
    return value.replace(this.delimiterRE, "").replace(this.numeralDecimalMark, ".");
  },
  format: function(value) {
    var owner = this, parts, partSign, partSignAndPrefix, partInteger, partDecimal = "";
    value = value.replace(/[A-Za-z]/g, "").replace(owner.numeralDecimalMark, "M").replace(/[^\dM-]/g, "").replace(/^\-/, "N").replace(/\-/g, "").replace("N", owner.numeralPositiveOnly ? "" : "-").replace("M", owner.numeralDecimalMark);
    if (owner.stripLeadingZeroes) {
      value = value.replace(/^(-)?0+(?=\d)/, "$1");
    }
    partSign = value.slice(0, 1) === "-" ? "-" : "";
    if (typeof owner.prefix != "undefined") {
      if (owner.signBeforePrefix) {
        partSignAndPrefix = partSign + owner.prefix;
      } else {
        partSignAndPrefix = owner.prefix + partSign;
      }
    } else {
      partSignAndPrefix = partSign;
    }
    partInteger = value;
    if (value.indexOf(owner.numeralDecimalMark) >= 0) {
      parts = value.split(owner.numeralDecimalMark);
      partInteger = parts[0];
      partDecimal = owner.numeralDecimalMark + parts[1].slice(0, owner.numeralDecimalScale);
    }
    if (partSign === "-") {
      partInteger = partInteger.slice(1);
    }
    if (owner.numeralIntegerScale > 0) {
      partInteger = partInteger.slice(0, owner.numeralIntegerScale);
    }
    switch (owner.numeralThousandsGroupStyle) {
      case NumeralFormatter.groupStyle.lakh:
        partInteger = partInteger.replace(/(\d)(?=(\d\d)+\d$)/g, "$1" + owner.delimiter);
        break;
      case NumeralFormatter.groupStyle.wan:
        partInteger = partInteger.replace(/(\d)(?=(\d{4})+$)/g, "$1" + owner.delimiter);
        break;
      case NumeralFormatter.groupStyle.thousand:
        partInteger = partInteger.replace(/(\d)(?=(\d{3})+$)/g, "$1" + owner.delimiter);
        break;
    }
    if (owner.tailPrefix) {
      return partSign + partInteger.toString() + (owner.numeralDecimalScale > 0 ? partDecimal.toString() : "") + owner.prefix;
    }
    return partSignAndPrefix + partInteger.toString() + (owner.numeralDecimalScale > 0 ? partDecimal.toString() : "");
  }
};
var NumeralFormatter_1 = NumeralFormatter;
var DateFormatter = function(datePattern, dateMin, dateMax) {
  var owner = this;
  owner.date = [];
  owner.blocks = [];
  owner.datePattern = datePattern;
  owner.dateMin = dateMin.split("-").reverse().map(function(x2) {
    return parseInt(x2, 10);
  });
  if (owner.dateMin.length === 2)
    owner.dateMin.unshift(0);
  owner.dateMax = dateMax.split("-").reverse().map(function(x2) {
    return parseInt(x2, 10);
  });
  if (owner.dateMax.length === 2)
    owner.dateMax.unshift(0);
  owner.initBlocks();
};
DateFormatter.prototype = {
  initBlocks: function() {
    var owner = this;
    owner.datePattern.forEach(function(value) {
      if (value === "Y") {
        owner.blocks.push(4);
      } else {
        owner.blocks.push(2);
      }
    });
  },
  getISOFormatDate: function() {
    var owner = this, date = owner.date;
    return date[2] ? date[2] + "-" + owner.addLeadingZero(date[1]) + "-" + owner.addLeadingZero(date[0]) : "";
  },
  getBlocks: function() {
    return this.blocks;
  },
  getValidatedDate: function(value) {
    var owner = this, result = "";
    value = value.replace(/[^\d]/g, "");
    owner.blocks.forEach(function(length, index) {
      if (value.length > 0) {
        var sub = value.slice(0, length), sub0 = sub.slice(0, 1), rest = value.slice(length);
        switch (owner.datePattern[index]) {
          case "d":
            if (sub === "00") {
              sub = "01";
            } else if (parseInt(sub0, 10) > 3) {
              sub = "0" + sub0;
            } else if (parseInt(sub, 10) > 31) {
              sub = "31";
            }
            break;
          case "m":
            if (sub === "00") {
              sub = "01";
            } else if (parseInt(sub0, 10) > 1) {
              sub = "0" + sub0;
            } else if (parseInt(sub, 10) > 12) {
              sub = "12";
            }
            break;
        }
        result += sub;
        value = rest;
      }
    });
    return this.getFixedDateString(result);
  },
  getFixedDateString: function(value) {
    var owner = this, datePattern = owner.datePattern, date = [], dayIndex = 0, monthIndex = 0, yearIndex = 0, dayStartIndex = 0, monthStartIndex = 0, yearStartIndex = 0, day, month, year, fullYearDone = false;
    if (value.length === 4 && datePattern[0].toLowerCase() !== "y" && datePattern[1].toLowerCase() !== "y") {
      dayStartIndex = datePattern[0] === "d" ? 0 : 2;
      monthStartIndex = 2 - dayStartIndex;
      day = parseInt(value.slice(dayStartIndex, dayStartIndex + 2), 10);
      month = parseInt(value.slice(monthStartIndex, monthStartIndex + 2), 10);
      date = this.getFixedDate(day, month, 0);
    }
    if (value.length === 8) {
      datePattern.forEach(function(type, index) {
        switch (type) {
          case "d":
            dayIndex = index;
            break;
          case "m":
            monthIndex = index;
            break;
          default:
            yearIndex = index;
            break;
        }
      });
      yearStartIndex = yearIndex * 2;
      dayStartIndex = dayIndex <= yearIndex ? dayIndex * 2 : dayIndex * 2 + 2;
      monthStartIndex = monthIndex <= yearIndex ? monthIndex * 2 : monthIndex * 2 + 2;
      day = parseInt(value.slice(dayStartIndex, dayStartIndex + 2), 10);
      month = parseInt(value.slice(monthStartIndex, monthStartIndex + 2), 10);
      year = parseInt(value.slice(yearStartIndex, yearStartIndex + 4), 10);
      fullYearDone = value.slice(yearStartIndex, yearStartIndex + 4).length === 4;
      date = this.getFixedDate(day, month, year);
    }
    if (value.length === 4 && (datePattern[0] === "y" || datePattern[1] === "y")) {
      monthStartIndex = datePattern[0] === "m" ? 0 : 2;
      yearStartIndex = 2 - monthStartIndex;
      month = parseInt(value.slice(monthStartIndex, monthStartIndex + 2), 10);
      year = parseInt(value.slice(yearStartIndex, yearStartIndex + 2), 10);
      fullYearDone = value.slice(yearStartIndex, yearStartIndex + 2).length === 2;
      date = [0, month, year];
    }
    if (value.length === 6 && (datePattern[0] === "Y" || datePattern[1] === "Y")) {
      monthStartIndex = datePattern[0] === "m" ? 0 : 4;
      yearStartIndex = 2 - 0.5 * monthStartIndex;
      month = parseInt(value.slice(monthStartIndex, monthStartIndex + 2), 10);
      year = parseInt(value.slice(yearStartIndex, yearStartIndex + 4), 10);
      fullYearDone = value.slice(yearStartIndex, yearStartIndex + 4).length === 4;
      date = [0, month, year];
    }
    date = owner.getRangeFixedDate(date);
    owner.date = date;
    var result = date.length === 0 ? value : datePattern.reduce(function(previous, current) {
      switch (current) {
        case "d":
          return previous + (date[0] === 0 ? "" : owner.addLeadingZero(date[0]));
        case "m":
          return previous + (date[1] === 0 ? "" : owner.addLeadingZero(date[1]));
        case "y":
          return previous + (fullYearDone ? owner.addLeadingZeroForYear(date[2], false) : "");
        case "Y":
          return previous + (fullYearDone ? owner.addLeadingZeroForYear(date[2], true) : "");
      }
    }, "");
    return result;
  },
  getRangeFixedDate: function(date) {
    var owner = this, datePattern = owner.datePattern, dateMin = owner.dateMin || [], dateMax = owner.dateMax || [];
    if (!date.length || dateMin.length < 3 && dateMax.length < 3)
      return date;
    if (datePattern.find(function(x2) {
      return x2.toLowerCase() === "y";
    }) && date[2] === 0)
      return date;
    if (dateMax.length && (dateMax[2] < date[2] || dateMax[2] === date[2] && (dateMax[1] < date[1] || dateMax[1] === date[1] && dateMax[0] < date[0])))
      return dateMax;
    if (dateMin.length && (dateMin[2] > date[2] || dateMin[2] === date[2] && (dateMin[1] > date[1] || dateMin[1] === date[1] && dateMin[0] > date[0])))
      return dateMin;
    return date;
  },
  getFixedDate: function(day, month, year) {
    day = Math.min(day, 31);
    month = Math.min(month, 12);
    year = parseInt(year || 0, 10);
    if (month < 7 && month % 2 === 0 || month > 8 && month % 2 === 1) {
      day = Math.min(day, month === 2 ? this.isLeapYear(year) ? 29 : 28 : 30);
    }
    return [day, month, year];
  },
  isLeapYear: function(year) {
    return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
  },
  addLeadingZero: function(number) {
    return (number < 10 ? "0" : "") + number;
  },
  addLeadingZeroForYear: function(number, fullYearMode) {
    if (fullYearMode) {
      return (number < 10 ? "000" : number < 100 ? "00" : number < 1e3 ? "0" : "") + number;
    }
    return (number < 10 ? "0" : "") + number;
  }
};
var DateFormatter_1 = DateFormatter;
var TimeFormatter = function(timePattern, timeFormat) {
  var owner = this;
  owner.time = [];
  owner.blocks = [];
  owner.timePattern = timePattern;
  owner.timeFormat = timeFormat;
  owner.initBlocks();
};
TimeFormatter.prototype = {
  initBlocks: function() {
    var owner = this;
    owner.timePattern.forEach(function() {
      owner.blocks.push(2);
    });
  },
  getISOFormatTime: function() {
    var owner = this, time = owner.time;
    return time[2] ? owner.addLeadingZero(time[0]) + ":" + owner.addLeadingZero(time[1]) + ":" + owner.addLeadingZero(time[2]) : "";
  },
  getBlocks: function() {
    return this.blocks;
  },
  getTimeFormatOptions: function() {
    var owner = this;
    if (String(owner.timeFormat) === "12") {
      return {
        maxHourFirstDigit: 1,
        maxHours: 12,
        maxMinutesFirstDigit: 5,
        maxMinutes: 60
      };
    }
    return {
      maxHourFirstDigit: 2,
      maxHours: 23,
      maxMinutesFirstDigit: 5,
      maxMinutes: 60
    };
  },
  getValidatedTime: function(value) {
    var owner = this, result = "";
    value = value.replace(/[^\d]/g, "");
    var timeFormatOptions = owner.getTimeFormatOptions();
    owner.blocks.forEach(function(length, index) {
      if (value.length > 0) {
        var sub = value.slice(0, length), sub0 = sub.slice(0, 1), rest = value.slice(length);
        switch (owner.timePattern[index]) {
          case "h":
            if (parseInt(sub0, 10) > timeFormatOptions.maxHourFirstDigit) {
              sub = "0" + sub0;
            } else if (parseInt(sub, 10) > timeFormatOptions.maxHours) {
              sub = timeFormatOptions.maxHours + "";
            }
            break;
          case "m":
          case "s":
            if (parseInt(sub0, 10) > timeFormatOptions.maxMinutesFirstDigit) {
              sub = "0" + sub0;
            } else if (parseInt(sub, 10) > timeFormatOptions.maxMinutes) {
              sub = timeFormatOptions.maxMinutes + "";
            }
            break;
        }
        result += sub;
        value = rest;
      }
    });
    return this.getFixedTimeString(result);
  },
  getFixedTimeString: function(value) {
    var owner = this, timePattern = owner.timePattern, time = [], secondIndex = 0, minuteIndex = 0, hourIndex = 0, secondStartIndex = 0, minuteStartIndex = 0, hourStartIndex = 0, second, minute, hour;
    if (value.length === 6) {
      timePattern.forEach(function(type, index) {
        switch (type) {
          case "s":
            secondIndex = index * 2;
            break;
          case "m":
            minuteIndex = index * 2;
            break;
          case "h":
            hourIndex = index * 2;
            break;
        }
      });
      hourStartIndex = hourIndex;
      minuteStartIndex = minuteIndex;
      secondStartIndex = secondIndex;
      second = parseInt(value.slice(secondStartIndex, secondStartIndex + 2), 10);
      minute = parseInt(value.slice(minuteStartIndex, minuteStartIndex + 2), 10);
      hour = parseInt(value.slice(hourStartIndex, hourStartIndex + 2), 10);
      time = this.getFixedTime(hour, minute, second);
    }
    if (value.length === 4 && owner.timePattern.indexOf("s") < 0) {
      timePattern.forEach(function(type, index) {
        switch (type) {
          case "m":
            minuteIndex = index * 2;
            break;
          case "h":
            hourIndex = index * 2;
            break;
        }
      });
      hourStartIndex = hourIndex;
      minuteStartIndex = minuteIndex;
      second = 0;
      minute = parseInt(value.slice(minuteStartIndex, minuteStartIndex + 2), 10);
      hour = parseInt(value.slice(hourStartIndex, hourStartIndex + 2), 10);
      time = this.getFixedTime(hour, minute, second);
    }
    owner.time = time;
    return time.length === 0 ? value : timePattern.reduce(function(previous, current) {
      switch (current) {
        case "s":
          return previous + owner.addLeadingZero(time[2]);
        case "m":
          return previous + owner.addLeadingZero(time[1]);
        case "h":
          return previous + owner.addLeadingZero(time[0]);
      }
    }, "");
  },
  getFixedTime: function(hour, minute, second) {
    second = Math.min(parseInt(second || 0, 10), 60);
    minute = Math.min(minute, 60);
    hour = Math.min(hour, 60);
    return [hour, minute, second];
  },
  addLeadingZero: function(number) {
    return (number < 10 ? "0" : "") + number;
  }
};
var TimeFormatter_1 = TimeFormatter;
var PhoneFormatter = function(formatter, delimiter) {
  var owner = this;
  owner.delimiter = delimiter || delimiter === "" ? delimiter : " ";
  owner.delimiterRE = delimiter ? new RegExp("\\" + delimiter, "g") : "";
  owner.formatter = formatter;
};
PhoneFormatter.prototype = {
  setFormatter: function(formatter) {
    this.formatter = formatter;
  },
  format: function(phoneNumber) {
    var owner = this;
    owner.formatter.clear();
    phoneNumber = phoneNumber.replace(/[^\d+]/g, "");
    phoneNumber = phoneNumber.replace(/^\+/, "B").replace(/\+/g, "").replace("B", "+");
    phoneNumber = phoneNumber.replace(owner.delimiterRE, "");
    var result = "", current, validated = false;
    for (var i2 = 0, iMax = phoneNumber.length; i2 < iMax; i2++) {
      current = owner.formatter.inputDigit(phoneNumber.charAt(i2));
      if (/[\s()-]/g.test(current)) {
        result = current;
        validated = true;
      } else {
        if (!validated) {
          result = current;
        }
      }
    }
    result = result.replace(/[()]/g, "");
    result = result.replace(/[\s-]/g, owner.delimiter);
    return result;
  }
};
var PhoneFormatter_1 = PhoneFormatter;
var CreditCardDetector = {
  blocks: {
    uatp: [4, 5, 6],
    amex: [4, 6, 5],
    diners: [4, 6, 4],
    discover: [4, 4, 4, 4],
    mastercard: [4, 4, 4, 4],
    dankort: [4, 4, 4, 4],
    instapayment: [4, 4, 4, 4],
    jcb15: [4, 6, 5],
    jcb: [4, 4, 4, 4],
    maestro: [4, 4, 4, 4],
    visa: [4, 4, 4, 4],
    mir: [4, 4, 4, 4],
    unionPay: [4, 4, 4, 4],
    general: [4, 4, 4, 4]
  },
  re: {
    // starts with 1; 15 digits, not starts with 1800 (jcb card)
    uatp: /^(?!1800)1\d{0,14}/,
    // starts with 34/37; 15 digits
    amex: /^3[47]\d{0,13}/,
    // starts with 6011/65/644-649; 16 digits
    discover: /^(?:6011|65\d{0,2}|64[4-9]\d?)\d{0,12}/,
    // starts with 300-305/309 or 36/38/39; 14 digits
    diners: /^3(?:0([0-5]|9)|[689]\d?)\d{0,11}/,
    // starts with 51-55/2221–2720; 16 digits
    mastercard: /^(5[1-5]\d{0,2}|22[2-9]\d{0,1}|2[3-7]\d{0,2})\d{0,12}/,
    // starts with 5019/4175/4571; 16 digits
    dankort: /^(5019|4175|4571)\d{0,12}/,
    // starts with 637-639; 16 digits
    instapayment: /^63[7-9]\d{0,13}/,
    // starts with 2131/1800; 15 digits
    jcb15: /^(?:2131|1800)\d{0,11}/,
    // starts with 2131/1800/35; 16 digits
    jcb: /^(?:35\d{0,2})\d{0,12}/,
    // starts with 50/56-58/6304/67; 16 digits
    maestro: /^(?:5[0678]\d{0,2}|6304|67\d{0,2})\d{0,12}/,
    // starts with 22; 16 digits
    mir: /^220[0-4]\d{0,12}/,
    // starts with 4; 16 digits
    visa: /^4\d{0,15}/,
    // starts with 62/81; 16 digits
    unionPay: /^(62|81)\d{0,14}/
  },
  getStrictBlocks: function(block) {
    var total = block.reduce(function(prev, current) {
      return prev + current;
    }, 0);
    return block.concat(19 - total);
  },
  getInfo: function(value, strictMode) {
    var blocks = CreditCardDetector.blocks, re = CreditCardDetector.re;
    strictMode = !!strictMode;
    for (var key in re) {
      if (re[key].test(value)) {
        var matchedBlocks = blocks[key];
        return {
          type: key,
          blocks: strictMode ? this.getStrictBlocks(matchedBlocks) : matchedBlocks
        };
      }
    }
    return {
      type: "unknown",
      blocks: strictMode ? this.getStrictBlocks(blocks.general) : blocks.general
    };
  }
};
var CreditCardDetector_1 = CreditCardDetector;
var Util = {
  noop: function() {
  },
  strip: function(value, re) {
    return value.replace(re, "");
  },
  getPostDelimiter: function(value, delimiter, delimiters) {
    if (delimiters.length === 0) {
      return value.slice(-delimiter.length) === delimiter ? delimiter : "";
    }
    var matchedDelimiter = "";
    delimiters.forEach(function(current) {
      if (value.slice(-current.length) === current) {
        matchedDelimiter = current;
      }
    });
    return matchedDelimiter;
  },
  getDelimiterREByDelimiter: function(delimiter) {
    return new RegExp(delimiter.replace(/([.?*+^$[\]\\(){}|-])/g, "\\$1"), "g");
  },
  getNextCursorPosition: function(prevPos, oldValue, newValue, delimiter, delimiters) {
    if (oldValue.length === prevPos) {
      return newValue.length;
    }
    return prevPos + this.getPositionOffset(prevPos, oldValue, newValue, delimiter, delimiters);
  },
  getPositionOffset: function(prevPos, oldValue, newValue, delimiter, delimiters) {
    var oldRawValue, newRawValue, lengthOffset;
    oldRawValue = this.stripDelimiters(oldValue.slice(0, prevPos), delimiter, delimiters);
    newRawValue = this.stripDelimiters(newValue.slice(0, prevPos), delimiter, delimiters);
    lengthOffset = oldRawValue.length - newRawValue.length;
    return lengthOffset !== 0 ? lengthOffset / Math.abs(lengthOffset) : 0;
  },
  stripDelimiters: function(value, delimiter, delimiters) {
    var owner = this;
    if (delimiters.length === 0) {
      var delimiterRE = delimiter ? owner.getDelimiterREByDelimiter(delimiter) : "";
      return value.replace(delimiterRE, "");
    }
    delimiters.forEach(function(current) {
      current.split("").forEach(function(letter) {
        value = value.replace(owner.getDelimiterREByDelimiter(letter), "");
      });
    });
    return value;
  },
  headStr: function(str, length) {
    return str.slice(0, length);
  },
  getMaxLength: function(blocks) {
    return blocks.reduce(function(previous, current) {
      return previous + current;
    }, 0);
  },
  // strip prefix
  // Before type  |   After type    |     Return value
  // PEFIX-...    |   PEFIX-...     |     ''
  // PREFIX-123   |   PEFIX-123     |     123
  // PREFIX-123   |   PREFIX-23     |     23
  // PREFIX-123   |   PREFIX-1234   |     1234
  getPrefixStrippedValue: function(value, prefix, prefixLength, prevResult, delimiter, delimiters, noImmediatePrefix, tailPrefix, signBeforePrefix) {
    if (prefixLength === 0) {
      return value;
    }
    if (value === prefix && value !== "") {
      return "";
    }
    if (signBeforePrefix && value.slice(0, 1) == "-") {
      var prev = prevResult.slice(0, 1) == "-" ? prevResult.slice(1) : prevResult;
      return "-" + this.getPrefixStrippedValue(value.slice(1), prefix, prefixLength, prev, delimiter, delimiters, noImmediatePrefix, tailPrefix, signBeforePrefix);
    }
    if (prevResult.slice(0, prefixLength) !== prefix && !tailPrefix) {
      if (noImmediatePrefix && !prevResult && value)
        return value;
      return "";
    } else if (prevResult.slice(-prefixLength) !== prefix && tailPrefix) {
      if (noImmediatePrefix && !prevResult && value)
        return value;
      return "";
    }
    var prevValue = this.stripDelimiters(prevResult, delimiter, delimiters);
    if (value.slice(0, prefixLength) !== prefix && !tailPrefix) {
      return prevValue.slice(prefixLength);
    } else if (value.slice(-prefixLength) !== prefix && tailPrefix) {
      return prevValue.slice(0, -prefixLength - 1);
    }
    return tailPrefix ? value.slice(0, -prefixLength) : value.slice(prefixLength);
  },
  getFirstDiffIndex: function(prev, current) {
    var index = 0;
    while (prev.charAt(index) === current.charAt(index)) {
      if (prev.charAt(index++) === "") {
        return -1;
      }
    }
    return index;
  },
  getFormattedValue: function(value, blocks, blocksLength, delimiter, delimiters, delimiterLazyShow) {
    var result = "", multipleDelimiters = delimiters.length > 0, currentDelimiter = "";
    if (blocksLength === 0) {
      return value;
    }
    blocks.forEach(function(length, index) {
      if (value.length > 0) {
        var sub = value.slice(0, length), rest = value.slice(length);
        if (multipleDelimiters) {
          currentDelimiter = delimiters[delimiterLazyShow ? index - 1 : index] || currentDelimiter;
        } else {
          currentDelimiter = delimiter;
        }
        if (delimiterLazyShow) {
          if (index > 0) {
            result += currentDelimiter;
          }
          result += sub;
        } else {
          result += sub;
          if (sub.length === length && index < blocksLength - 1) {
            result += currentDelimiter;
          }
        }
        value = rest;
      }
    });
    return result;
  },
  // move cursor to the end
  // the first time user focuses on an input with prefix
  fixPrefixCursor: function(el, prefix, delimiter, delimiters) {
    if (!el) {
      return;
    }
    var val = el.value, appendix = delimiter || (delimiters[0] || " ");
    if (!el.setSelectionRange || !prefix || prefix.length + appendix.length <= val.length) {
      return;
    }
    var len = val.length * 2;
    setTimeout(function() {
      el.setSelectionRange(len, len);
    }, 1);
  },
  // Check if input field is fully selected
  checkFullSelection: function(value) {
    try {
      var selection = window.getSelection() || document.getSelection() || {};
      return selection.toString().length === value.length;
    } catch (ex) {
    }
    return false;
  },
  setSelection: function(element, position, doc) {
    if (element !== this.getActiveElement(doc)) {
      return;
    }
    if (element && element.value.length <= position) {
      return;
    }
    if (element.createTextRange) {
      var range = element.createTextRange();
      range.move("character", position);
      range.select();
    } else {
      try {
        element.setSelectionRange(position, position);
      } catch (e2) {
        console.warn("The input element type does not support selection");
      }
    }
  },
  getActiveElement: function(parent) {
    var activeElement = parent.activeElement;
    if (activeElement && activeElement.shadowRoot) {
      return this.getActiveElement(activeElement.shadowRoot);
    }
    return activeElement;
  },
  isAndroid: function() {
    return navigator && /android/i.test(navigator.userAgent);
  },
  // On Android chrome, the keyup and keydown events
  // always return key code 229 as a composition that
  // buffers the user’s keystrokes
  // see https://github.com/nosir/cleave.js/issues/147
  isAndroidBackspaceKeydown: function(lastInputValue, currentInputValue) {
    if (!this.isAndroid() || !lastInputValue || !currentInputValue) {
      return false;
    }
    return currentInputValue === lastInputValue.slice(0, -1);
  }
};
var Util_1 = Util;
var DefaultProperties = {
  // Maybe change to object-assign
  // for now just keep it as simple
  assign: function(target, opts) {
    target = target || {};
    opts = opts || {};
    target.creditCard = !!opts.creditCard;
    target.creditCardStrictMode = !!opts.creditCardStrictMode;
    target.creditCardType = "";
    target.onCreditCardTypeChanged = opts.onCreditCardTypeChanged || function() {
    };
    target.phone = !!opts.phone;
    target.phoneRegionCode = opts.phoneRegionCode || "AU";
    target.phoneFormatter = {};
    target.time = !!opts.time;
    target.timePattern = opts.timePattern || ["h", "m", "s"];
    target.timeFormat = opts.timeFormat || "24";
    target.timeFormatter = {};
    target.date = !!opts.date;
    target.datePattern = opts.datePattern || ["d", "m", "Y"];
    target.dateMin = opts.dateMin || "";
    target.dateMax = opts.dateMax || "";
    target.dateFormatter = {};
    target.numeral = !!opts.numeral;
    target.numeralIntegerScale = opts.numeralIntegerScale > 0 ? opts.numeralIntegerScale : 0;
    target.numeralDecimalScale = opts.numeralDecimalScale >= 0 ? opts.numeralDecimalScale : 2;
    target.numeralDecimalMark = opts.numeralDecimalMark || ".";
    target.numeralThousandsGroupStyle = opts.numeralThousandsGroupStyle || "thousand";
    target.numeralPositiveOnly = !!opts.numeralPositiveOnly;
    target.stripLeadingZeroes = opts.stripLeadingZeroes !== false;
    target.signBeforePrefix = !!opts.signBeforePrefix;
    target.tailPrefix = !!opts.tailPrefix;
    target.swapHiddenInput = !!opts.swapHiddenInput;
    target.numericOnly = target.creditCard || target.date || !!opts.numericOnly;
    target.uppercase = !!opts.uppercase;
    target.lowercase = !!opts.lowercase;
    target.prefix = target.creditCard || target.date ? "" : opts.prefix || "";
    target.noImmediatePrefix = !!opts.noImmediatePrefix;
    target.prefixLength = target.prefix.length;
    target.rawValueTrimPrefix = !!opts.rawValueTrimPrefix;
    target.copyDelimiter = !!opts.copyDelimiter;
    target.initValue = opts.initValue !== void 0 && opts.initValue !== null ? opts.initValue.toString() : "";
    target.delimiter = opts.delimiter || opts.delimiter === "" ? opts.delimiter : opts.date ? "/" : opts.time ? ":" : opts.numeral ? "," : opts.phone ? " " : " ";
    target.delimiterLength = target.delimiter.length;
    target.delimiterLazyShow = !!opts.delimiterLazyShow;
    target.delimiters = opts.delimiters || [];
    target.blocks = opts.blocks || [];
    target.blocksLength = target.blocks.length;
    target.root = typeof commonjsGlobal === "object" && commonjsGlobal ? commonjsGlobal : window;
    target.document = opts.document || target.root.document;
    target.maxLength = 0;
    target.backspace = false;
    target.result = "";
    target.onValueChanged = opts.onValueChanged || function() {
    };
    return target;
  }
};
var DefaultProperties_1 = DefaultProperties;
var Cleave = function(element, opts) {
  var owner = this;
  var hasMultipleElements = false;
  if (typeof element === "string") {
    owner.element = document.querySelector(element);
    hasMultipleElements = document.querySelectorAll(element).length > 1;
  } else {
    if (typeof element.length !== "undefined" && element.length > 0) {
      owner.element = element[0];
      hasMultipleElements = element.length > 1;
    } else {
      owner.element = element;
    }
  }
  if (!owner.element) {
    throw new Error("[cleave.js] Please check the element");
  }
  if (hasMultipleElements) {
    try {
      console.warn("[cleave.js] Multiple input fields matched, cleave.js will only take the first one.");
    } catch (e2) {
    }
  }
  opts.initValue = owner.element.value;
  owner.properties = Cleave.DefaultProperties.assign({}, opts);
  owner.init();
};
Cleave.prototype = {
  init: function() {
    var owner = this, pps = owner.properties;
    if (!pps.numeral && !pps.phone && !pps.creditCard && !pps.time && !pps.date && (pps.blocksLength === 0 && !pps.prefix)) {
      owner.onInput(pps.initValue);
      return;
    }
    pps.maxLength = Cleave.Util.getMaxLength(pps.blocks);
    owner.isAndroid = Cleave.Util.isAndroid();
    owner.lastInputValue = "";
    owner.isBackward = "";
    owner.onChangeListener = owner.onChange.bind(owner);
    owner.onKeyDownListener = owner.onKeyDown.bind(owner);
    owner.onFocusListener = owner.onFocus.bind(owner);
    owner.onCutListener = owner.onCut.bind(owner);
    owner.onCopyListener = owner.onCopy.bind(owner);
    owner.initSwapHiddenInput();
    owner.element.addEventListener("input", owner.onChangeListener);
    owner.element.addEventListener("keydown", owner.onKeyDownListener);
    owner.element.addEventListener("focus", owner.onFocusListener);
    owner.element.addEventListener("cut", owner.onCutListener);
    owner.element.addEventListener("copy", owner.onCopyListener);
    owner.initPhoneFormatter();
    owner.initDateFormatter();
    owner.initTimeFormatter();
    owner.initNumeralFormatter();
    if (pps.initValue || pps.prefix && !pps.noImmediatePrefix) {
      owner.onInput(pps.initValue);
    }
  },
  initSwapHiddenInput: function() {
    var owner = this, pps = owner.properties;
    if (!pps.swapHiddenInput)
      return;
    var inputFormatter = owner.element.cloneNode(true);
    owner.element.parentNode.insertBefore(inputFormatter, owner.element);
    owner.elementSwapHidden = owner.element;
    owner.elementSwapHidden.type = "hidden";
    owner.element = inputFormatter;
    owner.element.id = "";
  },
  initNumeralFormatter: function() {
    var owner = this, pps = owner.properties;
    if (!pps.numeral) {
      return;
    }
    pps.numeralFormatter = new Cleave.NumeralFormatter(
      pps.numeralDecimalMark,
      pps.numeralIntegerScale,
      pps.numeralDecimalScale,
      pps.numeralThousandsGroupStyle,
      pps.numeralPositiveOnly,
      pps.stripLeadingZeroes,
      pps.prefix,
      pps.signBeforePrefix,
      pps.tailPrefix,
      pps.delimiter
    );
  },
  initTimeFormatter: function() {
    var owner = this, pps = owner.properties;
    if (!pps.time) {
      return;
    }
    pps.timeFormatter = new Cleave.TimeFormatter(pps.timePattern, pps.timeFormat);
    pps.blocks = pps.timeFormatter.getBlocks();
    pps.blocksLength = pps.blocks.length;
    pps.maxLength = Cleave.Util.getMaxLength(pps.blocks);
  },
  initDateFormatter: function() {
    var owner = this, pps = owner.properties;
    if (!pps.date) {
      return;
    }
    pps.dateFormatter = new Cleave.DateFormatter(pps.datePattern, pps.dateMin, pps.dateMax);
    pps.blocks = pps.dateFormatter.getBlocks();
    pps.blocksLength = pps.blocks.length;
    pps.maxLength = Cleave.Util.getMaxLength(pps.blocks);
  },
  initPhoneFormatter: function() {
    var owner = this, pps = owner.properties;
    if (!pps.phone) {
      return;
    }
    try {
      pps.phoneFormatter = new Cleave.PhoneFormatter(
        new pps.root.Cleave.AsYouTypeFormatter(pps.phoneRegionCode),
        pps.delimiter
      );
    } catch (ex) {
      throw new Error("[cleave.js] Please include phone-type-formatter.{country}.js lib");
    }
  },
  onKeyDown: function(event) {
    var owner = this, charCode = event.which || event.keyCode;
    owner.lastInputValue = owner.element.value;
    owner.isBackward = charCode === 8;
  },
  onChange: function(event) {
    var owner = this, pps = owner.properties, Util2 = Cleave.Util;
    owner.isBackward = owner.isBackward || event.inputType === "deleteContentBackward";
    var postDelimiter = Util2.getPostDelimiter(owner.lastInputValue, pps.delimiter, pps.delimiters);
    if (owner.isBackward && postDelimiter) {
      pps.postDelimiterBackspace = postDelimiter;
    } else {
      pps.postDelimiterBackspace = false;
    }
    this.onInput(this.element.value);
  },
  onFocus: function() {
    var owner = this, pps = owner.properties;
    owner.lastInputValue = owner.element.value;
    if (pps.prefix && pps.noImmediatePrefix && !owner.element.value) {
      this.onInput(pps.prefix);
    }
    Cleave.Util.fixPrefixCursor(owner.element, pps.prefix, pps.delimiter, pps.delimiters);
  },
  onCut: function(e2) {
    if (!Cleave.Util.checkFullSelection(this.element.value))
      return;
    this.copyClipboardData(e2);
    this.onInput("");
  },
  onCopy: function(e2) {
    if (!Cleave.Util.checkFullSelection(this.element.value))
      return;
    this.copyClipboardData(e2);
  },
  copyClipboardData: function(e2) {
    var owner = this, pps = owner.properties, Util2 = Cleave.Util, inputValue = owner.element.value, textToCopy = "";
    if (!pps.copyDelimiter) {
      textToCopy = Util2.stripDelimiters(inputValue, pps.delimiter, pps.delimiters);
    } else {
      textToCopy = inputValue;
    }
    try {
      if (e2.clipboardData) {
        e2.clipboardData.setData("Text", textToCopy);
      } else {
        window.clipboardData.setData("Text", textToCopy);
      }
      e2.preventDefault();
    } catch (ex) {
    }
  },
  onInput: function(value) {
    var owner = this, pps = owner.properties, Util2 = Cleave.Util;
    var postDelimiterAfter = Util2.getPostDelimiter(value, pps.delimiter, pps.delimiters);
    if (!pps.numeral && pps.postDelimiterBackspace && !postDelimiterAfter) {
      value = Util2.headStr(value, value.length - pps.postDelimiterBackspace.length);
    }
    if (pps.phone) {
      if (pps.prefix && (!pps.noImmediatePrefix || value.length)) {
        pps.result = pps.prefix + pps.phoneFormatter.format(value).slice(pps.prefix.length);
      } else {
        pps.result = pps.phoneFormatter.format(value);
      }
      owner.updateValueState();
      return;
    }
    if (pps.numeral) {
      if (pps.prefix && pps.noImmediatePrefix && value.length === 0) {
        pps.result = "";
      } else {
        pps.result = pps.numeralFormatter.format(value);
      }
      owner.updateValueState();
      return;
    }
    if (pps.date) {
      value = pps.dateFormatter.getValidatedDate(value);
    }
    if (pps.time) {
      value = pps.timeFormatter.getValidatedTime(value);
    }
    value = Util2.stripDelimiters(value, pps.delimiter, pps.delimiters);
    value = Util2.getPrefixStrippedValue(value, pps.prefix, pps.prefixLength, pps.result, pps.delimiter, pps.delimiters, pps.noImmediatePrefix, pps.tailPrefix, pps.signBeforePrefix);
    value = pps.numericOnly ? Util2.strip(value, /[^\d]/g) : value;
    value = pps.uppercase ? value.toUpperCase() : value;
    value = pps.lowercase ? value.toLowerCase() : value;
    if (pps.prefix) {
      if (pps.tailPrefix) {
        value = value + pps.prefix;
      } else {
        value = pps.prefix + value;
      }
      if (pps.blocksLength === 0) {
        pps.result = value;
        owner.updateValueState();
        return;
      }
    }
    if (pps.creditCard) {
      owner.updateCreditCardPropsByValue(value);
    }
    value = Util2.headStr(value, pps.maxLength);
    pps.result = Util2.getFormattedValue(
      value,
      pps.blocks,
      pps.blocksLength,
      pps.delimiter,
      pps.delimiters,
      pps.delimiterLazyShow
    );
    owner.updateValueState();
  },
  updateCreditCardPropsByValue: function(value) {
    var owner = this, pps = owner.properties, Util2 = Cleave.Util, creditCardInfo;
    if (Util2.headStr(pps.result, 4) === Util2.headStr(value, 4)) {
      return;
    }
    creditCardInfo = Cleave.CreditCardDetector.getInfo(value, pps.creditCardStrictMode);
    pps.blocks = creditCardInfo.blocks;
    pps.blocksLength = pps.blocks.length;
    pps.maxLength = Util2.getMaxLength(pps.blocks);
    if (pps.creditCardType !== creditCardInfo.type) {
      pps.creditCardType = creditCardInfo.type;
      pps.onCreditCardTypeChanged.call(owner, pps.creditCardType);
    }
  },
  updateValueState: function() {
    var owner = this, Util2 = Cleave.Util, pps = owner.properties;
    if (!owner.element) {
      return;
    }
    var endPos = owner.element.selectionEnd;
    var oldValue = owner.element.value;
    var newValue = pps.result;
    endPos = Util2.getNextCursorPosition(endPos, oldValue, newValue, pps.delimiter, pps.delimiters);
    if (owner.isAndroid) {
      window.setTimeout(function() {
        owner.element.value = newValue;
        Util2.setSelection(owner.element, endPos, pps.document, false);
        owner.callOnValueChanged();
      }, 1);
      return;
    }
    owner.element.value = newValue;
    if (pps.swapHiddenInput)
      owner.elementSwapHidden.value = owner.getRawValue();
    Util2.setSelection(owner.element, endPos, pps.document, false);
    owner.callOnValueChanged();
  },
  callOnValueChanged: function() {
    var owner = this, pps = owner.properties;
    pps.onValueChanged.call(owner, {
      target: {
        name: owner.element.name,
        value: pps.result,
        rawValue: owner.getRawValue()
      }
    });
  },
  setPhoneRegionCode: function(phoneRegionCode) {
    var owner = this, pps = owner.properties;
    pps.phoneRegionCode = phoneRegionCode;
    owner.initPhoneFormatter();
    owner.onChange();
  },
  setRawValue: function(value) {
    var owner = this, pps = owner.properties;
    value = value !== void 0 && value !== null ? value.toString() : "";
    if (pps.numeral) {
      value = value.replace(".", pps.numeralDecimalMark);
    }
    pps.postDelimiterBackspace = false;
    owner.element.value = value;
    owner.onInput(value);
  },
  getRawValue: function() {
    var owner = this, pps = owner.properties, Util2 = Cleave.Util, rawValue = owner.element.value;
    if (pps.rawValueTrimPrefix) {
      rawValue = Util2.getPrefixStrippedValue(rawValue, pps.prefix, pps.prefixLength, pps.result, pps.delimiter, pps.delimiters, pps.noImmediatePrefix, pps.tailPrefix, pps.signBeforePrefix);
    }
    if (pps.numeral) {
      rawValue = pps.numeralFormatter.getRawValue(rawValue);
    } else {
      rawValue = Util2.stripDelimiters(rawValue, pps.delimiter, pps.delimiters);
    }
    return rawValue;
  },
  getISOFormatDate: function() {
    var owner = this, pps = owner.properties;
    return pps.date ? pps.dateFormatter.getISOFormatDate() : "";
  },
  getISOFormatTime: function() {
    var owner = this, pps = owner.properties;
    return pps.time ? pps.timeFormatter.getISOFormatTime() : "";
  },
  getFormattedValue: function() {
    return this.element.value;
  },
  destroy: function() {
    var owner = this;
    owner.element.removeEventListener("input", owner.onChangeListener);
    owner.element.removeEventListener("keydown", owner.onKeyDownListener);
    owner.element.removeEventListener("focus", owner.onFocusListener);
    owner.element.removeEventListener("cut", owner.onCutListener);
    owner.element.removeEventListener("copy", owner.onCopyListener);
  },
  toString: function() {
    return "[Cleave Object]";
  }
};
Cleave.NumeralFormatter = NumeralFormatter_1;
Cleave.DateFormatter = DateFormatter_1;
Cleave.TimeFormatter = TimeFormatter_1;
Cleave.PhoneFormatter = PhoneFormatter_1;
Cleave.CreditCardDetector = CreditCardDetector_1;
Cleave.Util = Util_1;
Cleave.DefaultProperties = DefaultProperties_1;
(typeof commonjsGlobal === "object" && commonjsGlobal ? commonjsGlobal : window)["Cleave"] = Cleave;
var Cleave_1 = Cleave;
var cleave_esm_default = Cleave_1;

export {
  nt,
  cleave_esm_default
};
//# sourceMappingURL=chunk-26RWD3ZW.js.map
