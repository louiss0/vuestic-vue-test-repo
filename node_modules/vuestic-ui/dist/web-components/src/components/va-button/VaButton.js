import { defineComponent, computed, toRefs, shallowRef, useCssVars, resolveComponent, openBlock, createBlock, resolveDynamicComponent, mergeProps, withCtx, createElementVNode, normalizeClass, renderSlot, normalizeProps, guardReactiveProps, createCommentVNode, createVNode } from "vue";
import { p as pick_1 } from "../../../vendor.js";
import { u as useBem } from "../../composables/useBem.js";
import { u as useFocus } from "../../composables/useFocus.js";
import { u as useColors } from "../../composables/useColors.js";
import { u as useComponentPresetProp } from "../../composables/useComponentPreset.js";
import { u as useHover } from "../../composables/useHover.js";
import { u as useHoverStyleProps } from "../../composables/useHoverStyle.js";
import { u as useLoadingProps } from "../../composables/useLoading.js";
import { u as usePressed } from "../../composables/usePressed.js";
import { u as usePressedStyleProps } from "../../composables/usePressedStyle.js";
import { u as useRouterLinkProps, a as useRouterLink } from "../../composables/useRouterLink.js";
import { u as useSizeProps, a as useSize } from "../../composables/useSize.js";
import { u as useTextColor } from "../../composables/useTextColor.js";
import { u as useSlotPassed } from "../../composables/useSlotPassed.js";
import { u as useButtonBackground } from "./hooks/useButtonBackground.js";
import { u as useButtonAttributes } from "./hooks/useButtonAttributes.js";
import { u as useButtonTextColor } from "./hooks/useButtonTextColor.js";
import { V as VaIcon } from "../va-icon/index.js";
import { V as VaProgressCircle } from "../va-progress-circle/index.js";
import { _ as _export_sfc } from "../../../plugin-vue_export-helper.js";
var _style_0 = ':root,\n:host {\n  /* General */\n  --va-button-display: inline-flex;\n  --va-button-justify-content: center;\n  --va-button-align-items: center;\n  --va-button-background-image: none;\n  --va-button-box-shadow: none;\n  --va-button-border-width: 0;\n  --va-button-border-color: unset;\n  --va-button-border-style: none;\n  --va-button-font-weight: 600;\n  --va-button-transition: none;\n  --va-button-padding: 0;\n  --va-button-cursor: pointer;\n  /* Small */\n  --va-button-sm-size: 1.5rem;\n  --va-button-sm-content-py: 0.25rem;\n  --va-button-sm-content-px: 0.375rem;\n  --va-button-sm-only-icon-content-px: 0.25rem;\n  --va-button-sm-font-size: 0.8125rem;\n  --va-button-sm-letter-spacing: 0;\n  --va-button-sm-line-height: 1rem;\n  --va-button-sm-border-radius: 0.125rem;\n  --va-button-sm-icon-side-padding: 0.188rem;\n  /* Medium */\n  --va-button-size: 2.25rem;\n  --va-button-content-py: 0.5rem;\n  --va-button-content-px: 0.75rem;\n  --va-button-only-icon-content-px: 0.5rem;\n  --va-button-font-size: 0.9375rem;\n  --va-button-letter-spacing: 0;\n  --va-button-line-height: 1.25rem;\n  --va-button-border-radius: 0.25rem;\n  --va-button-icon-side-padding: 0.375rem;\n  /* Large */\n  --va-button-lg-size: 3rem;\n  --va-button-lg-content-py: 0.75rem;\n  --va-button-lg-content-px: 1rem;\n  --va-button-lg-only-icon-content-px: 1rem;\n  --va-button-lg-font-size: 1.05rem;\n  --va-button-lg-letter-spacing: 0;\n  --va-button-lg-line-height: 1.5rem;\n  --va-button-lg-border-radius: 0.5rem;\n  --va-button-lg-icon-side-padding: 0.5rem;\n  /* Bordered */\n  --va-button-bordered-border: 1px;\n  --va-button-bordered-style: solid;\n}\n.va-button {\n  position: relative;\n  padding: var(--va-button-padding);\n  display: var(--va-button-display);\n  justify-content: var(--va-button-justify-content);\n  align-items: var(--va-button-align-items);\n  border-width: var(--va-button-border-width);\n  border-color: var(--va-button-border-color);\n  border-style: var(--va-button-border-style);\n  background-image: var(--va-button-background-image);\n  box-shadow: var(--va-button-box-shadow);\n  font-family: var(--va-font-family);\n  font-weight: var(--va-button-font-weight);\n  text-decoration: none;\n  text-transform: initial;\n  transition: var(--va-button-transition);\n  box-sizing: border-box;\n  cursor: var(--va-button-cursor);\n}\n.va-button::after, .va-button::before {\n  content: "";\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  border-radius: inherit;\n}\n.va-button::before {\n  background: var(--6057e024);\n  opacity: var(--cb320172);\n}\n.va-button::after {\n  background-color: var(--38d51418);\n  opacity: var(--5880f900);\n}\n.va-button__content {\n  height: 100%;\n  display: flex;\n  align-items: center;\n  z-index: 1;\n}\n.va-button__content__title, .va-button__content__icon {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin: auto;\n  white-space: nowrap;\n}\n.va-button__content--loading {\n  opacity: 0;\n}\n.va-button--small {\n  line-height: var(--va-button-sm-line-height);\n  border-radius: var(--va-button-sm-border-radius);\n  letter-spacing: var(--va-button-sm-letter-spacing);\n  min-height: var(--va-button-sm-size);\n  min-width: var(--va-button-sm-size);\n}\n.va-button--small .va-button__content {\n  font-size: var(--va-button-sm-font-size);\n  padding: var(--va-button-sm-content-py) var(--va-button-sm-content-px);\n}\n.va-button--small.va-button--bordered {\n  line-height: calc(var(--va-button-sm-line-height) - 2 * var(--va-button-bordered-border));\n}\n.va-button--small .va-button__left-icon,\n.va-button--small .va-button__right-icon {\n  font-size: var(--va-button-sm-line-height) !important;\n}\n.va-button--small .va-button__left-icon {\n  margin-right: var(--va-button-sm-icons-spacing);\n}\n.va-button--small .va-button__right-icon {\n  margin-left: var(--va-button-sm-icons-spacing);\n}\n.va-button--small.va-button--left-icon .va-button__content {\n  padding-left: var(--va-button-sm-icon-side-padding);\n}\n.va-button--small.va-button--left-icon .va-button__left-icon {\n  margin-right: 2px;\n}\n.va-button--small.va-button--right-icon .va-button__content {\n  padding-right: var(--va-button-sm-icon-side-padding);\n}\n.va-button--small.va-button--right-icon .va-button__right-icon {\n  margin-left: 2px;\n}\n.va-button--small.va-button--icon-only .va-button__content {\n  padding-right: var(--va-button-sm-content-px);\n  padding-left: var(--va-button-sm-content-px);\n}\n.va-button--normal {\n  line-height: var(--va-button-line-height);\n  border-radius: var(--va-button-border-radius);\n  letter-spacing: var(--va-button-letter-spacing);\n  min-height: var(--va-button-size);\n  min-width: var(--va-button-size);\n}\n.va-button--normal .va-button__content {\n  font-size: var(--va-button-font-size);\n  padding: var(--va-button-content-py) var(--va-button-content-px);\n  line-height: var(--va-button-line-height);\n}\n.va-button--normal.va-button--bordered .va-button__content {\n  line-height: calc(var(--va-button-line-height) - 2 * var(--va-button-bordered-border));\n}\n.va-button--normal .va-button__left-icon,\n.va-button--normal .va-button__right-icon {\n  font-size: var(--va-button-line-height) !important;\n}\n.va-button--normal .va-button__left-icon {\n  margin-right: var(--va-button-icons-spacing);\n}\n.va-button--normal .va-button__right-icon {\n  margin-left: var(--va-button-icons-spacing);\n}\n.va-button--normal.va-button--left-icon .va-button__content {\n  padding-left: var(--va-button-icon-side-padding);\n}\n.va-button--normal.va-button--left-icon .va-button__left-icon {\n  margin-right: 4px;\n}\n.va-button--normal.va-button--right-icon .va-button__content {\n  padding-right: var(--va-button-icon-side-padding);\n}\n.va-button--normal.va-button--right-icon .va-button__right-icon {\n  margin-left: 4px;\n}\n.va-button--normal.va-button--icon-only .va-button__content {\n  padding-right: var(--va-button-content-px);\n  padding-left: var(--va-button-content-px);\n}\n.va-button--large {\n  line-height: var(--va-button-lg-line-height);\n  border-radius: var(--va-button-lg-border-radius);\n  letter-spacing: var(--va-button-lg-letter-spacing);\n  min-height: var(--va-button-lg-size);\n  min-width: var(--va-button-lg-size);\n}\n.va-button--large .va-button__content {\n  font-size: var(--va-button-lg-font-size);\n  padding: var(--va-button-lg-content-py) var(--va-button-lg-content-px);\n}\n.va-button--large.va-button--bordered {\n  line-height: calc(var(--va-button-lg-line-height) - 2 * var(--va-button-bordered-border));\n}\n.va-button--large .va-button__left-icon,\n.va-button--large .va-button__right-icon {\n  font-size: var(--va-button-lg-line-height) !important;\n}\n.va-button--large .va-button__left-icon {\n  margin-right: var(--va-button-lg-icons-spacing);\n}\n.va-button--large .va-button__right-icon {\n  margin-left: var(--va-button-lg-icons-spacing);\n}\n.va-button--large.va-button--left-icon .va-button__content {\n  padding-left: var(--va-button-lg-icon-side-padding);\n}\n.va-button--large.va-button--left-icon .va-button__left-icon {\n  margin-right: 4px;\n}\n.va-button--large.va-button--right-icon .va-button__content {\n  padding-right: var(--va-button-lg-icon-side-padding);\n}\n.va-button--large.va-button--right-icon .va-button__right-icon {\n  margin-left: 4px;\n}\n.va-button--large.va-button--icon-only .va-button__content {\n  padding-right: var(--va-button-lg-content-px);\n  padding-left: var(--va-button-lg-content-px);\n}\n.va-button--plain {\n  min-width: auto;\n  min-height: auto;\n}\n.va-button--plain .va-button__content {\n  padding: 0;\n  z-index: unset;\n}\n.va-button--round {\n  border-radius: 999px;\n}\n.va-button--bordered {\n  border-width: var(--va-button-bordered-border);\n  border-style: var(--va-button-bordered-style);\n}\n.va-button.va-button--disabled {\n  cursor: default;\n  opacity: 0.4;\n  pointer-events: none;\n  -webkit-user-select: none;\n     -moz-user-select: none;\n          user-select: none;\n}\n.va-button--icon-only .va-button__left-icon,\n.va-button--icon-only .va-button__right-icon {\n  margin-left: 0;\n  margin-right: 0;\n}\n.va-button:focus-visible {\n  outline: 2px solid var(--va-focus) !important;\n  border-radius: "inherit";\n}\n.va-button--loading {\n  pointer-events: none;\n}\n.va-button--block {\n  display: flex;\n  min-width: 100%;\n}\n.va-button__loader {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}';
const __default__ = defineComponent({
  name: "VaButton",
  components: { VaIcon, VaProgressCircle },
  props: {
    ...useComponentPresetProp,
    ...useSizeProps,
    ...useHoverStyleProps,
    ...usePressedStyleProps,
    ...useLoadingProps,
    ...useRouterLinkProps,
    tag: { type: String, default: "button" },
    type: { type: String, default: "button" },
    block: { type: Boolean, default: false },
    disabled: { type: Boolean, default: false },
    color: { type: String, default: "primary" },
    textColor: { type: String, default: "" },
    textOpacity: { type: Number, default: 1 },
    backgroundOpacity: { type: Number, default: 1 },
    borderColor: { type: String, default: "" },
    gradient: { type: Boolean, default: false },
    plain: { type: Boolean, default: false },
    round: { type: Boolean, default: false },
    size: {
      type: String,
      default: "medium",
      validator: (v) => ["small", "medium", "large"].includes(v)
    },
    icon: { type: String, default: "" },
    iconRight: { type: String, default: "" },
    iconColor: { type: String, default: "" }
  },
  setup(props) {
    const { getColor } = useColors();
    const colorComputed = computed(() => getColor(props.color));
    const { sizeComputed } = useSize(props);
    const loaderSizeComputed = computed(() => {
      const size = /([0-9]*)(px)/.exec(sizeComputed.value);
      return size ? `${+size[1] / 2}${size[2]}` : sizeComputed.value;
    });
    const { tagComputed } = useRouterLink(props);
    const attributesComputed = useButtonAttributes(props);
    const { disabled } = toRefs(props);
    const button = shallowRef();
    const { focus, blur } = useFocus(button);
    const { isHovered } = useHover(button, disabled);
    const { isPressed } = usePressed(button);
    const iconColorComputed = computed(() => props.iconColor ? getColor(props.iconColor) : textColorComputed.value);
    const iconAttributesComputed = computed(() => ({
      size: props.size,
      color: iconColorComputed.value
    }));
    const wrapperClassComputed = computed(() => ({ "va-button__content--loading": props.loading }));
    const isSlotContentPassed = useSlotPassed();
    const isOneIcon = computed(() => !!(props.iconRight && !props.icon || !props.iconRight && props.icon));
    const isOnlyIcon = computed(() => !isSlotContentPassed.value && isOneIcon.value);
    const computedClass = useBem("va-button", () => ({
      ...pick_1(props, ["disabled", "block", "loading", "round", "plain"]),
      small: props.size === "small",
      normal: !props.size || props.size === "medium",
      large: props.size === "large",
      opacity: props.textOpacity < 1,
      bordered: !!props.borderColor,
      iconOnly: isOnlyIcon.value,
      leftIcon: !isOnlyIcon.value && !!props.icon && !props.iconRight,
      rightIcon: !isOnlyIcon.value && !props.icon && !!props.iconRight
    }));
    const isTransparentBg = computed(() => props.plain || props.backgroundOpacity < 0.5);
    const { textColorComputed } = useTextColor(colorComputed, isTransparentBg);
    const {
      backgroundColor,
      backgroundColorOpacity,
      backgroundMaskOpacity,
      backgroundMaskColor
    } = useButtonBackground(colorComputed, isPressed, isHovered);
    const contentColorComputed = useButtonTextColor(textColorComputed, colorComputed, isPressed, isHovered);
    const computedStyle = computed(() => ({
      borderColor: props.borderColor ? getColor(props.borderColor) : "transparent",
      ...contentColorComputed.value
    }));
    const publicMethods = { focus, blur };
    return {
      button,
      tagComputed,
      computedClass,
      computedStyle,
      textColorComputed,
      loaderSizeComputed,
      attributesComputed,
      wrapperClassComputed,
      iconAttributesComputed,
      backgroundColor,
      backgroundMaskColor,
      backgroundMaskOpacity,
      backgroundColorOpacity,
      ...publicMethods
    };
  }
});
const __injectCSSVars__ = () => {
  useCssVars((_ctx) => ({
    "6057e024": _ctx.backgroundColor,
    "cb320172": _ctx.backgroundColorOpacity,
    "38d51418": _ctx.backgroundMaskColor,
    "5880f900": _ctx.backgroundMaskOpacity
  }));
};
const __setup__ = __default__.setup;
__default__.setup = __setup__ ? (props, ctx) => {
  __injectCSSVars__();
  return __setup__(props, ctx);
} : __injectCSSVars__;
const _sfc_main = __default__;
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_va_icon = resolveComponent("va-icon");
  const _component_va_progress_circle = resolveComponent("va-progress-circle");
  return openBlock(), createBlock(resolveDynamicComponent(_ctx.tagComputed), mergeProps({
    ref: "button",
    class: ["va-button", _ctx.computedClass],
    style: _ctx.computedStyle
  }, _ctx.attributesComputed), {
    default: withCtx(() => [
      createElementVNode("span", {
        class: normalizeClass(["va-button__content", _ctx.wrapperClassComputed])
      }, [
        renderSlot(_ctx.$slots, "prepend", normalizeProps(guardReactiveProps({ icon: _ctx.icon, iconAttributes: _ctx.iconAttributesComputed })), () => [
          _ctx.icon ? (openBlock(), createBlock(_component_va_icon, mergeProps({
            key: 0,
            class: "va-button__left-icon",
            name: _ctx.icon
          }, _ctx.iconAttributesComputed), null, 16, ["name"])) : createCommentVNode("", true)
        ]),
        renderSlot(_ctx.$slots, "default"),
        renderSlot(_ctx.$slots, "append", normalizeProps(guardReactiveProps({ icon: _ctx.iconRight, iconAttributes: _ctx.iconAttributesComputed })), () => [
          _ctx.iconRight ? (openBlock(), createBlock(_component_va_icon, mergeProps({
            key: 0,
            class: "va-button__right-icon",
            name: _ctx.iconRight
          }, _ctx.iconAttributesComputed), null, 16, ["name"])) : createCommentVNode("", true)
        ])
      ], 2),
      _ctx.loading ? renderSlot(_ctx.$slots, "loading", normalizeProps(mergeProps({ key: 0 }, {
        size: _ctx.loaderSizeComputed,
        color: _ctx.textColorComputed
      })), () => [
        createVNode(_component_va_progress_circle, {
          class: "va-button__loader",
          size: _ctx.loaderSizeComputed,
          color: _ctx.textColorComputed,
          thickness: 0.15,
          indeterminate: ""
        }, null, 8, ["size", "color", "thickness"])
      ]) : createCommentVNode("", true)
    ]),
    _: 3
  }, 16, ["class", "style"]);
}
var VaButton = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["styles", [...(   VaIcon.styles || []), ...( VaProgressCircle .styles || []), _style_0]]]);
export { VaButton as V };
//# sourceMappingURL=VaButton.js.map
