{"version":3,"file":"VaButtonToggle.mjs","sources":["../../../../../src/components/va-button-toggle/VaButtonToggle.vue"],"sourcesContent":["<template>\n  <va-button-group\n    class=\"va-button-toggle\"\n    v-bind=\"buttonGroupPropsComputed\"\n  >\n    <va-button\n      v-for=\"option in options\"\n      :key=\"option.value\"\n      :aria-pressed=\"isToggled(option.value)\"\n      v-bind.prop=\"getButtonProps(option)\"\n      @click=\"changeValue(option.value)\"\n    >\n      {{ option.label }}\n    </va-button>\n  </va-button-group>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, PropType, computed } from 'vue'\nimport { extractComponentProps } from '../../utils/component-options'\n\nimport { useComponentPresetProp, useColors } from '../../composables'\n\nimport { ButtonOption } from './types'\n\nimport { VaButton } from '../va-button'\nimport { VaButtonGroup } from '../va-button-group'\n\nimport omit from 'lodash/omit.js'\n\nconst VaButtonGroupProps = extractComponentProps(VaButtonGroup)\n\nexport default defineComponent({\n  name: 'VaButtonToggle',\n  components: {\n    VaButtonGroup,\n    VaButton,\n  },\n  emits: ['update:modelValue'],\n  props: {\n    ...VaButtonGroupProps,\n    ...useComponentPresetProp,\n    modelValue: { type: [String, Number], default: '' },\n    options: {\n      type: Array as PropType<ButtonOption[]>,\n      required: true,\n    },\n    activeButtonTextColor: { type: String },\n    toggleColor: { type: String, default: '' },\n  },\n\n  setup (props, { emit }) {\n    const { getColor, shiftHSLAColor } = useColors()\n    const p = VaButtonGroupProps.color\n    const colorComputed = computed(() => getColor(props.color))\n\n    const isToggled = (value: any) => value === props.modelValue\n\n    const activeButtonColor = computed(() => {\n      if (props.toggleColor) { return getColor(props.toggleColor) }\n      return shiftHSLAColor(colorComputed.value, { l: props.plain ? -16 : -6 })\n    })\n\n    const activeButtonBackgroundOpacityComputed = computed(() => {\n      if (!props.preset || props.preset === 'default') { return {} }\n      return { backgroundOpacity: props.pressedOpacity }\n    })\n\n    const activeButtonPropsComputed = computed(() => ({\n      color: activeButtonColor.value,\n      textColor: props.activeButtonTextColor,\n      ...activeButtonBackgroundOpacityComputed.value,\n    }))\n\n    const getButtonProps = (option: ButtonOption = {} as ButtonOption) => {\n      const iconsProps = { icon: option.icon, iconRight: option.iconRight }\n\n      if (!isToggled(option.value)) { return iconsProps }\n      return {\n        ...(isToggled(option.value) && activeButtonPropsComputed.value),\n        ...iconsProps,\n      }\n    }\n\n    const buttonGroupPropsComputed = computed(() =>\n      omit(props, ['modelValue', 'options', 'activeButtonTextColor', 'toggleColor']),\n    )\n\n    const changeValue = (value: any) => emit('update:modelValue', value)\n\n    return {\n      buttonGroupPropsComputed,\n      getButtonProps,\n      changeValue,\n      isToggled,\n    }\n  },\n})\n</script>\n\n<style lang=\"scss\">\n@import '../../styles/resources';\n\n.va-button-toggle {\n  .va-button {\n    @include keyboard-focus-outline($offset: -2px);\n\n    height: auto;\n  }\n}\n</style>\n"],"names":["omit","_openBlock","_createBlock","_mergeProps","_withCtx","_createElementBlock","_Fragment","_renderList","_createTextVNode","_toDisplayString"],"mappings":";;;;;;;;;;;;;;AA8BA,MAAM,qBAAqB,sBAAsB,aAAa;AAE9D,MAAK,YAAa,gBAAa;AAAA,EAC7B,MAAM;AAAA,EACN,YAAY;AAAA,IACV;AAAA,IACA;AAAA,EACF;AAAA,EACA,OAAO,CAAC,mBAAmB;AAAA,EAC3B,OAAO;AAAA,IACL,GAAG;AAAA,IACH,GAAG;AAAA,IACH,YAAY,EAAE,MAAM,CAAC,QAAQ,MAAM,GAAG,SAAS,GAAG;AAAA,IAClD,SAAS;AAAA,MACP,MAAM;AAAA,MACN,UAAU;AAAA,IACZ;AAAA,IACA,uBAAuB,EAAE,MAAM,OAAO;AAAA,IACtC,aAAa,EAAE,MAAM,QAAQ,SAAS,GAAG;AAAA,EAC3C;AAAA,EAEA,MAAO,OAAO,EAAE,QAAQ;AACtB,UAAM,EAAE,UAAU,eAAe,IAAI,UAAU;AACrC,uBAAmB;AAC7B,UAAM,gBAAgB,SAAS,MAAM,SAAS,MAAM,KAAK,CAAC;AAE1D,UAAM,YAAY,CAAC,UAAe,UAAU,MAAM;AAE5C,UAAA,oBAAoB,SAAS,MAAM;AACvC,UAAI,MAAM,aAAa;AAAS,eAAA,SAAS,MAAM,WAAW;AAAA,MAAE;AACrD,aAAA,eAAe,cAAc,OAAO,EAAE,GAAG,MAAM,QAAQ,MAAM,GAAI,CAAA;AAAA,IAAA,CACzE;AAEK,UAAA,wCAAwC,SAAS,MAAM;AAC3D,UAAI,CAAC,MAAM,UAAU,MAAM,WAAW,WAAW;AAAE,eAAO;MAAG;AACtD,aAAA,EAAE,mBAAmB,MAAM;IAAe,CAClD;AAEK,UAAA,4BAA4B,SAAS,OAAO;AAAA,MAChD,OAAO,kBAAkB;AAAA,MACzB,WAAW,MAAM;AAAA,MACjB,GAAG,sCAAsC;AAAA,IACzC,EAAA;AAEF,UAAM,iBAAiB,CAAC,SAAuB,OAAuB;AACpE,YAAM,aAAa,EAAE,MAAM,OAAO,MAAM,WAAW,OAAO;AAE1D,UAAI,CAAC,UAAU,OAAO,KAAK,GAAG;AAAS,eAAA;AAAA,MAAW;AAC3C,aAAA;AAAA,QACL,GAAI,UAAU,OAAO,KAAK,KAAK,0BAA0B;AAAA,QACzD,GAAG;AAAA,MAAA;AAAA,IACL;AAGF,UAAM,2BAA2B;AAAA,MAAS,MACxCA,OAAK,OAAO,CAAC,cAAc,WAAW,yBAAyB,aAAa,CAAC;AAAA,IAAA;AAG/E,UAAM,cAAc,CAAC,UAAe,KAAK,qBAAqB,KAAK;AAE5D,WAAA;AAAA,MACL;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IAAA;AAAA,EAEJ;AACF,CAAC;;;;AAhGC,SAAAC,UAAA,GAAAC,YAakB,4BAblBC,WAakB,EAZhB,OAAM,sBACE,KAAwB,wBAAA,GAAA;AAAA,IAAA,SAAAC,QAG9B,MAAyB;AAAA,OAAAH,UAAA,IAAA,GAD3BI,mBAQYC,UAAA,MAAAC,WAPO,KAAO,SAAA,CAAjB,WAAM;AADf,eAAAN,UAAA,GAAAC,YAQY,sBARZC,WAQY;AAAA,UANT,KAAK,OAAO;AAAA,UACZ,gBAAc,KAAU,UAAA,OAAO,KAAK;AAAA,QAAA,GACxB,oBAAe,MAAM,GAAA;AAAA,UACjC,SAAK,CAAA,WAAE,KAAY,YAAA,OAAO,KAAK;AAAA,QAAA,CAAA,GAAA;AAAA,2BAEhC,MAAkB;AAAA,YAAAK,gBAAAC,gBAAf,OAAO,KAAK,GAAA,CAAA;AAAA,UAAA,CAAA;AAAA;;;;;;;;;"}