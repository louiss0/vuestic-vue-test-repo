import { defineComponent, computed, useCssVars, openBlock, createElementBlock, mergeProps, withKeys, toHandlers, createElementVNode, normalizeStyle } from "vue";
import { u as useColors } from "../../composables/useColors.js";
import { u as useComponentPresetProp } from "../../composables/useComponentPreset.js";
import { u as useKeyboardOnlyFocus } from "../../composables/useKeyboardOnlyFocus.js";
import { u as useStatefulEmits, a as useStatefulProps, b as useStateful } from "../../composables/useStateful.js";
import { _ as _export_sfc } from "../../../plugin-vue_export-helper.js";
var _style_0 = ".va-color-indicator {\n  display: inline-flex;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n  border-radius: var(--83ba3c2e);\n  text-align: center;\n  background-color: var(--va-background-element);\n  border: 0.125rem solid var(--va-background-border);\n  box-sizing: content-box;\n}\n.va-color-indicator__core {\n  border-radius: var(--83ba3c2e);\n  height: 1rem;\n  width: 1rem;\n}\n.va-color-indicator--selected {\n  background-color: var(--va-primary);\n  border-color: var(--va-primary);\n}\n.va-color-indicator--on-keyboard-focus {\n  outline: 2px solid var(--va-focus) !important;\n  border-radius: var(--83ba3c2e);\n}";
const __default__ = defineComponent({
  name: "VaColorIndicator",
  emits: useStatefulEmits,
  props: {
    ...useStatefulProps,
    ...useComponentPresetProp,
    modelValue: { type: Boolean, default: null },
    color: { type: String, default: "" },
    square: { type: Boolean, default: false },
    size: { type: String, default: "1rem" }
  },
  setup(props, { emit }) {
    const { valueComputed } = useStateful(props, emit);
    const { getColor } = useColors();
    const { hasKeyboardFocus, keyboardFocusListeners } = useKeyboardOnlyFocus();
    const colorComputed = computed(() => getColor(props.color));
    const borderRadiusComputed = computed(() => props.square ? "0px" : "50%");
    const computedStyle = computed(() => ({
      backgroundColor: colorComputed.value,
      height: props.size,
      width: props.size
    }));
    const computedClass = computed(() => ({
      "va-color-indicator--selected": valueComputed.value,
      "va-color-indicator--on-keyboard-focus": hasKeyboardFocus.value
    }));
    const toggleModelValue = () => {
      valueComputed.value = !valueComputed.value;
    };
    return {
      valueComputed,
      computedStyle,
      computedClass,
      borderRadiusComputed,
      keyboardFocusListeners,
      toggleModelValue
    };
  }
});
const __injectCSSVars__ = () => {
  useCssVars((_ctx) => ({
    "83ba3c2e": _ctx.borderRadiusComputed
  }));
};
const __setup__ = __default__.setup;
__default__.setup = __setup__ ? (props, ctx) => {
  __injectCSSVars__();
  return __setup__(props, ctx);
} : __injectCSSVars__;
const _sfc_main = __default__;
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", mergeProps({
    class: ["va-color-indicator", _ctx.computedClass],
    style: _ctx.computedStyle,
    onClick: _cache[0] || (_cache[0] = (...args) => _ctx.toggleModelValue && _ctx.toggleModelValue(...args)),
    onKeydown: [
      _cache[1] || (_cache[1] = withKeys((...args) => _ctx.toggleModelValue && _ctx.toggleModelValue(...args), ["enter"])),
      _cache[2] || (_cache[2] = withKeys((...args) => _ctx.toggleModelValue && _ctx.toggleModelValue(...args), ["space"]))
    ]
  }, toHandlers(_ctx.keyboardFocusListeners)), [
    createElementVNode("div", {
      class: "va-color-indicator__core",
      style: normalizeStyle(_ctx.computedStyle)
    }, null, 4)
  ], 16);
}
var _VaColorIndicatort = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["styles", [_style_0]]]);
export { _VaColorIndicatort as _ };
//# sourceMappingURL=VaColorIndicator.js.map
