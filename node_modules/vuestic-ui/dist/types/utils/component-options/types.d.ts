import type { ComponentOptionsBase, PropType } from 'vue';
export declare type DefineComponentOptions = ComponentOptionsBase<any, any, any, any, any, any, any, any>;
declare type ExtractDefineComponentOptionProp<T> = T extends ComponentOptionsBase<infer P, any, any, any, any, any, any, any> ? unknown extends P ? {} : P : {};
declare type ExtractDefineComponentPropsType<T> = true extends boolean ? {
    -readonly [K in keyof ExtractDefineComponentOptionProp<T>]-?: {
        type: PropType<ExtractDefineComponentOptionProp<T>[K]>;
        required: undefined extends ExtractDefineComponentOptionProp<T>[K] ? false : true;
        default: undefined extends ExtractDefineComponentOptionProp<T>[K] ? undefined : ExtractDefineComponentOptionProp<T>[K];
    };
} : never;
export declare type ExtractComponentProps<T extends DefineComponentOptions> = true extends boolean ? ExtractDefineComponentPropsType<T> : never;
export declare type ExtractComponentEmits<T> = T extends ComponentOptionsBase<any, any, any, any, any, any, any, infer E> ? E : [];
export {};
