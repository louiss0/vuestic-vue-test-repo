import { defineComponent, computed, shallowRef, resolveComponent, openBlock, createElementBlock, normalizeClass, normalizeStyle, Fragment, withKeys, withModifiers, renderSlot, createVNode, withCtx, createCommentVNode, renderList, mergeProps, normalizeProps, guardReactiveProps, createTextVNode, toDisplayString, createElementVNode } from "vue";
import { u as useCarousel } from "./hooks/useCarousel.mjs";
import { u as useCarouselAnimation } from "./hooks/useCarouselAnimation.mjs";
import { u as useCarouselColor } from "./hooks/useCarouselColors.mjs";
import { u as useComponentPresetProp } from "../../composables/useComponentPreset.mjs";
import { a as useStatefulProps, u as useStatefulEmits, b as useStateful } from "../../composables/useStateful.mjs";
import { u as useSwipeProps, a as useSwipe } from "../../composables/useSwipe.mjs";
import { u as useTranslation } from "../../composables/useTranslation.mjs";
import { V as VaImage } from "../va-image/index.mjs";
import { V as VaButton } from "../va-button/index.mjs";
import { V as VaHover } from "../va-hover/index.mjs";
import { e as extractComponentProps } from "../../utils/component-options/extract-component-options.mjs";
import { f as filterComponentProps } from "../../utils/component-options/filter-props.mjs";
import { _ as _export_sfc } from "../../../plugin-vue_export-helper.mjs";
var VaCarousel_vue_vue_type_style_index_0_lang = "";
const VaImageProps = extractComponentProps(VaImage, ["src", "alt"]);
const _sfc_main = defineComponent({
  name: "VaCarousel",
  components: { VaImage, VaButton, VaHover },
  props: {
    ...useSwipeProps,
    ...useStatefulProps,
    ...useComponentPresetProp,
    ...VaImageProps,
    modelValue: { type: Number, default: 0 },
    items: { type: Array, required: true },
    autoscroll: { type: Boolean, default: false },
    autoscrollInterval: { type: Number, default: 1e3 },
    autoscrollPauseDuration: { type: Number, default: 2e3 },
    infinite: { type: Boolean, default: false },
    fadeKeyframe: { type: String, default: "va-carousel-fade-appear 1s" },
    arrows: { type: Boolean, default: true },
    indicators: { type: Boolean, default: true },
    indicatorTrigger: {
      type: String,
      default: "click",
      validator: (value) => ["click", "hover"].includes(value)
    },
    vertical: { type: Boolean, default: false },
    height: { type: String, default: "300px" },
    effect: {
      type: String,
      default: "transition",
      validator: (value) => ["fade", "transition"].includes(value)
    },
    color: { type: String, default: "primary" },
    ratio: { type: Number }
  },
  emits: useStatefulEmits,
  setup(props, { emit }) {
    const { valueComputed: currentSlide } = useStateful(props, emit, "modelValue", { defaultValue: 0 });
    const {
      goTo,
      next,
      prev,
      doShowNextButton,
      doShowPrevButton
    } = useCarousel(props, currentSlide);
    const { withPause, computedSlidesStyle, slides } = useCarouselAnimation(props, currentSlide);
    const isObjectSlides = computed(() => {
      return props.items.length && props.items.every((el) => !!el && typeof el === "object" && !!(el == null ? void 0 : el.src));
    });
    const isCurrentSlide = (index) => index === currentSlide.value;
    const slideStyleComputed = computed(() => ({
      animation: props.effect === "fade" ? "fadeKeyframe" : void 0
    }));
    const slidesContainer = shallowRef();
    const onSwipe = (state) => {
      switch (state.direction) {
        case "right":
        case "up":
          doShowPrevButton.value && prev();
          break;
        case "left":
        case "down":
          doShowNextButton.value && next();
      }
    };
    useSwipe(props, slidesContainer, onSwipe);
    return {
      vaImageProps: filterComponentProps(VaImageProps),
      doShowNextButton,
      doShowPrevButton,
      computedSlidesStyle,
      slideStyleComputed,
      goTo: withPause(goTo),
      prev: withPause(prev),
      next: withPause(next),
      slides,
      isObjectSlides,
      isCurrentSlide,
      ...useCarouselColor(),
      ...useTranslation(),
      slidesContainer
    };
  }
});
const _hoisted_1 = ["aria-label"];
const _hoisted_2 = {
  key: 1,
  class: "va-carousel__indicators"
};
const _hoisted_3 = { class: "va-carousel__content" };
const _hoisted_4 = ["aria-hidden", "aria-current", "aria-label"];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_va_button = resolveComponent("va-button");
  const _component_va_hover = resolveComponent("va-hover");
  const _component_va_image = resolveComponent("va-image");
  return openBlock(), createElementBlock("div", {
    class: normalizeClass(["va-carousel", {
      "va-carousel--vertical": _ctx.$props.vertical,
      [`va-carousel--${_ctx.$props.effect}`]: true
    }]),
    style: normalizeStyle({ height: _ctx.ratio ? "auto" : _ctx.height }),
    role: "region",
    "aria-label": _ctx.t("carousel")
  }, [
    _ctx.$props.arrows ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
      _ctx.doShowPrevButton ? (openBlock(), createElementBlock("div", {
        key: 0,
        class: "va-carousel__arrow va-carousel__arrow--left",
        onClick: _cache[0] || (_cache[0] = (...args) => _ctx.prev && _ctx.prev(...args)),
        onKeydown: _cache[1] || (_cache[1] = withKeys(withModifiers((...args) => _ctx.prev && _ctx.prev(...args), ["stop"]), ["enter"]))
      }, [
        renderSlot(_ctx.$slots, "prev-arrow", {}, () => [
          createVNode(_component_va_hover, { stateful: "" }, {
            default: withCtx(({ hover }) => [
              createVNode(_component_va_button, {
                color: hover ? _ctx.computedHoverColor : _ctx.computedColor,
                icon: _ctx.vertical ? "va-arrow-up" : "va-arrow-left",
                "aria-label": _ctx.t("goPreviousSlide")
              }, null, 8, ["color", "icon", "aria-label"])
            ]),
            _: 1
          })
        ])
      ], 32)) : createCommentVNode("", true),
      _ctx.doShowNextButton ? (openBlock(), createElementBlock("div", {
        key: 1,
        class: "va-carousel__arrow va-carousel__arrow--right",
        onClick: _cache[2] || (_cache[2] = (...args) => _ctx.next && _ctx.next(...args)),
        onKeydown: _cache[3] || (_cache[3] = withKeys(withModifiers((...args) => _ctx.next && _ctx.next(...args), ["stop"]), ["enter"]))
      }, [
        renderSlot(_ctx.$slots, "next-arrow", {}, () => [
          createVNode(_component_va_hover, { stateful: "" }, {
            default: withCtx(({ hover }) => [
              createVNode(_component_va_button, {
                color: hover ? _ctx.computedHoverColor : _ctx.computedColor,
                icon: _ctx.vertical ? "va-arrow-down" : "va-arrow-right",
                "aria-label": _ctx.t("goNextSlide")
              }, null, 8, ["color", "icon", "aria-label"])
            ]),
            _: 1
          })
        ])
      ], 32)) : createCommentVNode("", true)
    ], 64)) : createCommentVNode("", true),
    _ctx.$props.indicators ? (openBlock(), createElementBlock("div", _hoisted_2, [
      (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.$props.items, (item, index) => {
        return openBlock(), createElementBlock("div", mergeProps({
          class: ["va-carousel__indicator", { "va-carousel__indicator--active": index === _ctx.modelValue }],
          key: index
        }, _ctx.indicatorTrigger === "hover" ? { onmouseover: () => _ctx.goTo(index) } : { onclick: () => _ctx.goTo(index) }), [
          renderSlot(_ctx.$slots, "indicator", normalizeProps(guardReactiveProps({ item, index, goTo: _ctx.goTo, isActive: _ctx.isCurrentSlide(index) })), () => [
            createVNode(_component_va_hover, { stateful: "" }, {
              default: withCtx(({ hover }) => [
                createVNode(_component_va_button, {
                  "aria-label": _ctx.t(`goSlide`, { index: index + 1 }),
                  round: "",
                  color: _ctx.isCurrentSlide(index) ? _ctx.computedActiveColor : hover ? _ctx.computedHoverColor : _ctx.computedColor
                }, {
                  default: withCtx(() => [
                    createTextVNode(toDisplayString(index + 1), 1)
                  ]),
                  _: 2
                }, 1032, ["aria-label", "color"])
              ]),
              _: 2
            }, 1024)
          ])
        ], 16);
      }), 128))
    ])) : createCommentVNode("", true),
    createElementVNode("div", _hoisted_3, [
      createElementVNode("div", {
        ref: "slidesContainer",
        class: "va-carousel__slides",
        style: normalizeStyle(_ctx.computedSlidesStyle),
        role: "list"
      }, [
        (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.slides, (item, index) => {
          return openBlock(), createElementBlock("div", {
            key: item,
            role: "listitem",
            class: "va-carousel__slide",
            style: normalizeStyle(_ctx.slideStyleComputed),
            "aria-hidden": !_ctx.isCurrentSlide(index),
            "aria-current": _ctx.isCurrentSlide(index),
            "aria-label": _ctx.t("slideOf", { index: index + 1, length: _ctx.slides.length })
          }, [
            renderSlot(_ctx.$slots, "default", normalizeProps(guardReactiveProps({ item, index, goTo: _ctx.goTo, isActive: _ctx.isCurrentSlide(index) })), () => [
              createVNode(_component_va_image, mergeProps(_ctx.vaImageProps, {
                src: _ctx.isObjectSlides ? item.src : item,
                alt: _ctx.isObjectSlides ? item.alt : "",
                draggable: false
              }), null, 16, ["src", "alt"])
            ])
          ], 12, _hoisted_4);
        }), 128))
      ], 4)
    ])
  ], 14, _hoisted_1);
}
var _VaCarousel = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { _VaCarousel as _ };
//# sourceMappingURL=VaCarousel.mjs.map
