import { PropType, ExtractPropTypes } from 'vue';
declare type verticalPlacement = 'top' | 'bottom';
declare type horizontalPlacement = 'left' | 'right';
declare type PlacementAlias = `${verticalPlacement}-${horizontalPlacement}` | `${horizontalPlacement}-${verticalPlacement}`;
export declare type PlacementPosition = horizontalPlacement | verticalPlacement;
declare type PlacementPositionWithDefault = PlacementPosition | 'auto';
export declare type PlacementAlignment = 'start' | 'end' | 'center';
export declare type Placement = PlacementPositionWithDefault | `${PlacementPosition}-${PlacementAlignment}`;
export declare type PlacementWithAlias = Placement | PlacementAlias;
export declare type ParsedPlacement = {
    position: PlacementPosition;
    align: PlacementAlignment;
};
declare const verticalPlacement: verticalPlacement[];
declare const horizontalPlacement: horizontalPlacement[];
export declare const placementsPositions: Placement[];
export declare const placementAliasesPositions: PlacementAlias[];
export declare const placementsPositionsWithAliases: PlacementWithAlias[];
export declare const aliasToPlacement: Record<PlacementAlias, Placement>;
export declare const usePlacementAliasesProps: {
    placement: {
        type: PropType<PlacementWithAlias>;
        default: string;
        validator: (position: PlacementWithAlias) => boolean;
    };
};
export declare type UsePlacementAliasesProps = ExtractPropTypes<typeof usePlacementAliasesProps>;
export declare const usePlacementAliases: (props: UsePlacementAliasesProps) => {
    position: import("vue").ComputedRef<PlacementPosition>;
    align: import("vue").ComputedRef<PlacementAlignment>;
};
export {};
