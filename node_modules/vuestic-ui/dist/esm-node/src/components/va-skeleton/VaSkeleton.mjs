import { defineComponent, ref, onMounted, onBeforeUnmount, computed, useCssVars, openBlock, createBlock, resolveDynamicComponent, normalizeClass, withCtx, renderSlot, createElementBlock, createCommentVNode } from "vue";
import { u as useBem } from "../../composables/useBem.mjs";
import { u as useColors } from "../../composables/useColors.mjs";
import { _ as _export_sfc } from "../../../plugin-vue_export-helper.mjs";
var VaSkeleton_vue_vue_type_style_index_0_lang = "";
const __default__ = defineComponent({
  name: "VaSkeleton",
  props: {
    color: { type: String, default: "backgroundElement" },
    delay: { type: Number, default: 100 },
    tag: { type: String, default: "div" },
    animation: { type: String, default: "pulse" },
    lines: { type: Number, default: 1 },
    height: { type: [String], default: "5em" },
    width: { type: [String], default: "100%" },
    lineGap: { type: String, default: "8px" },
    lastLineWidth: { type: [String], default: "75%" },
    variant: { type: String, default: "squared" }
  },
  setup(props, { attrs }) {
    const doShow = ref(false);
    let timeoutId;
    onMounted(() => {
      setTimeout(() => {
        doShow.value = true;
      }, props.delay);
    });
    onBeforeUnmount(() => {
      clearTimeout(timeoutId);
    });
    const heightComputed = computed(() => {
      if (props.variant === "text") {
        return `${props.lines}em`;
      }
      return props.height;
    });
    const widthComputed = computed(() => {
      if (props.variant === "circle") {
        return heightComputed.value;
      }
      return props.width;
    });
    const { getColor } = useColors();
    const colorComputed = computed(() => getColor(props.color));
    const negativeLineGap = computed(() => `-${props.lineGap}`);
    const bem = useBem("va-skeleton", () => ({
      lines: props.lines > 1,
      text: props.variant === "text",
      circle: props.variant === "circle",
      hidden: !doShow.value,
      pulse: props.animation === "pulse",
      wave: props.animation === "wave"
    }));
    const borderRadius = computed(() => {
      if (props.variant === "circle") {
        return "50%";
      }
      if (props.variant === "rounded") {
        return `var(--va-skeleton-border-radius, calc(${heightComputed.value} / 5))`;
      }
      return "0px";
    });
    return {
      classes: computed(() => [
        ...Object.keys(bem),
        attrs.class
      ]),
      colorComputed,
      negativeLineGap,
      doShow,
      heightComputed,
      widthComputed,
      borderRadius
    };
  }
});
const __injectCSSVars__ = () => {
  useCssVars((_ctx) => ({
    "68642958": _ctx.colorComputed,
    "5e0c6c8c": _ctx.heightComputed,
    "301414bb": _ctx.widthComputed,
    "010d0dd4": _ctx.borderRadius,
    "08c1120a": _ctx.lineGap,
    "5c49a604": _ctx.lastLineWidth
  }));
};
const __setup__ = __default__.setup;
__default__.setup = __setup__ ? (props, ctx) => {
  __injectCSSVars__();
  return __setup__(props, ctx);
} : __injectCSSVars__;
const _sfc_main = __default__;
const _hoisted_1 = {
  key: 0,
  class: "va-skeleton__wave"
};
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createBlock(resolveDynamicComponent(_ctx.tag), {
    class: normalizeClass(["va-skeleton", _ctx.classes]),
    role: "status",
    "aria-live": "polite",
    "aria-label": "Loading",
    "aria-atomic": "true"
  }, {
    default: withCtx(() => [
      renderSlot(_ctx.$slots, "default"),
      _ctx.animation === "wave" ? (openBlock(), createElementBlock("div", _hoisted_1)) : createCommentVNode("", true)
    ]),
    _: 3
  }, 8, ["class"]);
}
var _VaSkeleton = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { _VaSkeleton as _ };
//# sourceMappingURL=VaSkeleton.mjs.map
