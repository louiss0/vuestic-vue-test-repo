declare var _default: import("vue").DefineComponent<{
    [x: string & `on${string}`]: ((...args: never) => any) | undefined;
} | {
    [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
}, {
    setGlobalConfig: (updater: import("../../services/global-config/types").GlobalConfig | import("../../services/global-config/types").GlobalConfigUpdater<import("../../services/global-config/types").GlobalConfig>) => void;
    getGlobalConfig: () => import("../../services/global-config/types").GlobalConfig;
    mergeGlobalConfig: (updater: {
        colors?: {
            variables?: {
                [x: string]: string | undefined;
                primary?: string | undefined;
                secondary?: string | undefined;
                success?: string | undefined;
                info?: string | undefined;
                danger?: string | undefined;
                warning?: string | undefined;
                backgroundPrimary?: string | undefined;
                backgroundSecondary?: string | undefined;
                backgroundElement?: string | undefined;
                backgroundBorder?: string | undefined;
                textPrimary?: string | undefined;
                textInverted?: string | undefined;
                shadow?: string | undefined;
                focus?: string | undefined;
            } | undefined;
            threshold?: number | undefined;
            presets?: {
                [x: string]: {
                    [x: string]: string | undefined;
                    primary?: string | undefined;
                    secondary?: string | undefined;
                    success?: string | undefined;
                    info?: string | undefined;
                    danger?: string | undefined;
                    warning?: string | undefined;
                    backgroundPrimary?: string | undefined;
                    backgroundSecondary?: string | undefined;
                    backgroundElement?: string | undefined;
                    backgroundBorder?: string | undefined;
                    textPrimary?: string | undefined;
                    textInverted?: string | undefined;
                    shadow?: string | undefined;
                    focus?: string | undefined;
                } | undefined;
                light?: {
                    [x: string]: string | undefined;
                    primary?: string | undefined;
                    secondary?: string | undefined;
                    success?: string | undefined;
                    info?: string | undefined;
                    danger?: string | undefined;
                    warning?: string | undefined;
                    backgroundPrimary?: string | undefined;
                    backgroundSecondary?: string | undefined;
                    backgroundElement?: string | undefined;
                    backgroundBorder?: string | undefined;
                    textPrimary?: string | undefined;
                    textInverted?: string | undefined;
                    shadow?: string | undefined;
                    focus?: string | undefined;
                } | undefined;
                dark?: {
                    [x: string]: string | undefined;
                    primary?: string | undefined;
                    secondary?: string | undefined;
                    success?: string | undefined;
                    info?: string | undefined;
                    danger?: string | undefined;
                    warning?: string | undefined;
                    backgroundPrimary?: string | undefined;
                    backgroundSecondary?: string | undefined;
                    backgroundElement?: string | undefined;
                    backgroundBorder?: string | undefined;
                    textPrimary?: string | undefined;
                    textInverted?: string | undefined;
                    shadow?: string | undefined;
                    focus?: string | undefined;
                } | undefined;
            } | undefined;
            currentPresetName?: string | undefined;
        } | undefined;
        icons?: ({
            name?: string | undefined;
            resolve?: {} | undefined;
            attrs?: {
                [x: string]: string | {} | undefined;
            } | undefined;
            component?: any;
            content?: string | undefined;
            class?: string | undefined;
            tag?: string | undefined;
            color?: string | undefined;
            rotation?: string | number | undefined;
            spin?: boolean | "clockwise" | "counter-clockwise" | undefined;
            to?: string | undefined;
        } | {
            name?: {
                exec?: {} | undefined;
                test?: {} | undefined;
                readonly source?: string | undefined;
                readonly global?: boolean | undefined;
                readonly ignoreCase?: boolean | undefined;
                readonly multiline?: boolean | undefined;
                lastIndex?: number | undefined;
                compile?: {} | undefined;
                readonly flags?: string | undefined;
                readonly sticky?: boolean | undefined;
                readonly unicode?: boolean | undefined;
                readonly dotAll?: boolean | undefined;
                [Symbol.match]?: {} | undefined;
                [Symbol.replace]?: {} | undefined;
                [Symbol.search]?: {} | undefined;
                [Symbol.split]?: {} | undefined;
                [Symbol.matchAll]?: {} | undefined;
            } | undefined;
            resolveFromRegex?: {} | undefined;
            attrs?: {
                [x: string]: string | {} | undefined;
            } | undefined;
            component?: any;
            content?: string | undefined;
            class?: string | undefined;
            tag?: string | undefined;
            color?: string | undefined;
            rotation?: string | number | undefined;
            spin?: boolean | "clockwise" | "counter-clockwise" | undefined;
            to?: string | undefined;
        } | undefined)[] | undefined;
        components?: Partial<{
            [x: string]: {};
        } & {
            all: import("../../services/component-config").Props;
            presets: import("../../services/component-config").Presets;
        }> | undefined;
        breakpoint?: {
            enabled?: boolean | undefined;
            bodyClass?: boolean | undefined;
            thresholds?: {
                xs?: number | undefined;
                sm?: number | undefined;
                md?: number | undefined;
                lg?: number | undefined;
                xl?: number | undefined;
            } | undefined;
        } | undefined;
        i18n?: {
            search?: string | undefined;
            noOptions?: string | undefined;
            ok?: string | undefined;
            cancel?: string | undefined;
            uploadFile?: string | undefined;
            undo?: string | undefined;
            dropzone?: string | undefined;
            fileDeleted?: string | undefined;
            closeAlert?: string | undefined;
            backToTop?: string | undefined;
            toggleDropdown?: string | undefined;
            carousel?: string | undefined;
            goPreviousSlide?: string | undefined;
            goNextSlide?: string | undefined;
            goSlide?: string | undefined;
            slideOf?: string | undefined;
            close?: string | undefined;
            openColorPicker?: string | undefined;
            colorSelection?: string | undefined;
            colorName?: string | undefined;
            decreaseCounter?: string | undefined;
            increaseCounter?: string | undefined;
            selectAllRows?: string | undefined;
            sortColumnBy?: string | undefined;
            selectRowByIndex?: string | undefined;
            resetDate?: string | undefined;
            nextPeriod?: string | undefined;
            switchView?: string | undefined;
            previousPeriod?: string | undefined;
            removeFile?: string | undefined;
            reset?: string | undefined;
            pagination?: string | undefined;
            goToTheFirstPage?: string | undefined;
            goToPreviousPage?: string | undefined;
            goToSpecificPage?: string | undefined;
            goToSpecificPageInput?: string | undefined;
            goNextPage?: string | undefined;
            goLastPage?: string | undefined;
            currentRating?: string | undefined;
            voteRating?: string | undefined;
            optionsFilter?: string | undefined;
            splitPanels?: string | undefined;
            movePaginationLeft?: string | undefined;
            movePaginationRight?: string | undefined;
            resetTime?: string | undefined;
            closeToast?: string | undefined;
            selectedOption?: string | undefined;
            noSelectedOption?: string | undefined;
            breadcrumbs?: string | undefined;
            counterValue?: string | undefined;
            selectedDate?: string | undefined;
            selectedTime?: string | undefined;
            progressState?: string | undefined;
            color?: string | undefined;
            next?: string | undefined;
            back?: string | undefined;
            finish?: string | undefined;
        } | undefined;
        colorsClasses?: ({
            prefix?: string | undefined;
            postfix?: string | undefined;
            property?: string | (string | undefined)[] | undefined;
            value?: string | undefined;
        } | undefined)[] | undefined;
    } | import("../../services/global-config/types").GlobalConfigUpdater<{
        colors?: {
            variables?: {
                [x: string]: string | undefined;
                primary?: string | undefined;
                secondary?: string | undefined;
                success?: string | undefined;
                info?: string | undefined;
                danger?: string | undefined;
                warning?: string | undefined;
                backgroundPrimary?: string | undefined;
                backgroundSecondary?: string | undefined;
                backgroundElement?: string | undefined;
                backgroundBorder?: string | undefined;
                textPrimary?: string | undefined;
                textInverted?: string | undefined;
                shadow?: string | undefined;
                focus?: string | undefined;
            } | undefined;
            threshold?: number | undefined;
            presets?: {
                [x: string]: {
                    [x: string]: string | undefined;
                    primary?: string | undefined;
                    secondary?: string | undefined;
                    success?: string | undefined;
                    info?: string | undefined;
                    danger?: string | undefined;
                    warning?: string | undefined;
                    backgroundPrimary?: string | undefined;
                    backgroundSecondary?: string | undefined;
                    backgroundElement?: string | undefined;
                    backgroundBorder?: string | undefined;
                    textPrimary?: string | undefined;
                    textInverted?: string | undefined;
                    shadow?: string | undefined;
                    focus?: string | undefined;
                } | undefined;
                light?: {
                    [x: string]: string | undefined;
                    primary?: string | undefined;
                    secondary?: string | undefined;
                    success?: string | undefined;
                    info?: string | undefined;
                    danger?: string | undefined;
                    warning?: string | undefined;
                    backgroundPrimary?: string | undefined;
                    backgroundSecondary?: string | undefined;
                    backgroundElement?: string | undefined;
                    backgroundBorder?: string | undefined;
                    textPrimary?: string | undefined;
                    textInverted?: string | undefined;
                    shadow?: string | undefined;
                    focus?: string | undefined;
                } | undefined;
                dark?: {
                    [x: string]: string | undefined;
                    primary?: string | undefined;
                    secondary?: string | undefined;
                    success?: string | undefined;
                    info?: string | undefined;
                    danger?: string | undefined;
                    warning?: string | undefined;
                    backgroundPrimary?: string | undefined;
                    backgroundSecondary?: string | undefined;
                    backgroundElement?: string | undefined;
                    backgroundBorder?: string | undefined;
                    textPrimary?: string | undefined;
                    textInverted?: string | undefined;
                    shadow?: string | undefined;
                    focus?: string | undefined;
                } | undefined;
            } | undefined;
            currentPresetName?: string | undefined;
        } | undefined;
        icons?: ({
            name?: string | undefined;
            resolve?: {} | undefined;
            attrs?: {
                [x: string]: string | {} | undefined;
            } | undefined;
            component?: any;
            content?: string | undefined;
            class?: string | undefined;
            tag?: string | undefined;
            color?: string | undefined;
            rotation?: string | number | undefined;
            spin?: boolean | "clockwise" | "counter-clockwise" | undefined;
            to?: string | undefined;
        } | {
            name?: {
                exec?: {} | undefined;
                test?: {} | undefined;
                readonly source?: string | undefined;
                readonly global?: boolean | undefined;
                readonly ignoreCase?: boolean | undefined;
                readonly multiline?: boolean | undefined;
                lastIndex?: number | undefined;
                compile?: {} | undefined;
                readonly flags?: string | undefined;
                readonly sticky?: boolean | undefined;
                readonly unicode?: boolean | undefined;
                readonly dotAll?: boolean | undefined;
                [Symbol.match]?: {} | undefined;
                [Symbol.replace]?: {} | undefined;
                [Symbol.search]?: {} | undefined;
                [Symbol.split]?: {} | undefined;
                [Symbol.matchAll]?: {} | undefined;
            } | undefined;
            resolveFromRegex?: {} | undefined;
            attrs?: {
                [x: string]: string | {} | undefined;
            } | undefined;
            component?: any;
            content?: string | undefined;
            class?: string | undefined;
            tag?: string | undefined;
            color?: string | undefined;
            rotation?: string | number | undefined;
            spin?: boolean | "clockwise" | "counter-clockwise" | undefined;
            to?: string | undefined;
        } | undefined)[] | undefined;
        components?: Partial<{
            [x: string]: {};
        } & {
            all: import("../../services/component-config").Props;
            presets: import("../../services/component-config").Presets;
        }> | undefined;
        breakpoint?: {
            enabled?: boolean | undefined;
            bodyClass?: boolean | undefined;
            thresholds?: {
                xs?: number | undefined;
                sm?: number | undefined;
                md?: number | undefined;
                lg?: number | undefined;
                xl?: number | undefined;
            } | undefined;
        } | undefined;
        i18n?: {
            search?: string | undefined;
            noOptions?: string | undefined;
            ok?: string | undefined;
            cancel?: string | undefined;
            uploadFile?: string | undefined;
            undo?: string | undefined;
            dropzone?: string | undefined;
            fileDeleted?: string | undefined;
            closeAlert?: string | undefined;
            backToTop?: string | undefined;
            toggleDropdown?: string | undefined;
            carousel?: string | undefined;
            goPreviousSlide?: string | undefined;
            goNextSlide?: string | undefined;
            goSlide?: string | undefined;
            slideOf?: string | undefined;
            close?: string | undefined;
            openColorPicker?: string | undefined;
            colorSelection?: string | undefined;
            colorName?: string | undefined;
            decreaseCounter?: string | undefined;
            increaseCounter?: string | undefined;
            selectAllRows?: string | undefined;
            sortColumnBy?: string | undefined;
            selectRowByIndex?: string | undefined;
            resetDate?: string | undefined;
            nextPeriod?: string | undefined;
            switchView?: string | undefined;
            previousPeriod?: string | undefined;
            removeFile?: string | undefined;
            reset?: string | undefined;
            pagination?: string | undefined;
            goToTheFirstPage?: string | undefined;
            goToPreviousPage?: string | undefined;
            goToSpecificPage?: string | undefined;
            goToSpecificPageInput?: string | undefined;
            goNextPage?: string | undefined;
            goLastPage?: string | undefined;
            currentRating?: string | undefined;
            voteRating?: string | undefined;
            optionsFilter?: string | undefined;
            splitPanels?: string | undefined;
            movePaginationLeft?: string | undefined;
            movePaginationRight?: string | undefined;
            resetTime?: string | undefined;
            closeToast?: string | undefined;
            selectedOption?: string | undefined;
            noSelectedOption?: string | undefined;
            breadcrumbs?: string | undefined;
            counterValue?: string | undefined;
            selectedDate?: string | undefined;
            selectedTime?: string | undefined;
            progressState?: string | undefined;
            color?: string | undefined;
            next?: string | undefined;
            back?: string | undefined;
            finish?: string | undefined;
        } | undefined;
        colorsClasses?: ({
            prefix?: string | undefined;
            postfix?: string | undefined;
            property?: string | (string | undefined)[] | undefined;
            value?: string | undefined;
        } | undefined)[] | undefined;
    }>) => void;
    getColor: (prop?: string | undefined, defaultColor?: string | undefined, preferVariables?: boolean | undefined) => string;
    buttonRoundConfigValue: import("vue").ComputedRef<any>;
    cardPreset: {
        highlightTop: {
            square: boolean;
            outlined: boolean;
            stripe: boolean;
        };
    };
    buttonPreset: {
        victory: {
            color: string;
            rounded: boolean;
            outline: boolean;
            gradient: boolean;
        };
    };
}, {
    dynamicContextConfig: {
        ConfigUsageTest: {
            color: string;
        };
    };
    buttonConfig: {
        size: string;
        icon: string;
        iconRight: string;
        flat: boolean;
        color: string;
        outline: boolean;
    };
    symbol: symbol;
    dynamicConfig: string;
    buttonPresetName: string;
    hasPresetsInConfig: boolean;
}, {
    redOrange: {
        get(): boolean;
        set(value: any): void;
    };
    getComponentsPresets(): any;
    showButtonPreset(): any;
}, {
    overrideButtonsRound(): void;
    changeButtonsRound(): void;
    setComponentsAllColor(): void;
    resetComponentsAllColor(): void;
    toggleButtonPreset(): void;
    presetActionDescription(action: any): string;
    togglePresetsConfig(): void;
    overrideConfig(): void;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    [x: string & `on${string}`]: ((...args: never) => any) | undefined;
}> | Readonly<{
    [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
}>, {} | {}>;
export default _default;
