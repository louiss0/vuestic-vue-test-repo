import { defineComponent, computed, resolveComponent, openBlock, createElementBlock, normalizeStyle, Fragment, renderList, createBlock, createCommentVNode, createTextVNode, toDisplayString } from "vue";
import { u as useColors } from "../../../../composables/useColors.js";
import { V as VaIcon } from "../../../va-icon/index.js";
import { _ as _export_sfc } from "../../../../../plugin-vue_export-helper.js";
var _style_0 = ".va-message-list {\n  margin-top: var(--va-message-list-margin-top);\n  color: var(--va-message-list-color);\n}\n.va-message-list__message {\n  display: flex;\n  vertical-align: var(--va-message-list-vertical-align);\n  font-size: var(--va-message-list-font-size);\n  line-height: var(--va-message-list-line-height);\n}\n.va-message-list__icon {\n  margin-right: var(--va-message-list-icon-margin-right);\n}";
const _sfc_main = defineComponent({
  name: "VaMessageList",
  components: { VaIcon },
  props: {
    modelValue: {
      type: [String, Array],
      default: ""
    },
    limit: { type: Number, default: 1 },
    color: { type: String },
    hasError: { type: Boolean, default: false }
  },
  setup(props) {
    const { getColor } = useColors();
    return {
      messages: computed(() => {
        if (!props.modelValue) {
          return [];
        }
        if (!Array.isArray(props.modelValue)) {
          return [props.modelValue];
        }
        return props.modelValue.slice(0, props.limit);
      }),
      computedStyle: computed(() => props.color ? { color: getColor(props.color) } : {})
    };
  }
});
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_va_icon = resolveComponent("va-icon");
  return _ctx.messages.length ? (openBlock(), createElementBlock("div", {
    key: 0,
    class: "va-message-list",
    style: normalizeStyle(_ctx.computedStyle)
  }, [
    (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.messages, (message, index) => {
      return openBlock(), createElementBlock("div", {
        key: index,
        class: "va-message-list__message"
      }, [
        _ctx.hasError ? (openBlock(), createBlock(_component_va_icon, {
          key: 0,
          class: "va-message-list__icon",
          name: "va-warning",
          size: 16
        })) : createCommentVNode("", true),
        createTextVNode(toDisplayString(message), 1)
      ]);
    }), 128))
  ], 4)) : createCommentVNode("", true);
}
var _VaMessageList = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["styles", [...(   VaIcon .styles || []), _style_0]]]);
export { _VaMessageList as _ };
//# sourceMappingURL=VaMessageList.js.map
