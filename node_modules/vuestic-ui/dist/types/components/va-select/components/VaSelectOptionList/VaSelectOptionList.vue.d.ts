import { PropType } from 'vue';
import type { SelectOption } from '../../types';
declare const _default: import("vue").DefineComponent<{
    noOptionsText: {
        type: StringConstructor;
        default: string;
    };
    getSelectedState: {
        type: PropType<(option: SelectOption) => boolean>;
        required: true;
    };
    multiple: {
        type: BooleanConstructor;
        default: boolean;
    };
    search: {
        type: StringConstructor;
        default: string;
    };
    tabindex: {
        type: NumberConstructor;
        default: number;
    };
    hoveredOption: {
        type: PropType<SelectOption | null>;
        default: null;
    };
    virtualScroller: {
        type: BooleanConstructor;
        default: boolean;
    };
    highlightMatchedText: {
        type: BooleanConstructor;
        default: boolean;
    };
    minSearchChars: {
        type: NumberConstructor;
        default: number;
    };
    autoSelectFirstOption: {
        type: BooleanConstructor;
        default: boolean;
    };
    delay: {
        type: NumberConstructor;
        default: number;
        validator: (value: number) => boolean;
    };
    options: {
        type: PropType<SelectOption[]>;
        default: () => never[];
    };
    textBy: {
        type: PropType<string | ((option: SelectOption) => unknown)>;
        default: string;
    };
    valueBy: {
        type: PropType<string | ((option: SelectOption) => unknown)>;
        default: string;
    };
    trackBy: {
        type: PropType<string | ((option: SelectOption) => unknown)>;
        default: string;
    };
    disabledBy: {
        type: PropType<string | ((option: SelectOption) => unknown)>;
        default: string;
    };
    groupBy: {
        type: PropType<string | ((option: SelectOption) => unknown)>;
        default: string;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
}, {
    focusPreviousOption: () => void;
    focusNextOption: () => void;
    focusFirstOption: () => void;
    scrollToOption: (option: SelectOption) => void;
    focus: () => void;
    root: import("vue").ShallowRef<HTMLElement | undefined>;
    virtualScrollerRef: import("vue").ShallowRef<({
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            table: boolean;
            horizontal: boolean;
            disabled: boolean;
            trackBy: string | number | ((item: any[] | Record<string, any>) => string | number);
            items: unknown[];
            itemSize: string | number;
            wrapperSize: string | number;
            bench: number;
        }> & Omit<Readonly<import("vue").ExtractPropTypes<{
            items: {
                type: ArrayConstructor;
                default: () => never[];
            };
            bench: {
                type: NumberConstructor;
                default: number;
                validator: (v: number) => boolean;
            };
            disabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            table: {
                type: BooleanConstructor;
                default: boolean;
            };
            horizontal: {
                type: BooleanConstructor;
                default: boolean;
            };
            itemSize: {
                type: PropType<string | number>;
                default: number;
                validator: (v: string | number) => boolean;
            };
            wrapperSize: {
                type: PropType<string | number>;
                default: number;
                validator: (v: string | number) => boolean;
            };
            trackBy: {
                type: PropType<string | number | ((item: any[] | Record<string, any>) => string | number)>;
                default: string;
            };
        }>> & {
            "onScroll:bottom"?: ((...args: any[]) => any) | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "table" | "horizontal" | "disabled" | "trackBy" | "items" | "itemSize" | "wrapperSize" | "bench">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $emit: (event: "scroll:bottom", ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            items: {
                type: ArrayConstructor;
                default: () => never[];
            };
            bench: {
                type: NumberConstructor;
                default: number;
                validator: (v: number) => boolean;
            };
            disabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            table: {
                type: BooleanConstructor;
                default: boolean;
            };
            horizontal: {
                type: BooleanConstructor;
                default: boolean;
            };
            itemSize: {
                type: PropType<string | number>;
                default: number;
                validator: (v: string | number) => boolean;
            };
            wrapperSize: {
                type: PropType<string | number>;
                default: number;
                validator: (v: string | number) => boolean;
            };
            trackBy: {
                type: PropType<string | number | ((item: any[] | Record<string, any>) => string | number)>;
                default: string;
            };
        }>> & {
            "onScroll:bottom"?: ((...args: any[]) => any) | undefined;
        }, {
            containerStyleComputed: import("vue").ComputedRef<{
                [x: string]: string | undefined;
            }>;
            wrapperStyleComputed: import("vue").ComputedRef<{
                [x: string]: string | undefined;
            }>;
            wrapperClassComputed: {
                [x: `va-virtual-scroller--${string}`]: boolean;
            } & {
                readonly asObject: import("vue").ComputedRef<{
                    [x: `va-virtual-scroller--${string}`]: boolean;
                }>;
                readonly asArray: import("vue").ComputedRef<`va-virtual-scroller--${string}`[]>;
                readonly asString: import("vue").ComputedRef<string>;
            };
            listStyleComputed: import("vue").ComputedRef<{
                transform: string;
            }>;
            currentListOffset: import("vue").ComputedRef<number>;
            renderStartIndex: import("vue").ComputedRef<number>;
            virtualScrollTo: (index: number) => void;
            renderBuffer: import("vue").ComputedRef<unknown[]>;
            uniqueKey: (item: any[] | Record<string, any>, index: number, defaultValue?: any) => any;
            wrapper: import("vue").ShallowRef<HTMLElement | undefined>;
            list: import("vue").ShallowRef<HTMLElement | undefined>;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "scroll:bottom"[], string, {
            table: boolean;
            horizontal: boolean;
            disabled: boolean;
            trackBy: string | number | ((item: any[] | Record<string, any>) => string | number);
            items: unknown[];
            itemSize: string | number;
            wrapperSize: string | number;
            bench: number;
        }> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        items: {
            type: ArrayConstructor;
            default: () => never[];
        };
        bench: {
            type: NumberConstructor;
            default: number;
            validator: (v: number) => boolean;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        table: {
            type: BooleanConstructor;
            default: boolean;
        };
        horizontal: {
            type: BooleanConstructor;
            default: boolean;
        };
        itemSize: {
            type: PropType<string | number>;
            default: number;
            validator: (v: string | number) => boolean;
        };
        wrapperSize: {
            type: PropType<string | number>;
            default: number;
            validator: (v: string | number) => boolean;
        };
        trackBy: {
            type: PropType<string | number | ((item: any[] | Record<string, any>) => string | number)>;
            default: string;
        };
    }>> & {
        "onScroll:bottom"?: ((...args: any[]) => any) | undefined;
    } & import("vue").ShallowUnwrapRef<{
        containerStyleComputed: import("vue").ComputedRef<{
            [x: string]: string | undefined;
        }>;
        wrapperStyleComputed: import("vue").ComputedRef<{
            [x: string]: string | undefined;
        }>;
        wrapperClassComputed: {
            [x: `va-virtual-scroller--${string}`]: boolean;
        } & {
            readonly asObject: import("vue").ComputedRef<{
                [x: `va-virtual-scroller--${string}`]: boolean;
            }>;
            readonly asArray: import("vue").ComputedRef<`va-virtual-scroller--${string}`[]>;
            readonly asString: import("vue").ComputedRef<string>;
        };
        listStyleComputed: import("vue").ComputedRef<{
            transform: string;
        }>;
        currentListOffset: import("vue").ComputedRef<number>;
        renderStartIndex: import("vue").ComputedRef<number>;
        virtualScrollTo: (index: number) => void;
        renderBuffer: import("vue").ComputedRef<unknown[]>;
        uniqueKey: (item: any[] | Record<string, any>, index: number, defaultValue?: any) => any;
        wrapper: import("vue").ShallowRef<HTMLElement | undefined>;
        list: import("vue").ShallowRef<HTMLElement | undefined>;
    }> & {} & import("@vue/runtime-core").ComponentCustomProperties)[] | undefined>;
    rootHeight: import("vue").ComputedRef<number>;
    optionGroups: import("vue").Ref<Record<string, SelectOption[]>>;
    filteredOptions: import("vue").ComputedRef<SelectOption[]>;
    selectOptionProps: import("vue").ComputedRef<{
        getText: (option: SelectOption) => string;
        getTrackBy: (option: SelectOption) => any;
        search: string;
        color: string;
        getSelectedState: (option: SelectOption) => boolean;
        highlightMatchedText: boolean;
        minSearchChars: number;
    }>;
    currentOptionComputed: import("vue").ComputedRef<SelectOption | null>;
    onScroll: (event: UIEvent) => void;
    getTrackBy: (option: SelectOption) => any;
    setItemRef: (key: string | number) => (el: any) => string | undefined;
    getDisabled: (option: SelectOption) => any;
    selectOption: (option: SelectOption) => false | void;
    updateHoveredOption: (option?: SelectOption | undefined) => void;
    handleScrollToBottom: () => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("select-option" | "update:hoveredOption" | "no-previous-option-to-hover" | "scroll-bottom")[], "select-option" | "update:hoveredOption" | "no-previous-option-to-hover" | "scroll-bottom", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    noOptionsText: {
        type: StringConstructor;
        default: string;
    };
    getSelectedState: {
        type: PropType<(option: SelectOption) => boolean>;
        required: true;
    };
    multiple: {
        type: BooleanConstructor;
        default: boolean;
    };
    search: {
        type: StringConstructor;
        default: string;
    };
    tabindex: {
        type: NumberConstructor;
        default: number;
    };
    hoveredOption: {
        type: PropType<SelectOption | null>;
        default: null;
    };
    virtualScroller: {
        type: BooleanConstructor;
        default: boolean;
    };
    highlightMatchedText: {
        type: BooleanConstructor;
        default: boolean;
    };
    minSearchChars: {
        type: NumberConstructor;
        default: number;
    };
    autoSelectFirstOption: {
        type: BooleanConstructor;
        default: boolean;
    };
    delay: {
        type: NumberConstructor;
        default: number;
        validator: (value: number) => boolean;
    };
    options: {
        type: PropType<SelectOption[]>;
        default: () => never[];
    };
    textBy: {
        type: PropType<string | ((option: SelectOption) => unknown)>;
        default: string;
    };
    valueBy: {
        type: PropType<string | ((option: SelectOption) => unknown)>;
        default: string;
    };
    trackBy: {
        type: PropType<string | ((option: SelectOption) => unknown)>;
        default: string;
    };
    disabledBy: {
        type: PropType<string | ((option: SelectOption) => unknown)>;
        default: string;
    };
    groupBy: {
        type: PropType<string | ((option: SelectOption) => unknown)>;
        default: string;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
}>> & {
    "onSelect-option"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredOption"?: ((...args: any[]) => any) | undefined;
    "onNo-previous-option-to-hover"?: ((...args: any[]) => any) | undefined;
    "onScroll-bottom"?: ((...args: any[]) => any) | undefined;
}, {
    search: string;
    color: string;
    preset: string;
    tabindex: number;
    multiple: boolean;
    options: SelectOption[];
    textBy: string | ((option: SelectOption) => unknown);
    valueBy: string | ((option: SelectOption) => unknown);
    trackBy: string | ((option: SelectOption) => unknown);
    disabledBy: string | ((option: SelectOption) => unknown);
    groupBy: string | ((option: SelectOption) => unknown);
    delay: number;
    virtualScroller: boolean;
    highlightMatchedText: boolean;
    minSearchChars: number;
    noOptionsText: string;
    hoveredOption: SelectOption | null;
    autoSelectFirstOption: boolean;
}>;
export default _default;
