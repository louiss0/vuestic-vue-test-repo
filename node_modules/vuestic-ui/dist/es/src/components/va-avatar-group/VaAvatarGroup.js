import { defineComponent, computed, resolveComponent, openBlock, createElementBlock, normalizeClass, Fragment, renderList, createBlock, mergeProps, renderSlot, normalizeProps, guardReactiveProps, createVNode, withCtx, createTextVNode, toDisplayString } from "vue";
import { V as VaAvatar } from "../va-avatar/index.js";
import { p as pick_1 } from "../../../vendor.js";
import { u as useBem } from "../../composables/useBem.js";
import { u as useComponentPresetProp } from "../../composables/useComponentPreset.js";
import { u as useSizeProps, a as useSize } from "../../composables/useSize.js";
import { u as useAvatarProps } from "../va-avatar/hooks/useAvatarProps.js";
import { _ as _export_sfc } from "../../../plugin-vue_export-helper.js";
var VaAvatarGroup_vue_vue_type_style_index_0_lang = "";
const _sfc_main = defineComponent({
  name: "VaAvatarGroup",
  components: {
    VaAvatar
  },
  props: {
    ...useSizeProps,
    ...useComponentPresetProp,
    ...useAvatarProps,
    max: {
      type: Number,
      default: void 0
    },
    vertical: {
      type: Boolean,
      default: false
    },
    options: {
      type: Array,
      default: () => []
    }
  },
  setup(props) {
    const classComputed = useBem("va-avatar-group", () => ({
      ...pick_1(props, ["vertical"])
    }));
    const maxOptions = computed(() => props.options.slice(0, props.max));
    const visibleItemsCount = computed(() => props.max ? props.max + 1 : 1);
    const restOptionsCount = computed(() => props.options.length - (props.max || 0));
    const { sizeComputed, fontSizeComputed } = useSize(props, "VaAvatarGroup");
    const avatarProps = computed(() => ({
      ...props,
      fontSize: fontSizeComputed.value,
      size: sizeComputed.value
    }));
    return {
      classComputed,
      maxOptions,
      visibleItemsCount,
      restOptionsCount,
      avatarProps
    };
  }
});
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_va_avatar = resolveComponent("va-avatar");
  return openBlock(), createElementBlock("div", {
    class: normalizeClass(["va-avatar-group", _ctx.classComputed]),
    role: "group"
  }, [
    (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.maxOptions, (option, idx) => {
      return openBlock(), createBlock(_component_va_avatar, mergeProps({ key: idx }, { ..._ctx.avatarProps, ...option }, {
        role: "listitem",
        tabindex: "0"
      }), null, 16);
    }), 128)),
    renderSlot(_ctx.$slots, "rest", normalizeProps(guardReactiveProps(_ctx.avatarProps)), () => [
      createVNode(_component_va_avatar, mergeProps({ color: "secondary" }, _ctx.avatarProps, { role: "listitem" }), {
        default: withCtx(() => [
          createTextVNode(" +" + toDisplayString(_ctx.restOptionsCount), 1)
        ]),
        _: 1
      }, 16)
    ])
  ], 2);
}
var _VaAvatarGroup = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { _VaAvatarGroup as _ };

import './VaAvatarGroup.css';
//# sourceMappingURL=VaAvatarGroup.js.map
