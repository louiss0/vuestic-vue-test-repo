import { defineComponent, computed, resolveComponent, openBlock, createBlock, mergeProps, withCtx, createElementBlock, Fragment, renderList, createTextVNode, toDisplayString } from "vue";
import { e as extractComponentProps } from "../../utils/component-options/extract-component-options.js";
import { o as omit_1 } from "../../../vendor.js";
import { u as useColors } from "../../composables/useColors.js";
import { u as useComponentPresetProp } from "../../composables/useComponentPreset.js";
import { V as VaButton } from "../va-button/index.js";
import { V as VaButtonGroup } from "../va-button-group/index.js";
import { _ as _export_sfc } from "../../../plugin-vue_export-helper.js";
var _style_0 = '.va-button-toggle .va-button {\n  height: auto;\n}\n.va-button-toggle .va-button:focus-visible {\n  outline: 2px solid var(--va-focus) !important;\n  border-radius: "inherit";\n  outline-offset: -2px;\n}';
const VaButtonGroupProps = extractComponentProps(VaButtonGroup);
const _sfc_main = defineComponent({
  name: "VaButtonToggle",
  components: {
    VaButtonGroup,
    VaButton
  },
  emits: ["update:modelValue"],
  props: {
    ...VaButtonGroupProps,
    ...useComponentPresetProp,
    modelValue: { type: [String, Number], default: "" },
    options: {
      type: Array,
      required: true
    },
    activeButtonTextColor: { type: String },
    toggleColor: { type: String, default: "" }
  },
  setup(props, { emit }) {
    const { getColor, shiftHSLAColor } = useColors();
    VaButtonGroupProps.color;
    const colorComputed = computed(() => getColor(props.color));
    const isToggled = (value) => value === props.modelValue;
    const activeButtonColor = computed(() => {
      if (props.toggleColor) {
        return getColor(props.toggleColor);
      }
      return shiftHSLAColor(colorComputed.value, { l: props.plain ? -16 : -6 });
    });
    const activeButtonBackgroundOpacityComputed = computed(() => {
      if (!props.preset || props.preset === "default") {
        return {};
      }
      return { backgroundOpacity: props.pressedOpacity };
    });
    const activeButtonPropsComputed = computed(() => ({
      color: activeButtonColor.value,
      textColor: props.activeButtonTextColor,
      ...activeButtonBackgroundOpacityComputed.value
    }));
    const getButtonProps = (option = {}) => {
      const iconsProps = { icon: option.icon, iconRight: option.iconRight };
      if (!isToggled(option.value)) {
        return iconsProps;
      }
      return {
        ...isToggled(option.value) && activeButtonPropsComputed.value,
        ...iconsProps
      };
    };
    const buttonGroupPropsComputed = computed(
      () => omit_1(props, ["modelValue", "options", "activeButtonTextColor", "toggleColor"])
    );
    const changeValue = (value) => emit("update:modelValue", value);
    return {
      buttonGroupPropsComputed,
      getButtonProps,
      changeValue,
      isToggled
    };
  }
});
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_va_button = resolveComponent("va-button");
  const _component_va_button_group = resolveComponent("va-button-group");
  return openBlock(), createBlock(_component_va_button_group, mergeProps({ class: "va-button-toggle" }, _ctx.buttonGroupPropsComputed), {
    default: withCtx(() => [
      (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.options, (option) => {
        return openBlock(), createBlock(_component_va_button, mergeProps({
          key: option.value,
          "aria-pressed": _ctx.isToggled(option.value)
        }, _ctx.getButtonProps(option), {
          onClick: ($event) => _ctx.changeValue(option.value)
        }), {
          default: withCtx(() => [
            createTextVNode(toDisplayString(option.label), 1)
          ]),
          _: 2
        }, 1040, ["aria-pressed", "onClick"]);
      }), 128))
    ]),
    _: 1
  }, 16);
}
var _VaButtonToggle = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["styles", [...(      VaButtonGroup.styles || []), ...(    VaButton  .styles || []), _style_0]]]);
export { _VaButtonToggle as _ };
//# sourceMappingURL=VaButtonToggle.js.map
