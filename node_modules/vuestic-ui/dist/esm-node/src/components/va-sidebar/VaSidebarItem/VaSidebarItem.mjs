import { defineComponent, computed, openBlock, createBlock, resolveDynamicComponent, mergeProps, toHandlers, withCtx, renderSlot } from "vue";
import { u as useColors } from "../../../composables/useColors.mjs";
import { u as useComponentPresetProp } from "../../../composables/useComponentPreset.mjs";
import { u as useElementRef } from "../../../composables/useElementRef.mjs";
import { u as useHover } from "../../../composables/useHover.mjs";
import { e as applyColors } from "../../../services/color/utils.mjs";
import { u as useKeyboardOnlyFocus } from "../../../composables/useKeyboardOnlyFocus.mjs";
import { u as useRouterLinkProps, a as useRouterLink } from "../../../composables/useRouterLink.mjs";
import { u as useTextColor } from "../../../composables/useTextColor.mjs";
import { a as useSidebarItem } from "../hooks/useSidebar.mjs";
import { _ as _export_sfc } from "../../../../plugin-vue_export-helper.mjs";
var VaSidebarItem_vue_vue_type_style_index_0_lang = "";
const _sfc_main = defineComponent({
  name: "VaSidebarItem",
  props: {
    ...useRouterLinkProps,
    ...useComponentPresetProp,
    active: { type: Boolean, default: false },
    textColor: { type: String, default: void 0 },
    activeColor: { type: String, default: "primary" },
    hoverColor: { type: String, default: void 0 },
    hoverOpacity: { type: Number, default: 0.2 },
    borderColor: { type: String, default: void 0 }
  },
  setup(props) {
    const rootElement = useElementRef();
    const sidebar = useSidebarItem();
    const { isHovered } = useHover(rootElement);
    const { getColor, getHoverColor, getFocusColor } = useColors();
    const { hasKeyboardFocus, keyboardFocusListeners } = useKeyboardOnlyFocus();
    const backgroundColorComputed = computed(() => {
      if (props.active && !isHovered.value && !hasKeyboardFocus.value) {
        return getColor(props.activeColor);
      }
      if (hasKeyboardFocus.value) {
        return getFocusColor(getColor(props.hoverColor || props.activeColor));
      }
      return "#ffffff00";
    });
    const textBackground = computed(() => applyColors(getColor(sidebar == null ? void 0 : sidebar.color), backgroundColorComputed.value));
    const { textColorComputed } = useTextColor(textBackground);
    const computedStyle = computed(() => {
      const style = { color: textColorComputed.value };
      if (isHovered.value || props.active || hasKeyboardFocus.value) {
        style.backgroundColor = backgroundColorComputed.value;
      }
      if (props.active) {
        const mergedProps = { ...sidebar, ...props };
        style.borderColor = getColor(mergedProps.borderColor || mergedProps.activeColor);
      }
      if (hasKeyboardFocus.value) {
        style.backgroundColor = getFocusColor(getColor(props.hoverColor || props.activeColor));
      }
      if (isHovered.value) {
        style.backgroundColor = getHoverColor(
          getColor(props.hoverColor || props.activeColor),
          props.hoverOpacity
        );
      }
      return style;
    });
    const { tagComputed, hrefComputed } = useRouterLink(props);
    return {
      rootElement,
      computedStyle,
      keyboardFocusListeners,
      tagComputed,
      hrefComputed,
      isHovered,
      backgroundColorComputed,
      bg: getColor(sidebar == null ? void 0 : sidebar.color),
      textBackground
    };
  }
});
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createBlock(resolveDynamicComponent(_ctx.tagComputed), mergeProps({
    ref: "rootElement",
    class: ["va-sidebar__item va-sidebar-item", { "va-sidebar-item--active": _ctx.$props.active }],
    tabindex: "0",
    style: _ctx.computedStyle,
    href: _ctx.hrefComputed,
    to: _ctx.$props.to
  }, toHandlers(_ctx.keyboardFocusListeners)), {
    default: withCtx(() => [
      renderSlot(_ctx.$slots, "default")
    ]),
    _: 3
  }, 16, ["class", "style", "href", "to"]);
}
var _VaSidebarItem = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { _VaSidebarItem as _ };
//# sourceMappingURL=VaSidebarItem.mjs.map
