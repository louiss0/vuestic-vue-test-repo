import type { DefineComponentOptions } from './types';
/** Extract all component props, from mixins and VueClassComponent */
export declare const getComponentProps: <T extends DefineComponentOptions>(component: T) => { -readonly [K in keyof (T extends import("vue").ComponentOptionsBase<infer P, any, any, any, any, any, any, any, string, {}> ? unknown extends P ? {} : P : {})]-?: {
    type: import("vue").PropType<(T extends import("vue").ComponentOptionsBase<infer P, any, any, any, any, any, any, any, string, {}> ? unknown extends P ? {} : P : {})[K]>;
    required: undefined extends (T extends import("vue").ComponentOptionsBase<infer P, any, any, any, any, any, any, any, string, {}> ? unknown extends P ? {} : P : {})[K] ? false : true;
    default: undefined extends (T extends import("vue").ComponentOptionsBase<infer P, any, any, any, any, any, any, any, string, {}> ? unknown extends P ? {} : P : {})[K] ? (T extends import("vue").ComponentOptionsBase<infer P, any, any, any, any, any, any, any, string, {}> ? unknown extends P ? {} : P : {})[K] & undefined : (T extends import("vue").ComponentOptionsBase<infer P, any, any, any, any, any, any, any, string, {}> ? unknown extends P ? {} : P : {})[K];
}; };
