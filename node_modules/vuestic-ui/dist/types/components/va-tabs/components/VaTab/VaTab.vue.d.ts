declare const _default: import("vue").DefineComponent<{
    selected: {
        type: BooleanConstructor;
        default: boolean;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    icon: {
        type: StringConstructor;
        default: string;
    };
    label: {
        type: StringConstructor;
        default: string;
    };
    disabled: {
        type: BooleanConstructor;
    };
    name: {
        type: (StringConstructor | NumberConstructor)[];
    };
    tag: {
        type: StringConstructor;
        default: string;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
    to: {
        type: import("vue").PropType<string | Record<string, any>>;
        default: string;
    };
    replace: {
        type: BooleanConstructor;
        default: boolean;
    };
    append: {
        type: BooleanConstructor;
        default: boolean;
    };
    exact: {
        type: BooleanConstructor;
        default: boolean;
    };
    activeClass: {
        type: StringConstructor;
        default: string;
    };
    exactActiveClass: {
        type: StringConstructor;
        default: string;
    };
    href: {
        type: StringConstructor;
        default: string;
    };
    target: {
        type: StringConstructor;
        default: string;
    };
}, {
    tabElement: import("vue").ShallowRef<HTMLElement | undefined>;
    parentDisabled: boolean;
    isActive: import("vue").Ref<boolean>;
    hoverState: import("vue").Ref<boolean>;
    tagComputed: import("vue").ComputedRef<string>;
    hrefComputed: import("vue").ComputedRef<any>;
    isActiveRouterLink: import("vue").ComputedRef<boolean>;
    colorComputed: import("vue").ComputedRef<string>;
    classComputed: import("vue").ComputedRef<{
        'va-tab--disabled': boolean;
    }>;
    computedStyle: import("vue").ComputedRef<{
        color: string;
    }>;
    tabIndexComputed: import("vue").ComputedRef<0 | -1>;
    rightSidePosition: import("vue").Ref<number>;
    leftSidePosition: import("vue").Ref<number>;
    updateHoverState: (isHover: boolean) => void;
    updateSidePositions: () => void;
    onTabClick: () => void;
    onTabKeydown: () => void;
    onFocus: () => void;
    keyboardFocusListeners: {
        mousedown: () => void;
        focus: () => void;
        blur: () => void;
    };
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("click" | "focus" | "keydown-enter")[], "focus" | "click" | "keydown-enter", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    selected: {
        type: BooleanConstructor;
        default: boolean;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    icon: {
        type: StringConstructor;
        default: string;
    };
    label: {
        type: StringConstructor;
        default: string;
    };
    disabled: {
        type: BooleanConstructor;
    };
    name: {
        type: (StringConstructor | NumberConstructor)[];
    };
    tag: {
        type: StringConstructor;
        default: string;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
    to: {
        type: import("vue").PropType<string | Record<string, any>>;
        default: string;
    };
    replace: {
        type: BooleanConstructor;
        default: boolean;
    };
    append: {
        type: BooleanConstructor;
        default: boolean;
    };
    exact: {
        type: BooleanConstructor;
        default: boolean;
    };
    activeClass: {
        type: StringConstructor;
        default: string;
    };
    exactActiveClass: {
        type: StringConstructor;
        default: string;
    };
    href: {
        type: StringConstructor;
        default: string;
    };
    target: {
        type: StringConstructor;
        default: string;
    };
}>> & {
    onClick?: ((...args: any[]) => any) | undefined;
    onFocus?: ((...args: any[]) => any) | undefined;
    "onKeydown-enter"?: ((...args: any[]) => any) | undefined;
}, {
    replace: boolean;
    label: string;
    icon: string;
    color: string;
    tag: string;
    preset: string;
    disabled: boolean;
    to: string | Record<string, any>;
    append: boolean;
    exact: boolean;
    activeClass: string;
    exactActiveClass: string;
    href: string;
    target: string;
    selected: boolean;
}>;
export default _default;
