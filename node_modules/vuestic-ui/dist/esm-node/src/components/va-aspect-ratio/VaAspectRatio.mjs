import { defineComponent, computed, useCssVars, openBlock, createElementBlock, normalizeStyle, createCommentVNode, renderSlot } from "vue";
import { u as useComponentPresetProp } from "../../composables/useComponentPreset.mjs";
import { _ as _export_sfc } from "../../../plugin-vue_export-helper.mjs";
var VaAspectRatio_vue_vue_type_style_index_0_lang = "";
const __default__ = defineComponent({
  name: "VaAspectRatio",
  props: {
    ...useComponentPresetProp,
    ratio: {
      type: [Number, String],
      default: "auto",
      validator: (v) => {
        if (typeof v === "number") {
          return v > 0;
        }
        return v === "auto";
      }
    },
    contentHeight: { type: Number, default: 1 },
    contentWidth: { type: Number, default: 1 },
    maxWidth: {
      type: Number,
      default: 0,
      validator: (v) => v >= 0
    }
  },
  setup(props) {
    const aspectRatio = computed(() => {
      if (props.ratio === "auto" && props.contentHeight === 1 && props.contentWidth === 1) {
        return 0;
      }
      if (!isNaN(+props.ratio)) {
        return props.ratio;
      }
      return props.contentWidth / props.contentHeight;
    });
    const stylesComputed = computed(() => {
      if (!aspectRatio.value) {
        return;
      }
      return { paddingBottom: `${1 / aspectRatio.value * 100}%` };
    });
    const maxWidthComputed = computed(() => props.maxWidth ? `${props.maxWidth}px` : void 0);
    return { stylesComputed, maxWidthComputed };
  }
});
const __injectCSSVars__ = () => {
  useCssVars((_ctx) => ({
    "5ab067ca": _ctx.maxWidthComputed
  }));
};
const __setup__ = __default__.setup;
__default__.setup = __setup__ ? (props, ctx) => {
  __injectCSSVars__();
  return __setup__(props, ctx);
} : __injectCSSVars__;
const _sfc_main = __default__;
const _hoisted_1 = { class: "va-aspect-ratio" };
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", _hoisted_1, [
    _ctx.stylesComputed ? (openBlock(), createElementBlock("div", {
      key: 0,
      style: normalizeStyle(_ctx.stylesComputed)
    }, null, 4)) : createCommentVNode("", true),
    renderSlot(_ctx.$slots, "default")
  ]);
}
var _VaAspectRatio = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { _VaAspectRatio as _ };
//# sourceMappingURL=VaAspectRatio.mjs.map
