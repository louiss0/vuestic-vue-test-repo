import { defineComponent, shallowRef, ref, computed, resolveComponent, openBlock, createElementBlock, normalizeClass, createElementVNode, withKeys, renderSlot, normalizeProps, guardReactiveProps, mergeProps, createBlock, createCommentVNode, toDisplayString, createVNode, normalizeStyle } from "vue";
import { p as pick_1 } from "../../../vendor.js";
import { u as useBem } from "../../composables/useBem.js";
import { u as useColors } from "../../composables/useColors.js";
import { u as useComponentPresetProp } from "../../composables/useComponentPreset.js";
import { u as useResizeObserver } from "../../composables/useResizeObserver.js";
import { u as useSyncProp } from "../../composables/useSyncProp.js";
import { u as useTextColor } from "../../composables/useTextColor.js";
import { a as useAccordionItem } from "../va-accordion/hooks/useAccordion.js";
import { g as generateUniqueId } from "../../utils/uuid.js";
import { V as VaIcon } from "../va-icon/index.js";
import { _ as _export_sfc } from "../../../plugin-vue_export-helper.js";
var VaCollapse_vue_vue_type_style_index_0_lang = "";
const _sfc_main = defineComponent({
  name: "VaCollapse",
  components: {
    VaIcon
  },
  props: {
    ...useComponentPresetProp,
    modelValue: { type: Boolean, default: void 0 },
    disabled: { type: Boolean, default: false },
    header: { type: String, default: "" },
    icon: { type: String, default: "" },
    solid: { type: Boolean, default: false },
    color: { type: String, default: "background-element" },
    textColor: { type: String, default: "" },
    colorAll: { type: Boolean, default: false },
    flat: { type: Boolean, default: false }
  },
  emits: ["update:modelValue"],
  setup(props, { emit, slots }) {
    const body = shallowRef();
    const [computedModelValue] = useSyncProp("modelValue", props, emit, false);
    const { getColor, getHoverColor } = useColors();
    const { accordionProps, toggle } = useAccordionItem(computedModelValue);
    const { textColorComputed } = useTextColor();
    const bodyHeight = ref();
    useResizeObserver([body], () => {
      var _a, _b;
      bodyHeight.value = (_b = (_a = body.value) == null ? void 0 : _a.clientHeight) != null ? _b : 0;
    });
    const height = computed(() => computedModelValue.value ? bodyHeight.value : 0);
    const getTransition = () => {
      const duration = height.value / 1e3 * 0.2;
      return `${duration > 0.2 ? duration : 0.2}s`;
    };
    const getBackground = () => {
      return props.color && props.colorAll ? getHoverColor(getColor(props.color)) : "";
    };
    const uniqueId = computed(generateUniqueId);
    const headerIdComputed = computed(() => `header-${uniqueId.value}`);
    const panelIdComputed = computed(() => `panel-${uniqueId.value}`);
    const tabIndexComputed = computed(() => props.disabled ? -1 : 0);
    const headerAttributes = computed(() => ({
      id: headerIdComputed.value,
      tabindex: tabIndexComputed.value,
      "aria-controls": panelIdComputed.value,
      "aria-expanded": computedModelValue.value,
      "aria-disabled": props.disabled,
      role: "button"
    }));
    const computedClasses = useBem("va-collapse", () => ({
      ...pick_1(props, ["disabled", "solid", "flat"]),
      expanded: computedModelValue.value,
      active: props.solid && computedModelValue.value,
      popout: !!(accordionProps.value.popout && computedModelValue.value),
      inset: !!(accordionProps.value.inset && computedModelValue.value)
    }));
    return {
      body,
      height,
      toggle,
      computedModelValue,
      headerIdComputed,
      headerAttributes,
      panelIdComputed,
      tabIndexComputed,
      textColorComputed,
      computedClasses,
      headerStyle: computed(() => ({
        paddingLeft: props.icon && 0,
        color: textColorComputed.value,
        backgroundColor: props.color ? getColor(props.color) : ""
      })),
      contentStyle: computed(() => {
        return {
          visibility: computedModelValue.value ? "visible" : "hidden",
          height: `${height.value}px`,
          transitionDuration: getTransition(),
          background: computedModelValue.value ? getBackground() : ""
        };
      })
    };
  }
});
const _hoisted_1 = { class: "va-collapse__header__text" };
const _hoisted_2 = ["id", "aria-labelledby"];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_va_icon = resolveComponent("va-icon");
  return openBlock(), createElementBlock("div", {
    class: normalizeClass(["va-collapse", _ctx.computedClasses])
  }, [
    createElementVNode("div", {
      class: "va-collapse__header-wrapper",
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.toggle && _ctx.toggle(...args)),
      onKeydown: [
        _cache[1] || (_cache[1] = withKeys((...args) => _ctx.toggle && _ctx.toggle(...args), ["enter"])),
        _cache[2] || (_cache[2] = withKeys((...args) => _ctx.toggle && _ctx.toggle(...args), ["space"]))
      ]
    }, [
      renderSlot(_ctx.$slots, "header", normalizeProps(guardReactiveProps({
        value: _ctx.computedModelValue,
        bind: _ctx.headerAttributes,
        attributes: _ctx.headerAttributes
      })), () => [
        createElementVNode("div", mergeProps(_ctx.headerAttributes, {
          class: "va-collapse__header",
          style: _ctx.headerStyle
        }), [
          _ctx.icon ? (openBlock(), createBlock(_component_va_icon, {
            key: 0,
            class: "va-collapse__header__icon",
            name: _ctx.icon,
            color: _ctx.textColorComputed
          }, null, 8, ["name", "color"])) : createCommentVNode("", true),
          renderSlot(_ctx.$slots, "header-content", normalizeProps(guardReactiveProps({ header: _ctx.header })), () => [
            createElementVNode("div", _hoisted_1, toDisplayString(_ctx.header), 1)
          ]),
          createVNode(_component_va_icon, {
            class: "va-collapse__header__icon",
            name: _ctx.computedModelValue ? "va-arrow-up" : "va-arrow-down",
            color: _ctx.textColorComputed
          }, null, 8, ["name", "color"])
        ], 16)
      ])
    ], 32),
    createElementVNode("div", {
      class: "va-collapse__body-wrapper",
      style: normalizeStyle(_ctx.contentStyle)
    }, [
      createElementVNode("div", {
        class: "va-collapse__body",
        ref: "body",
        role: "region",
        id: _ctx.panelIdComputed,
        "aria-labelledby": _ctx.headerIdComputed
      }, [
        renderSlot(_ctx.$slots, "default")
      ], 8, _hoisted_2)
    ], 4)
  ], 2);
}
var _VaCollapse = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { _VaCollapse as _ };

import './VaCollapse.css';
//# sourceMappingURL=VaCollapse.js.map
