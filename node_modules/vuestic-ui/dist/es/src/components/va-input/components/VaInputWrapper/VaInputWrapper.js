import { defineComponent, computed, toRef, useCssVars, resolveComponent, openBlock, createElementBlock, normalizeClass, normalizeStyle, createElementVNode, renderSlot, createCommentVNode, createTextVNode, toDisplayString, createBlock, normalizeProps, guardReactiveProps } from "vue";
import { p as pick_1 } from "../../../../../vendor.js";
import { u as useBem } from "../../../../composables/useBem.js";
import { u as useColors } from "../../../../composables/useColors.js";
import { u as useCSSVariables } from "../../../../composables/useCSSVariables.js";
import { u as useFormProps } from "../../../../composables/useForm.js";
import { u as useValidationProps } from "../../../../composables/useValidation.js";
import { u as useTextColor } from "../../../../composables/useTextColor.js";
import { V as VaMessageList } from "../VaMessageList/index.js";
import { V as VaIcon } from "../../../va-icon/index.js";
import { _ as _export_sfc } from "../../../../../plugin-vue_export-helper.js";
var VaInputWrapper_vue_vue_type_style_index_0_lang = "";
const __default__ = defineComponent({
  name: "VaInputWrapper",
  components: { VaMessageList, VaIcon },
  props: {
    ...useFormProps,
    ...useValidationProps,
    counterValue: { type: Number, default: void 0 },
    maxLength: { type: Number, default: void 0 },
    label: { type: String, default: "" },
    color: { type: String, default: "primary" },
    background: { type: String, default: "background-element" },
    outline: { type: Boolean, default: false },
    bordered: { type: Boolean, default: false },
    focused: { type: Boolean, default: false },
    error: { type: Boolean, default: false },
    success: { type: Boolean, default: false },
    requiredMark: { type: Boolean, default: false }
  },
  emits: [
    "click",
    "click-prepend",
    "click-append",
    "click-prepend-inner",
    "click-append-inner"
  ],
  setup(props) {
    const { getColor } = useColors();
    const wrapperClass = useBem("va-input-wrapper", () => ({
      ...pick_1(props, ["outline", "bordered", "success", "focused", "error", "disabled", "readonly"]),
      labeled: !!props.label,
      solid: !props.outline && !props.bordered
    }));
    const wrapperStyle = useCSSVariables("va-input-wrapper", () => ({
      color: colorComputed.value
    }));
    const colorComputed = computed(() => getColor(props.color));
    const backgroundComputed = computed(() => getColor(props.background));
    const borderColorComputed = computed(() => props.focused ? colorComputed.value : void 0);
    const messagesComputed = computed(() => props.error ? props.errorMessages : props.messages);
    const hasMessages = computed(() => {
      var _a;
      return Boolean(
        typeof messagesComputed.value === "string" ? messagesComputed.value : (_a = messagesComputed.value) == null ? void 0 : _a.length
      );
    });
    const { textColorComputed } = useTextColor(toRef(props, "background"));
    const containerStyle = computed(() => ({
      color: textColorComputed.value,
      "caret-color": textColorComputed.value,
      "--va-input-color": props.background ? getColor(props.background) : void 0,
      borderColor: borderColorComputed.value
    }));
    const messagesColor = computed(() => {
      if (props.error) {
        return "danger";
      }
      if (props.success) {
        return "success";
      }
      return "";
    });
    const errorLimit = computed(() => props.error ? Number(props.errorCount) : 99);
    const isCounterVisible = computed(() => props.counterValue !== void 0);
    const counterComputed = computed(
      () => props.maxLength !== void 0 ? `${props.counterValue}/${props.maxLength}` : props.counterValue
    );
    return {
      containerStyle,
      wrapperClass,
      wrapperStyle,
      textColorComputed,
      isCounterVisible,
      counterComputed,
      colorComputed,
      backgroundComputed,
      borderColorComputed,
      messagesColor,
      messagesComputed,
      hasMessages,
      errorLimit
    };
  },
  methods: {
    focus() {
      this.$el.focus();
    },
    blur() {
      this.$el.blur();
    }
  }
});
const __injectCSSVars__ = () => {
  useCssVars((_ctx) => ({
    "a310421c": _ctx.backgroundComputed,
    "cf315028": _ctx.textColorComputed
  }));
};
const __setup__ = __default__.setup;
__default__.setup = __setup__ ? (props, ctx) => {
  __injectCSSVars__();
  return __setup__(props, ctx);
} : __injectCSSVars__;
const _sfc_main = __default__;
const _hoisted_1 = { class: "va-input-wrapper__container" };
const _hoisted_2 = { class: "va-input-wrapper__field" };
const _hoisted_3 = { class: "va-input-wrapper__text" };
const _hoisted_4 = {
  key: 0,
  class: "va-input-wrapper__required-mark"
};
const _hoisted_5 = {
  key: 0,
  class: "va-input-wrapper__bottom"
};
const _hoisted_6 = { class: "va-input-wrapper__bottom-counter" };
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_va_icon = resolveComponent("va-icon");
  const _component_va_message_list = resolveComponent("va-message-list");
  return openBlock(), createElementBlock("div", {
    class: normalizeClass(["va-input-wrapper", _ctx.wrapperClass]),
    style: normalizeStyle(_ctx.wrapperStyle),
    onClick: _cache[4] || (_cache[4] = ($event) => _ctx.$emit("click", $event))
  }, [
    createElementVNode("div", _hoisted_1, [
      _ctx.$slots.prepend ? (openBlock(), createElementBlock("div", {
        key: 0,
        class: "va-input-wrapper__prepend-inner",
        onClick: _cache[0] || (_cache[0] = ($event) => _ctx.$emit("click-prepend"))
      }, [
        renderSlot(_ctx.$slots, "prepend")
      ])) : createCommentVNode("", true),
      createElementVNode("div", _hoisted_2, [
        _ctx.$slots.prependInner ? (openBlock(), createElementBlock("div", {
          key: 0,
          class: "va-input__container",
          ref: "container",
          style: normalizeStyle(_ctx.containerStyle),
          onClick: _cache[1] || (_cache[1] = ($event) => _ctx.$emit("click-prepend-inner", $event))
        }, [
          renderSlot(_ctx.$slots, "prependInner")
        ], 4)) : createCommentVNode("", true),
        createElementVNode("div", _hoisted_3, [
          _ctx.label ? (openBlock(), createElementBlock("label", {
            key: 0,
            "aria-hidden": "true",
            class: "va-input-wrapper__label",
            style: normalizeStyle({ color: _ctx.colorComputed })
          }, [
            createTextVNode(toDisplayString(_ctx.label) + " ", 1),
            _ctx.requiredMark ? (openBlock(), createElementBlock("span", _hoisted_4, " * ")) : createCommentVNode("", true)
          ], 4)) : createCommentVNode("", true),
          renderSlot(_ctx.$slots, "default")
        ]),
        _ctx.success ? (openBlock(), createBlock(_component_va_icon, {
          key: 1,
          color: "success",
          name: "va-check-circle",
          size: "small"
        })) : createCommentVNode("", true),
        _ctx.error ? (openBlock(), createBlock(_component_va_icon, {
          key: 2,
          color: "danger",
          name: "va-warning",
          size: "small"
        })) : createCommentVNode("", true),
        renderSlot(_ctx.$slots, "icon"),
        _ctx.$slots.appendInner ? (openBlock(), createElementBlock("div", {
          key: 3,
          class: "va-input-wrapper__append-inner",
          onClick: _cache[2] || (_cache[2] = ($event) => _ctx.$emit("click-append-inner", $event))
        }, [
          renderSlot(_ctx.$slots, "appendInner")
        ])) : createCommentVNode("", true)
      ]),
      _ctx.$slots.append ? (openBlock(), createElementBlock("div", {
        key: 1,
        class: "va-input-wrapper__append-inner",
        onClick: _cache[3] || (_cache[3] = ($event) => _ctx.$emit("click-append"))
      }, [
        renderSlot(_ctx.$slots, "append")
      ])) : createCommentVNode("", true)
    ]),
    _ctx.isCounterVisible ? (openBlock(), createElementBlock("div", _hoisted_5, [
      renderSlot(_ctx.$slots, "counter", normalizeProps(guardReactiveProps({ valueLength: _ctx.$props.counterValue, maxLength: _ctx.$props.maxLength })), () => [
        createElementVNode("div", _hoisted_6, toDisplayString(_ctx.counterComputed), 1)
      ])
    ])) : createCommentVNode("", true),
    renderSlot(_ctx.$slots, "messages", normalizeProps(guardReactiveProps({ messages: _ctx.messagesComputed, errorLimit: _ctx.errorLimit, color: _ctx.messagesColor })), () => [
      _ctx.hasMessages ? (openBlock(), createBlock(_component_va_message_list, {
        key: 0,
        color: _ctx.messagesColor,
        "model-value": _ctx.messagesComputed,
        limit: _ctx.errorLimit
      }, null, 8, ["color", "model-value", "limit"])) : createCommentVNode("", true)
    ])
  ], 6);
}
var VaInputWrapper = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { VaInputWrapper as V };

import './VaInputWrapper.css';
//# sourceMappingURL=VaInputWrapper.js.map
