import { defineComponent, computed, openBlock, createElementBlock, normalizeStyle, renderSlot } from "vue";
import { u as useColors } from "../../composables/useColors.js";
import { u as useComponentPresetProp } from "../../composables/useComponentPreset.js";
import { u as useFixedBarProps, a as useFixedBar } from "../../composables/useFixedBar.js";
import { s as setupScroll } from "../../composables/useScroll.js";
import { _ as _export_sfc } from "../../../plugin-vue_export-helper.js";
var _style_0 = ":root,\n:host {\n  --va-app-bar-position: relative;\n  --va-app-bar-height: auto;\n  --va-app-bar-shadow: 0 0 12px 2px;\n  --va-app-bar-z-index: calc(var(--va-z-index-teleport-overlay) - 100);\n  --va-app-bar-transition: transform 0.5s ease;\n}\n.va-app-bar {\n  display: flex;\n  align-items: center;\n  position: var(--va-app-bar-position);\n  transition: all 0.5s ease;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: var(--va-app-bar-height);\n  min-height: var(--va-app-bar-height);\n  min-width: 100%;\n  font-family: var(--va-font-family);\n  z-index: var(--va-app-bar-z-index);\n}\n.va-app-bar--bottom {\n  top: 100%;\n  transform: translateY(-100%);\n}";
const _sfc_main = defineComponent({
  name: "VaAppBar",
  props: {
    ...useFixedBarProps,
    ...useComponentPresetProp,
    gradient: { type: Boolean, default: false },
    target: { type: [Object, String], default: "" },
    shadowOnScroll: { type: Boolean, default: false },
    shadowColor: { type: String, default: "" },
    color: { type: String, default: void 0 }
  },
  setup(props) {
    const { scrollRoot, isScrolledDown } = setupScroll(props.fixed, props.target);
    const { fixedBarStyleComputed } = useFixedBar(props, isScrolledDown);
    const { getColor, getGradientBackground, getBoxShadowColor } = useColors();
    const colorComputed = computed(() => getColor(props.color));
    const showShadowComputed = computed(() => isScrolledDown.value ? !!props.shadowOnScroll : false);
    const shadowColorComputed = computed(() => getColor(props.shadowColor, colorComputed.value));
    const computedShadow = computed(() => {
      const shadow = getBoxShadowColor(props.shadowColor ? shadowColorComputed.value : colorComputed.value);
      return showShadowComputed.value ? `var(--va-app-bar-shadow) ${shadow}` : "";
    });
    const computedStyle = computed(() => ({
      ...fixedBarStyleComputed.value,
      background: props.gradient ? getGradientBackground(colorComputed.value) : colorComputed.value,
      boxShadow: computedShadow.value
    }));
    return { scrollRoot, computedStyle };
  }
});
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("header", {
    ref: "scrollRoot",
    role: "toolbar",
    class: "va-app-bar",
    style: normalizeStyle(_ctx.computedStyle)
  }, [
    renderSlot(_ctx.$slots, "default")
  ], 4);
}
var _VaAppBar = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["styles", [_style_0]]]);
export { _VaAppBar as _ };
//# sourceMappingURL=VaAppBar.js.map
