declare const _default: import("vue").DefineComponent<{
    active: {
        type: BooleanConstructor;
        default: boolean;
    };
    textColor: {
        type: StringConstructor;
        default: undefined;
    };
    activeColor: {
        type: StringConstructor;
        default: string;
    };
    hoverColor: {
        type: StringConstructor;
        default: undefined;
    };
    hoverOpacity: {
        type: NumberConstructor;
        default: number;
    };
    borderColor: {
        type: StringConstructor;
        default: undefined;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
    tag: {
        type: StringConstructor;
        default: string;
    };
    to: {
        type: import("vue").PropType<string | Record<string, any>>;
        default: string;
    };
    replace: {
        type: BooleanConstructor;
        default: boolean;
    };
    append: {
        type: BooleanConstructor;
        default: boolean;
    };
    exact: {
        type: BooleanConstructor;
        default: boolean;
    };
    activeClass: {
        type: StringConstructor;
        default: string;
    };
    exactActiveClass: {
        type: StringConstructor;
        default: string;
    };
    href: {
        type: StringConstructor;
        default: string;
    };
    target: {
        type: StringConstructor;
        default: string;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
}, {
    rootElement: import("vue").Ref<HTMLElement | undefined>;
    computedStyle: import("vue").ComputedRef<Record<string, string>>;
    keyboardFocusListeners: {
        mousedown: () => void;
        focus: () => void;
        blur: () => void;
    };
    tagComputed: import("vue").ComputedRef<string>;
    hrefComputed: import("vue").ComputedRef<any>;
    isHovered: import("vue").Ref<boolean>;
    backgroundColorComputed: import("vue").ComputedRef<string>;
    bg: string;
    textBackground: import("vue").ComputedRef<string>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    active: {
        type: BooleanConstructor;
        default: boolean;
    };
    textColor: {
        type: StringConstructor;
        default: undefined;
    };
    activeColor: {
        type: StringConstructor;
        default: string;
    };
    hoverColor: {
        type: StringConstructor;
        default: undefined;
    };
    hoverOpacity: {
        type: NumberConstructor;
        default: number;
    };
    borderColor: {
        type: StringConstructor;
        default: undefined;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
    tag: {
        type: StringConstructor;
        default: string;
    };
    to: {
        type: import("vue").PropType<string | Record<string, any>>;
        default: string;
    };
    replace: {
        type: BooleanConstructor;
        default: boolean;
    };
    append: {
        type: BooleanConstructor;
        default: boolean;
    };
    exact: {
        type: BooleanConstructor;
        default: boolean;
    };
    activeClass: {
        type: StringConstructor;
        default: string;
    };
    exactActiveClass: {
        type: StringConstructor;
        default: string;
    };
    href: {
        type: StringConstructor;
        default: string;
    };
    target: {
        type: StringConstructor;
        default: string;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
}>>, {
    replace: boolean;
    hoverOpacity: number;
    tag: string;
    preset: string;
    disabled: boolean;
    textColor: string;
    borderColor: string;
    to: string | Record<string, any>;
    append: boolean;
    exact: boolean;
    activeClass: string;
    exactActiveClass: string;
    href: string;
    target: string;
    active: boolean;
    activeColor: string;
    hoverColor: string;
}>;
export default _default;
