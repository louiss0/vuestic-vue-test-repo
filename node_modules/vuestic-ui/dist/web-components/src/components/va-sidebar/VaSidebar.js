import { defineComponent, ref, computed, resolveComponent, openBlock, createElementBlock, normalizeClass, normalizeStyle, createElementVNode, createVNode, withCtx, renderSlot } from "vue";
import { V as VaConfig } from "../va-config/VaConfig.js";
import { g as getGradientBackground } from "../../services/color/utils.js";
import { u as useBem } from "../../composables/useBem.js";
import { u as useColors } from "../../composables/useColors.js";
import { u as useComponentPresetProp } from "../../composables/useComponentPreset.js";
import { u as useTextColor } from "../../composables/useTextColor.js";
import { u as useSidebar } from "./hooks/useSidebar.js";
import { _ as _export_sfc } from "../../../plugin-vue_export-helper.js";
var _style_0 = ":root,\n:host {\n  --va-sidebar-min-height: 100%;\n  --va-sidebar-height: 100%;\n  --va-sidebar-position: relative;\n  --va-sidebar-top: 0;\n  --va-sidebar-left: 0;\n  --va-sidebar-transition: var(--va-transition);\n  --va-sidebar-z-index: 1;\n  /* Menu */\n  --va-sidebar-menu-max-height: 100%;\n  --va-sidebar-menu-margin-bottom: 0;\n  --va-sidebar-menu-list-style: none;\n  --va-sidebar-menu-padding-left: 0;\n  --va-sidebar-menu-overflow-y: auto;\n  --va-sidebar-menu-overflow-x: hidden;\n  /* SidebarItem */\n  --va-sidebar-item-active-border-size: 4px;\n  --va-sidebar-item-transition: var(--va-transition);\n  /* SidebarItemContent */\n  --va-sidebar-item-content-padding: 1rem;\n  --va-sidebar-item-content-gap: 0.5rem;\n  /* SidebarItemTitle */\n  --va-sidebar-item-title-white-space: nowrap;\n}\n.va-sidebar {\n  min-height: var(--va-sidebar-min-height);\n  height: var(--va-sidebar-height);\n  position: var(--va-sidebar-position);\n  top: var(--va-sidebar-top);\n  left: var(--va-sidebar-left);\n  z-index: var(--va-sidebar-z-index);\n  font-family: var(--va-font-family);\n  display: inline-flex;\n}\n.va-sidebar__menu {\n  display: flex;\n  flex-direction: column;\n  max-height: var(--va-sidebar-menu-max-height);\n  margin-bottom: var(--va-sidebar-menu-margin-bottom);\n  list-style: var(--va-sidebar-menu-list-style);\n  padding-left: var(--va-sidebar-menu-padding-left);\n  overflow-y: var(--va-sidebar-menu-overflow-y);\n  overflow-x: var(--va-sidebar-menu-overflow-x);\n  scrollbar-color: var(--va-primary) transparent;\n  scrollbar-width: thin;\n}\n.va-sidebar__menu::-webkit-scrollbar {\n  width: 4px;\n  height: 4px;\n}\n.va-sidebar__menu::-webkit-scrollbar-track {\n  box-shadow: none;\n  border-radius: 10px;\n}\n.va-sidebar__menu::-webkit-scrollbar-thumb {\n  background: var(--va-primary);\n  opacity: 0.3;\n  border-radius: 2px;\n}\n.va-sidebar--animated {\n  transition: var(--va-sidebar-transition);\n}\n.va-sidebar--animated .va-sidebar__menu {\n  transition: var(--va-sidebar-transition);\n}\n.va-sidebar--minimized {\n  left: 0;\n}\n.va-sidebar--minimized .va-sidebar__title {\n  display: none;\n}\n.va-sidebar--right {\n  left: auto;\n  right: 0;\n}";
const _sfc_main = defineComponent({
  name: "VaSidebar",
  props: {
    ...useComponentPresetProp,
    activeColor: { type: String, default: "primary" },
    hoverColor: { type: String, default: void 0 },
    hoverOpacity: {
      type: Number,
      default: 0.2,
      validator: (v) => v >= 0 && v <= 1
    },
    borderColor: { type: String, default: void 0 },
    color: { type: String, default: "background-element" },
    textColor: { type: String },
    gradient: { type: Boolean, default: false },
    minimized: { type: Boolean, default: false },
    hoverable: { type: Boolean, default: false },
    position: {
      type: String,
      default: "left",
      validator: (v) => ["left", "right"].includes(v)
    },
    width: { type: String, default: "16rem" },
    minimizedWidth: { type: String, default: "4rem" },
    modelValue: { type: Boolean, default: true },
    animated: { type: Boolean, default: true }
  },
  components: { VaConfig },
  setup(props) {
    const { getColor } = useColors();
    useSidebar(props);
    const isHovered = ref(false);
    const isMinimized = computed(() => props.minimized || props.hoverable && !isHovered.value);
    const computedWidth = computed(() => {
      if (!props.modelValue) {
        return 0;
      }
      return isMinimized.value ? props.minimizedWidth : props.width;
    });
    const { textColorComputed } = useTextColor();
    const computedStyle = computed(() => {
      const backgroundColor = getColor(props.color);
      const color = textColorComputed.value;
      return {
        color,
        backgroundColor,
        backgroundImage: props.gradient ? getGradientBackground(backgroundColor) : void 0
      };
    });
    const computedClass = useBem("va-sidebar", () => ({
      minimized: isMinimized.value,
      right: props.position === "right",
      animated: props.animated
    }));
    const updateHoverState = (newHoverState) => {
      isHovered.value = props.hoverable && newHoverState;
    };
    return {
      computedWidth,
      computedClass,
      computedStyle,
      updateHoverState,
      vaSidebarItemProps: computed(() => ({
        textColor: props.textColor,
        activeColor: props.activeColor,
        hoverColor: props.hoverColor,
        borderColor: props.borderColor,
        hoverOpacity: props.hoverOpacity
      }))
    };
  }
});
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_va_config = resolveComponent("va-config");
  return openBlock(), createElementBlock("aside", {
    class: normalizeClass(["va-sidebar", _ctx.computedClass]),
    style: normalizeStyle(_ctx.computedStyle),
    onMouseenter: _cache[0] || (_cache[0] = ($event) => _ctx.updateHoverState(true)),
    onMouseleave: _cache[1] || (_cache[1] = ($event) => _ctx.updateHoverState(false))
  }, [
    createElementVNode("div", {
      class: "va-sidebar__menu",
      style: normalizeStyle(`width: ${_ctx.computedWidth};`)
    }, [
      createVNode(_component_va_config, {
        components: { VaSidebarItem: _ctx.vaSidebarItemProps }
      }, {
        default: withCtx(() => [
          renderSlot(_ctx.$slots, "default")
        ]),
        _: 3
      }, 8, ["components"])
    ], 4)
  ], 38);
}
var _VaSidebar = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["styles", [...(   VaConfig .styles || []), _style_0]]]);
export { _VaSidebar as _ };
//# sourceMappingURL=VaSidebar.js.map
