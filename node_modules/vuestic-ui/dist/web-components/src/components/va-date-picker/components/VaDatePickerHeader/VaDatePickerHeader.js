import { defineComponent, resolveComponent, openBlock, createElementBlock, normalizeStyle, renderSlot, normalizeProps, guardReactiveProps, createVNode, createElementVNode, withCtx, createTextVNode, toDisplayString, mergeProps, createCommentVNode } from "vue";
import { u as useView } from "../../hooks/view.js";
import { V as VaButton } from "../../../va-button/index.js";
import { u as useTranslation } from "../../../../composables/useTranslation.js";
import { _ as _export_sfc } from "../../../../../plugin-vue_export-helper.js";
var _style_0 = ".va-date-picker__header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n.va-date-picker__header__text {\n  color: currentColor;\n}\n.va-date-picker__header__month {\n  margin-left: 0.25rem;\n}";
const _sfc_main = defineComponent({
  name: "VaDatePickerHeader",
  components: { VaButton },
  emits: ["update:view"],
  props: {
    monthNames: { type: Array, required: true },
    view: { type: Object },
    color: { type: String },
    textColor: { type: String },
    disabled: { type: Boolean, default: false }
  },
  setup(props, { emit }) {
    const { syncView, prev, next } = useView(props, emit);
    const switchView = () => {
      if (syncView.value.type === "day") {
        syncView.value = { ...syncView.value, type: "month" };
      } else if (syncView.value.type === "month") {
        syncView.value = { ...syncView.value, type: "year" };
      }
    };
    const changeView = (view) => {
      syncView.value = view;
    };
    return {
      ...useTranslation(),
      prev,
      next,
      changeView,
      switchView,
      syncView
    };
  }
});
const _hoisted_1 = { class: "va-date-picker__header__text" };
const _hoisted_2 = { class: "va-date-picker__header__month" };
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_va_button = resolveComponent("va-button");
  return _ctx.syncView.type !== "year" ? (openBlock(), createElementBlock("div", {
    key: 0,
    class: "va-date-picker-header va-date-picker__header",
    style: normalizeStyle({ color: _ctx.textColor })
  }, [
    renderSlot(_ctx.$slots, "buttonPrev", normalizeProps(guardReactiveProps({ onClick: _ctx.prev })), () => [
      createVNode(_component_va_button, {
        disabled: _ctx.$props.disabled,
        icon: "va-arrow-left",
        preset: "plain",
        size: "small",
        color: _ctx.color,
        textColor: _ctx.textColor,
        "aria-label": _ctx.t("nextPeriod"),
        round: "",
        onClick: _ctx.prev
      }, null, 8, ["disabled", "color", "textColor", "aria-label", "onClick"])
    ]),
    createElementVNode("div", _hoisted_1, [
      renderSlot(_ctx.$slots, "header", normalizeProps(guardReactiveProps({ year: _ctx.syncView.year, month: _ctx.syncView.month, monthNames: _ctx.monthNames, view: _ctx.syncView, changeView: _ctx.changeView, switchView: _ctx.switchView })), () => [
        createVNode(_component_va_button, {
          disabled: _ctx.$props.disabled,
          preset: "plain",
          size: "small",
          color: _ctx.color,
          textColor: _ctx.textColor,
          "aria-label": _ctx.t("switchView"),
          onClick: _ctx.switchView
        }, {
          default: withCtx(() => [
            renderSlot(_ctx.$slots, "year", normalizeProps(guardReactiveProps({ year: _ctx.syncView.year })), () => [
              createTextVNode(toDisplayString(_ctx.syncView.year), 1)
            ]),
            _ctx.syncView.type === "day" ? renderSlot(_ctx.$slots, "month", normalizeProps(mergeProps({ key: 0 }, { month: _ctx.syncView.month })), () => [
              createElementVNode("span", _hoisted_2, toDisplayString(_ctx.monthNames[_ctx.syncView.month]), 1)
            ]) : createCommentVNode("", true)
          ]),
          _: 3
        }, 8, ["disabled", "color", "textColor", "aria-label", "onClick"])
      ])
    ]),
    renderSlot(_ctx.$slots, "buttonNext", normalizeProps(guardReactiveProps({ onClick: _ctx.next })), () => [
      createVNode(_component_va_button, {
        disabled: _ctx.$props.disabled,
        icon: "va-arrow-right",
        preset: "plain",
        size: "small",
        color: _ctx.color,
        textColor: _ctx.textColor,
        "aria-label": _ctx.t("previousPeriod"),
        onClick: _ctx.next,
        round: ""
      }, null, 8, ["disabled", "color", "textColor", "aria-label", "onClick"])
    ])
  ], 4)) : createCommentVNode("", true);
}
var VaDatePickerHeader = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["styles", [...(   VaButton .styles || []), _style_0]]]);
export { VaDatePickerHeader as V };
//# sourceMappingURL=VaDatePickerHeader.js.map
