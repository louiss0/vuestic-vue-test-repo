import { ExtractPropTypes } from 'vue';
export declare const useFormProps: {
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    readonly: {
        type: BooleanConstructor;
        default: boolean;
    };
};
export declare const useFormPropsWithId: {
    id: {
        type: (StringConstructor | NumberConstructor)[];
        default: undefined;
    };
    name: {
        type: (StringConstructor | NumberConstructor)[];
        default: undefined;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    readonly: {
        type: BooleanConstructor;
        default: boolean;
    };
};
/**
 * @description creates `readonly` and `disabled` BEM modifiers.
 * @param prefix string that classes start with (base BEM class).
 * @param props component props.
 * @returns computed classes object starting with `prefix` and ending with form state BEM modifier.
 */
export declare const useForm: <Prefix extends string = "">(prefix: Prefix, props: ExtractPropTypes<typeof useFormProps>) => {
    computedClasses: { [P in `${Prefix}--${string}` | `${Prefix}--readonly` | `${Prefix}--disabled`]: boolean; } & {
        /**
         * @description creates `readonly` and `disabled` BEM modifiers.
         * @param prefix string that classes start with (base BEM class).
         * @param props component props.
         * @returns computed classes object starting with `prefix` and ending with form state BEM modifier.
         */
        readonly asObject: import("vue").ComputedRef<{ [P in `${Prefix}--${string}` | `${Prefix}--readonly` | `${Prefix}--disabled`]: boolean; }>;
        readonly asArray: import("vue").ComputedRef<(`${Prefix}--${string}` | `${Prefix}--readonly` | `${Prefix}--disabled`)[]>;
        readonly asString: import("vue").ComputedRef<string>;
    };
};
