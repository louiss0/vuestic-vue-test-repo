import { PropType } from 'vue';
declare const _default: import("vue").DefineComponent<{
    tag: {
        type: StringConstructor;
        default: string;
    };
    type: {
        type: StringConstructor;
        default: string;
    };
    block: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    textColor: {
        type: StringConstructor;
        default: string;
    };
    textOpacity: {
        type: NumberConstructor;
        default: number;
    };
    backgroundOpacity: {
        type: NumberConstructor;
        default: number;
    };
    borderColor: {
        type: StringConstructor;
        default: string;
    };
    gradient: {
        type: BooleanConstructor;
        default: boolean;
    };
    plain: {
        type: BooleanConstructor;
        default: boolean;
    };
    round: {
        type: BooleanConstructor;
        default: boolean;
    };
    size: {
        type: PropType<"small" | "medium" | "large">;
        default: string;
        validator: (v: string) => boolean;
    };
    icon: {
        type: StringConstructor;
        default: string;
    };
    iconRight: {
        type: StringConstructor;
        default: string;
    };
    iconColor: {
        type: StringConstructor;
        default: string;
    };
    to: {
        type: PropType<string | Record<string, any>>;
        default: string;
    };
    replace: {
        type: BooleanConstructor;
        default: boolean;
    };
    append: {
        type: BooleanConstructor;
        default: boolean;
    };
    exact: {
        type: BooleanConstructor;
        default: boolean;
    };
    activeClass: {
        type: StringConstructor;
        default: string;
    };
    exactActiveClass: {
        type: StringConstructor;
        default: string;
    };
    href: {
        type: StringConstructor;
        default: string;
    };
    target: {
        type: StringConstructor;
        default: string;
    };
    loading: {
        type: BooleanConstructor;
        default: boolean;
    };
    pressedBehavior: {
        type: PropType<"mask" | "opacity">;
        default: string;
        validator: (value: string) => boolean;
    };
    pressedOpacity: {
        type: NumberConstructor;
        default: number;
    };
    pressedMaskColor: {
        type: StringConstructor;
        default: string;
    };
    hoverBehavior: {
        type: PropType<"mask" | "opacity">;
        default: string;
        validator: (value: string) => boolean;
    };
    hoverOpacity: {
        type: NumberConstructor;
        default: number;
    };
    hoverMaskColor: {
        type: StringConstructor;
        default: string;
    };
    sizesConfig: {
        type: PropType<Record<string, any>>;
        default: () => import("../../services/global-config").SizeConfig;
    };
    fontSizesConfig: {
        type: PropType<Record<string, any>>;
        default: () => import("../../services/global-config").SizeConfig;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
}, {
    focus: () => void;
    blur: () => void;
    button: import("vue").ShallowRef<HTMLElement | undefined>;
    tagComputed: import("vue").ComputedRef<string>;
    computedClass: {
        [x: `va-button--${string}`]: boolean;
    } & {
        readonly asObject: import("vue").ComputedRef<{
            [x: `va-button--${string}`]: boolean;
        }>;
        readonly asArray: import("vue").ComputedRef<`va-button--${string}`[]>;
        readonly asString: import("vue").ComputedRef<string>;
    };
    computedStyle: import("vue").ComputedRef<{
        color: string;
        background?: string | undefined;
        opacity?: number | undefined;
        'background-clip'?: "text" | undefined;
        '-webkit-background-clip'?: "text" | undefined;
        borderColor: string;
    }>;
    textColorComputed: import("vue").ComputedRef<string>;
    loaderSizeComputed: import("vue").ComputedRef<string>;
    attributesComputed: import("vue").ComputedRef<{
        'aria-disabled': boolean;
        disabled: boolean;
        type?: any;
        tabindex?: number | undefined;
        target?: string | undefined;
        href?: any;
        to?: string | Record<string, any> | undefined;
        replace?: boolean | undefined;
        append?: boolean | undefined;
        activeClass?: string | undefined;
        exact?: boolean | undefined;
        exactActiveClass?: string | undefined;
    }>;
    wrapperClassComputed: import("vue").ComputedRef<{
        'va-button__content--loading': boolean;
    }>;
    iconAttributesComputed: import("vue").ComputedRef<{
        size: "small" | "medium" | "large";
        color: string;
    }>;
    backgroundColor: import("vue").ComputedRef<string>;
    backgroundMaskColor: import("vue").ComputedRef<string>;
    backgroundMaskOpacity: import("vue").ComputedRef<number>;
    backgroundColorOpacity: import("vue").ComputedRef<number>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    tag: {
        type: StringConstructor;
        default: string;
    };
    type: {
        type: StringConstructor;
        default: string;
    };
    block: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    textColor: {
        type: StringConstructor;
        default: string;
    };
    textOpacity: {
        type: NumberConstructor;
        default: number;
    };
    backgroundOpacity: {
        type: NumberConstructor;
        default: number;
    };
    borderColor: {
        type: StringConstructor;
        default: string;
    };
    gradient: {
        type: BooleanConstructor;
        default: boolean;
    };
    plain: {
        type: BooleanConstructor;
        default: boolean;
    };
    round: {
        type: BooleanConstructor;
        default: boolean;
    };
    size: {
        type: PropType<"small" | "medium" | "large">;
        default: string;
        validator: (v: string) => boolean;
    };
    icon: {
        type: StringConstructor;
        default: string;
    };
    iconRight: {
        type: StringConstructor;
        default: string;
    };
    iconColor: {
        type: StringConstructor;
        default: string;
    };
    to: {
        type: PropType<string | Record<string, any>>;
        default: string;
    };
    replace: {
        type: BooleanConstructor;
        default: boolean;
    };
    append: {
        type: BooleanConstructor;
        default: boolean;
    };
    exact: {
        type: BooleanConstructor;
        default: boolean;
    };
    activeClass: {
        type: StringConstructor;
        default: string;
    };
    exactActiveClass: {
        type: StringConstructor;
        default: string;
    };
    href: {
        type: StringConstructor;
        default: string;
    };
    target: {
        type: StringConstructor;
        default: string;
    };
    loading: {
        type: BooleanConstructor;
        default: boolean;
    };
    pressedBehavior: {
        type: PropType<"mask" | "opacity">;
        default: string;
        validator: (value: string) => boolean;
    };
    pressedOpacity: {
        type: NumberConstructor;
        default: number;
    };
    pressedMaskColor: {
        type: StringConstructor;
        default: string;
    };
    hoverBehavior: {
        type: PropType<"mask" | "opacity">;
        default: string;
        validator: (value: string) => boolean;
    };
    hoverOpacity: {
        type: NumberConstructor;
        default: number;
    };
    hoverMaskColor: {
        type: StringConstructor;
        default: string;
    };
    sizesConfig: {
        type: PropType<Record<string, any>>;
        default: () => import("../../services/global-config").SizeConfig;
    };
    fontSizesConfig: {
        type: PropType<Record<string, any>>;
        default: () => import("../../services/global-config").SizeConfig;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
}>>, {
    replace: boolean;
    sizesConfig: Record<string, any>;
    backgroundOpacity: number;
    hoverBehavior: "mask" | "opacity";
    hoverOpacity: number;
    pressedBehavior: "mask" | "opacity";
    pressedOpacity: number;
    plain: boolean;
    textOpacity: number;
    icon: string;
    color: string;
    type: string;
    tag: string;
    preset: string;
    size: "small" | "medium" | "large";
    fontSizesConfig: Record<string, any>;
    block: boolean;
    disabled: boolean;
    textColor: string;
    borderColor: string;
    gradient: boolean;
    round: boolean;
    iconRight: string;
    iconColor: string;
    to: string | Record<string, any>;
    append: boolean;
    exact: boolean;
    activeClass: string;
    exactActiveClass: string;
    href: string;
    target: string;
    loading: boolean;
    pressedMaskColor: string;
    hoverMaskColor: string;
}>;
export default _default;
