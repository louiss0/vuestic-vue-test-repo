import { PropType, WritableComputedRef } from 'vue';
declare const _default: import("vue").DefineComponent<{
    modelValue: {
        type: NumberConstructor;
        default: number;
    };
    visiblePages: {
        type: NumberConstructor;
        default: number;
    };
    pages: {
        type: NumberConstructor;
        default: number;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    size: {
        type: PropType<"small" | "medium" | "large">;
        default: string;
        validator: (v: string) => boolean;
    };
    boundaryLinks: {
        type: BooleanConstructor;
        default: boolean;
    };
    boundaryNumbers: {
        type: BooleanConstructor;
        default: boolean;
    };
    directionLinks: {
        type: BooleanConstructor;
        default: boolean;
    };
    input: {
        type: BooleanConstructor;
        default: boolean;
    };
    hideOnSinglePage: {
        type: BooleanConstructor;
        default: boolean;
    };
    total: {
        type: NumberConstructor;
        default: null;
    };
    pageSize: {
        type: NumberConstructor;
        default: null;
    };
    boundaryIconLeft: {
        type: StringConstructor;
        default: string;
    };
    boundaryIconRight: {
        type: StringConstructor;
        default: string;
    };
    directionIconLeft: {
        type: StringConstructor;
        default: string;
    };
    directionIconRight: {
        type: StringConstructor;
        default: string;
    };
    gapped: {
        type: BooleanConstructor;
        default: boolean;
    };
    borderColor: {
        type: StringConstructor;
        default: string;
    };
    rounded: {
        type: BooleanConstructor;
        default: boolean;
    };
    activePageColor: {
        type: StringConstructor;
        default: string;
    };
    buttonsPreset: {
        type: StringConstructor;
        default: string;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
    stateful: {
        type: PropType<boolean>;
        default: boolean;
    };
}, {
    getPageButtonProps: (n: number | '...') => {
        size: "small" | "medium" | "large";
        preset: string;
        color: string;
        borderColor: string;
        round: boolean;
    };
    inputClassComputed: {
        [x: `va-pagination__input--${string}`]: boolean;
    } & {
        readonly asObject: import("vue").ComputedRef<{
            [x: `va-pagination__input--${string}`]: boolean;
        }>;
        readonly asArray: import("vue").ComputedRef<`va-pagination__input--${string}`[]>;
        readonly asString: import("vue").ComputedRef<string>;
    };
    classComputed: {
        [x: `va-pagination--${string}`]: boolean;
    } & {
        readonly asObject: import("vue").ComputedRef<{
            [x: `va-pagination--${string}`]: boolean;
        }>;
        readonly asArray: import("vue").ComputedRef<`va-pagination--${string}`[]>;
        readonly asString: import("vue").ComputedRef<string>;
    };
    currentValue: WritableComputedRef<number>;
    lastPage: import("vue").ComputedRef<number>;
    changeValue: () => void;
    inputValue: import("vue").Ref<string>;
    showPagination: import("vue").ComputedRef<boolean>;
    showBoundaryLinks: import("vue").ComputedRef<boolean>;
    onUserInput: (pageNum: number | '...') => void;
    showDirectionLinks: import("vue").ComputedRef<boolean>;
    paginationRange: import("vue").ComputedRef<(number | "...")[]>;
    focusInput: () => void;
    inputStyleComputed: import("vue").ComputedRef<{
        cursor: string;
        color: string;
        opacity: number;
        borderColor: string;
    }>;
    inputAttributesComputed: import("vue").ComputedRef<{
        disabled: boolean;
        placeholder: string;
    }>;
    goNextPage: () => void;
    goPrevPage: () => void;
    buttonPropsComputed: import("vue").ComputedRef<{
        size: "small" | "medium" | "large";
        preset: string;
        color: string;
        borderColor: string;
        round: boolean;
    }>;
    htmlInput: import("vue").ShallowRef<HTMLInputElement | undefined>;
    setItemRefByIndex: (index: number) => (el: any) => void;
    tp: <Key extends string | undefined>(key: Key) => Key;
    t(key: string, values?: Record<string, string | number | boolean | undefined> | undefined): string;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, string[], string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    modelValue: {
        type: NumberConstructor;
        default: number;
    };
    visiblePages: {
        type: NumberConstructor;
        default: number;
    };
    pages: {
        type: NumberConstructor;
        default: number;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    size: {
        type: PropType<"small" | "medium" | "large">;
        default: string;
        validator: (v: string) => boolean;
    };
    boundaryLinks: {
        type: BooleanConstructor;
        default: boolean;
    };
    boundaryNumbers: {
        type: BooleanConstructor;
        default: boolean;
    };
    directionLinks: {
        type: BooleanConstructor;
        default: boolean;
    };
    input: {
        type: BooleanConstructor;
        default: boolean;
    };
    hideOnSinglePage: {
        type: BooleanConstructor;
        default: boolean;
    };
    total: {
        type: NumberConstructor;
        default: null;
    };
    pageSize: {
        type: NumberConstructor;
        default: null;
    };
    boundaryIconLeft: {
        type: StringConstructor;
        default: string;
    };
    boundaryIconRight: {
        type: StringConstructor;
        default: string;
    };
    directionIconLeft: {
        type: StringConstructor;
        default: string;
    };
    directionIconRight: {
        type: StringConstructor;
        default: string;
    };
    gapped: {
        type: BooleanConstructor;
        default: boolean;
    };
    borderColor: {
        type: StringConstructor;
        default: string;
    };
    rounded: {
        type: BooleanConstructor;
        default: boolean;
    };
    activePageColor: {
        type: StringConstructor;
        default: string;
    };
    buttonsPreset: {
        type: StringConstructor;
        default: string;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
    stateful: {
        type: PropType<boolean>;
        default: boolean;
    };
}>> & {
    [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
}, {
    input: boolean;
    color: string;
    preset: string;
    size: "small" | "medium" | "large";
    modelValue: number;
    disabled: boolean;
    borderColor: string;
    stateful: boolean;
    total: number;
    rounded: boolean;
    visiblePages: number;
    pages: number;
    boundaryLinks: boolean;
    boundaryNumbers: boolean;
    directionLinks: boolean;
    hideOnSinglePage: boolean;
    pageSize: number;
    boundaryIconLeft: string;
    boundaryIconRight: string;
    directionIconLeft: string;
    directionIconRight: string;
    gapped: boolean;
    activePageColor: string;
    buttonsPreset: string;
}>;
export default _default;
