export declare const VaImage: import("vue").DefineComponent<{
    ratio: {
        type: import("vue").PropType<number | "auto">;
        default: string;
        validator: (v: number | "auto") => boolean;
    };
    fit: {
        type: import("vue").PropType<"fill" | "none" | "contain" | "cover" | "scale-down">;
        default: string;
    };
    maxWidth: {
        type: NumberConstructor;
        default: number;
        validator: (v: number) => boolean;
    };
    lazy: {
        type: BooleanConstructor;
        default: boolean;
    };
    placeholderSrc: {
        type: StringConstructor;
        default: string;
    };
    contain: {
        type: BooleanConstructor;
        default: boolean;
    };
    fallbackSrc: {
        type: import("vue").PropType<string | undefined>;
        required: false;
        default: undefined;
    };
    fallbackText: {
        type: import("vue").PropType<string | undefined>;
        required: false;
        default: undefined;
    };
    fallbackIcon: {
        type: import("vue").PropType<string | undefined>;
        required: false;
        default: undefined;
    };
    fallbackRender: {
        type: import("vue").PropType<(() => any) | undefined>;
        required: false;
        default: undefined;
    };
    onFallback: {
        type: import("vue").PropType<((...args: any[]) => any) | undefined>;
        required: false;
        default: undefined;
    };
    src: {
        type: StringConstructor;
        required: boolean;
    };
    alt: {
        type: StringConstructor;
        default: string;
    };
    title: {
        type: StringConstructor;
        default: string;
    };
    sizes: {
        type: StringConstructor;
        default: string;
    };
    srcset: {
        type: StringConstructor;
        default: string;
    };
    draggable: {
        type: BooleanConstructor;
        default: boolean;
    };
    loading: {
        type: import("vue").PropType<"lazy" | "eager">;
    };
    crossorigin: {
        type: import("vue").PropType<"anonymous" | "use-credentials">;
    };
    decoding: {
        type: import("vue").PropType<"auto" | "sync" | "async">;
    };
    fetchpriority: {
        type: import("vue").PropType<"auto" | "high" | "low">;
        default: string;
    };
    referrerpolicy: {
        type: import("vue").PropType<"no-referrer" | "no-referrer-when-downgrade" | "origin" | "origin-when-cross-origin" | "same-origin" | "strict-origin" | "strict-origin-when-cross-origin" | "unsafe-url">;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
}, {
    fitComputed: import("vue").ComputedRef<"fill" | "none" | "contain" | "cover" | "scale-down">;
    root: import("vue").Ref<HTMLElement | undefined>;
    image: import("vue").Ref<HTMLImageElement | undefined>;
    isLoading: import("vue").Ref<boolean>;
    handleLoad: () => void;
    isError: import("vue").Ref<boolean>;
    handleError: (err?: Event | undefined) => void;
    isReadyForRender: import("vue").ComputedRef<boolean>;
    isPlaceholderShown: import("vue").ComputedRef<string | false | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>[]>;
    isSuccessfullyLoaded: import("vue").ComputedRef<boolean>;
    imgAttributesComputed: import("vue").ComputedRef<Pick<import("vue").ExtractPropTypes<{
        src: {
            type: StringConstructor;
            required: boolean;
        };
        alt: {
            type: StringConstructor;
            default: string;
        };
        title: {
            type: StringConstructor;
            default: string;
        };
        sizes: {
            type: StringConstructor;
            default: string;
        };
        srcset: {
            type: StringConstructor;
            default: string;
        };
        draggable: {
            type: BooleanConstructor;
            default: boolean;
        };
        loading: {
            type: import("vue").PropType<"lazy" | "eager">;
        };
        crossorigin: {
            type: import("vue").PropType<"anonymous" | "use-credentials">;
        };
        decoding: {
            type: import("vue").PropType<"auto" | "sync" | "async">;
        };
        fetchpriority: {
            type: import("vue").PropType<"auto" | "high" | "low">;
            default: string;
        };
        referrerpolicy: {
            type: import("vue").PropType<"no-referrer" | "no-referrer-when-downgrade" | "origin" | "origin-when-cross-origin" | "same-origin" | "strict-origin" | "strict-origin-when-cross-origin" | "unsafe-url">;
        };
    }>, "title" | "sizes" | "loading" | "draggable" | "src" | "alt" | "srcset" | "crossorigin" | "decoding" | "fetchpriority" | "referrerpolicy">>;
    aspectRationAttributesComputed: import("vue").ComputedRef<{
        contentWidth: number;
        contentHeight: number;
        maxWidth: number;
        ratio: number | "auto";
    }>;
    isAnyFallbackPassed: import("vue").ComputedRef<boolean>;
    fallbackProps: import("vue").ComputedRef<import("vue").ExtractPropTypes<{
        fallbackSrc: {
            type: import("vue").PropType<string | undefined>;
            required: false;
            default: undefined;
        };
        fallbackText: {
            type: import("vue").PropType<string | undefined>;
            required: false;
            default: undefined;
        };
        fallbackIcon: {
            type: import("vue").PropType<string | undefined>;
            required: false;
            default: undefined;
        };
        fallbackRender: {
            type: import("vue").PropType<(() => any) | undefined>;
            required: false;
            default: undefined;
        };
        onFallback: {
            type: import("vue").PropType<((...args: any[]) => any) | undefined>;
            required: false;
            default: undefined;
        };
    }>>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("error" | "fallback" | "loaded")[], "error" | "fallback" | "loaded", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    ratio: {
        type: import("vue").PropType<number | "auto">;
        default: string;
        validator: (v: number | "auto") => boolean;
    };
    fit: {
        type: import("vue").PropType<"fill" | "none" | "contain" | "cover" | "scale-down">;
        default: string;
    };
    maxWidth: {
        type: NumberConstructor;
        default: number;
        validator: (v: number) => boolean;
    };
    lazy: {
        type: BooleanConstructor;
        default: boolean;
    };
    placeholderSrc: {
        type: StringConstructor;
        default: string;
    };
    contain: {
        type: BooleanConstructor;
        default: boolean;
    };
    fallbackSrc: {
        type: import("vue").PropType<string | undefined>;
        required: false;
        default: undefined;
    };
    fallbackText: {
        type: import("vue").PropType<string | undefined>;
        required: false;
        default: undefined;
    };
    fallbackIcon: {
        type: import("vue").PropType<string | undefined>;
        required: false;
        default: undefined;
    };
    fallbackRender: {
        type: import("vue").PropType<(() => any) | undefined>;
        required: false;
        default: undefined;
    };
    onFallback: {
        type: import("vue").PropType<((...args: any[]) => any) | undefined>;
        required: false;
        default: undefined;
    };
    src: {
        type: StringConstructor;
        required: boolean;
    };
    alt: {
        type: StringConstructor;
        default: string;
    };
    title: {
        type: StringConstructor;
        default: string;
    };
    sizes: {
        type: StringConstructor;
        default: string;
    };
    srcset: {
        type: StringConstructor;
        default: string;
    };
    draggable: {
        type: BooleanConstructor;
        default: boolean;
    };
    loading: {
        type: import("vue").PropType<"lazy" | "eager">;
    };
    crossorigin: {
        type: import("vue").PropType<"anonymous" | "use-credentials">;
    };
    decoding: {
        type: import("vue").PropType<"auto" | "sync" | "async">;
    };
    fetchpriority: {
        type: import("vue").PropType<"auto" | "high" | "low">;
        default: string;
    };
    referrerpolicy: {
        type: import("vue").PropType<"no-referrer" | "no-referrer-when-downgrade" | "origin" | "origin-when-cross-origin" | "same-origin" | "strict-origin" | "strict-origin-when-cross-origin" | "unsafe-url">;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
}>> & {
    onFallback?: ((...args: any[]) => any) | undefined;
    onError?: ((...args: any[]) => any) | undefined;
    onLoaded?: ((...args: any[]) => any) | undefined;
}, {
    title: string;
    preset: string;
    sizes: string;
    maxWidth: number;
    contain: boolean;
    draggable: boolean;
    onFallback: ((...args: any[]) => any) | undefined;
    fallbackSrc: string | undefined;
    fallbackText: string | undefined;
    fallbackIcon: string | undefined;
    fallbackRender: (() => any) | undefined;
    ratio: number | "auto";
    alt: string;
    lazy: boolean;
    srcset: string;
    fetchpriority: "auto" | "high" | "low";
    fit: "fill" | "none" | "contain" | "cover" | "scale-down";
    placeholderSrc: string;
}>;
