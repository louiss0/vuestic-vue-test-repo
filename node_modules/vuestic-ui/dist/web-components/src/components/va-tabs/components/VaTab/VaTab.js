import { defineComponent, shallowRef, ref, computed, inject, onMounted, onBeforeUnmount, resolveComponent, openBlock, createBlock, resolveDynamicComponent, normalizeClass, normalizeStyle, withCtx, createElementVNode, mergeProps, withKeys, toHandlers, renderSlot, createCommentVNode, toDisplayString } from "vue";
import { u as useColors } from "../../../../composables/useColors.js";
import { u as useComponentPresetProp } from "../../../../composables/useComponentPreset.js";
import { u as useKeyboardOnlyFocus } from "../../../../composables/useKeyboardOnlyFocus.js";
import { u as useRouterLinkProps, a as useRouterLink } from "../../../../composables/useRouterLink.js";
import { T as TabsViewKey } from "../../types.js";
import { V as VaIcon } from "../../../va-icon/index.js";
import { _ as _export_sfc } from "../../../../../plugin-vue_export-helper.js";
var _style_0 = ":root,\n:host {\n  --va-tab-align-items: center;\n  --va-tab-display: inline-flex;\n  --va-tab-flex: 0 1 auto;\n  --va-tab-font-weight: 600;\n  --va-tab-line-height: normal;\n  --va-tab-height: inherit;\n  --va-tab-max-width: 264px;\n  --va-tab-text-align: center;\n  --va-tab-vertical-align: middle;\n  --va-tab-color: inherit;\n  /* Content */\n  --va-tab-content-align-items: center;\n  --va-tab-content-color: inherit;\n  --va-tab-content-display: flex;\n  --va-tab-content-flex: 1 1 auto;\n  --va-tab-content-height: 100%;\n  --va-tab-content-justify-content: center;\n  --va-tab-content-max-width: inherit;\n  --va-tab-content-text-decoration: none;\n  --va-tab-content-transition: $transition-primary;\n  --va-tab-content-user-select: none;\n  --va-tab-content-white-space: nowrap;\n  --va-tab-content-padding: 0.275rem 0.75rem;\n  --va-tab-content-cursor: pointer;\n  /* Icon */\n  --va-tab-icon-margin-right: 0.5rem;\n}\n.va-tab {\n  align-items: var(--va-tab-align-items);\n  display: var(--va-tab-display);\n  flex: var(--va-tab-flex);\n  font-weight: var(--va-tab-font-weight);\n  line-height: var(--va-tab-line-height);\n  height: var(--va-tab-height);\n  max-width: var(--va-tab-max-width);\n  text-align: var(--va-tab-text-align);\n  vertical-align: var(--va-tab-vertical-align);\n  color: var(--va-tab-color);\n}\n.va-tab__content {\n  align-items: var(--va-tab-content-align-items);\n  color: var(--va-tab-content-color);\n  display: var(--va-tab-content-display);\n  flex: var(--va-tab-content-flex);\n  height: var(--va-tab-content-height);\n  justify-content: var(--va-tab-content-justify-content);\n  max-width: var(--va-tab-content-max-width);\n  -webkit-text-decoration: var(--va-tab-content-text-decoration);\n          text-decoration: var(--va-tab-content-text-decoration);\n  transition: var(--va-tab-content-transition);\n  -webkit-user-select: var(--va-tab-content-user-select);\n     -moz-user-select: var(--va-tab-content-user-select);\n          user-select: var(--va-tab-content-user-select);\n  white-space: var(--va-tab-content-white-space);\n  padding: var(--va-tab-content-padding);\n  cursor: var(--va-tab-content-cursor);\n}\n.va-tab__content:focus-visible {\n  outline: 2px solid var(--va-focus) !important;\n  border-radius: 2px;\n  outline-offset: -2px;\n}\n.va-tab__icon {\n  margin-right: var(--va-tab-icon-margin-right);\n}\n.va-tab.va-tab--disabled {\n  cursor: default;\n  opacity: 0.4;\n  pointer-events: none;\n  -webkit-user-select: none;\n     -moz-user-select: none;\n          user-select: none;\n  pointer-events: none;\n}";
const _sfc_main = defineComponent({
  name: "VaTab",
  components: { VaIcon },
  emits: ["click", "keydown-enter", "focus"],
  props: {
    ...useRouterLinkProps,
    ...useComponentPresetProp,
    selected: { type: Boolean, default: false },
    color: { type: String, default: "" },
    icon: { type: String, default: "" },
    label: { type: String, default: "" },
    disabled: { type: Boolean },
    name: { type: [String, Number] },
    tag: { type: String, default: "div" }
  },
  setup: (props, { emit }) => {
    const tabElement = shallowRef();
    const isActive = ref(false);
    const hoverState = ref(false);
    const rightSidePosition = ref(0);
    const leftSidePosition = ref(0);
    const { keyboardFocusListeners, hasKeyboardFocus } = useKeyboardOnlyFocus();
    const { tagComputed, hrefComputed, isActiveRouterLink } = useRouterLink(props);
    const classComputed = computed(() => ({ "va-tab--disabled": props.disabled }));
    const {
      parentDisabled,
      selectTab,
      moveToTab,
      registerTab,
      unregisterTab
    } = inject(TabsViewKey, {
      parentDisabled: false,
      tabsList: [],
      selectTab: (tab) => tab,
      moveToTab: (tab) => tab,
      registerTab: (tab) => tab,
      unregisterTab: (tab) => tab
    });
    const tabIndexComputed = computed(() => props.disabled || parentDisabled ? -1 : 0);
    const { getColor } = useColors();
    const colorComputed = computed(() => getColor(props.color));
    const computedStyle = computed(() => ({
      color: hoverState.value || isActive.value ? colorComputed.value : "inherit"
    }));
    const updateHoverState = (isHover) => {
      hoverState.value = isHover;
    };
    const updateSidePositions = () => {
      var _a, _b;
      const componentOffsetLeft = ((_a = tabElement.value) == null ? void 0 : _a.offsetLeft) || 0;
      const componentOffsetWidth = ((_b = tabElement.value) == null ? void 0 : _b.offsetWidth) || 0;
      rightSidePosition.value = componentOffsetLeft + componentOffsetWidth;
      leftSidePosition.value = componentOffsetLeft;
    };
    const onTabClick = () => {
      selectTab(tabComponent);
      emit("click");
    };
    const onTabKeydown = () => {
      selectTab(tabComponent);
      emit("keydown-enter");
    };
    const onFocus = () => {
      if (hasKeyboardFocus.value) {
        moveToTab(tabComponent);
      }
      emit("focus");
    };
    const tabComponent = {
      name: computed(() => props.name),
      id: null,
      tabElement,
      isActive,
      tabIndexComputed,
      isActiveRouterLink,
      rightSidePosition,
      leftSidePosition,
      onTabClick,
      onTabKeydown,
      onFocus,
      updateSidePositions
    };
    onMounted(() => {
      registerTab(tabComponent);
    });
    onBeforeUnmount(() => {
      unregisterTab(tabComponent);
    });
    return {
      tabElement,
      parentDisabled,
      isActive,
      hoverState,
      tagComputed,
      hrefComputed,
      isActiveRouterLink,
      colorComputed,
      classComputed,
      computedStyle,
      tabIndexComputed,
      rightSidePosition,
      leftSidePosition,
      updateHoverState,
      updateSidePositions,
      onTabClick,
      onTabKeydown,
      onFocus,
      keyboardFocusListeners
    };
  }
});
const _hoisted_1 = ["tabindex"];
const _hoisted_2 = ["textContent"];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_va_icon = resolveComponent("va-icon");
  return openBlock(), createBlock(resolveDynamicComponent(_ctx.tagComputed), {
    ref: "tabElement",
    class: normalizeClass(["va-tab", _ctx.classComputed]),
    role: "tab",
    "aria-selected": _ctx.isActive,
    "aria-disabled": _ctx.$props.disabled || _ctx.parentDisabled,
    href: _ctx.hrefComputed,
    target: _ctx.target,
    to: _ctx.to,
    replace: _ctx.replace,
    exact: _ctx.exact,
    "active-class": _ctx.activeClass,
    "exact-active-class": _ctx.exactActiveClass,
    style: normalizeStyle(_ctx.computedStyle),
    onMouseenter: _cache[3] || (_cache[3] = ($event) => _ctx.updateHoverState(true)),
    onMouseleave: _cache[4] || (_cache[4] = ($event) => _ctx.updateHoverState(false))
  }, {
    default: withCtx(() => [
      createElementVNode("div", mergeProps({
        class: "va-tab__content",
        tabindex: _ctx.tabIndexComputed,
        onFocus: _cache[0] || (_cache[0] = (...args) => _ctx.onFocus && _ctx.onFocus(...args)),
        onClick: _cache[1] || (_cache[1] = (...args) => _ctx.onTabClick && _ctx.onTabClick(...args)),
        onKeydown: _cache[2] || (_cache[2] = withKeys((...args) => _ctx.onTabKeydown && _ctx.onTabKeydown(...args), ["enter"]))
      }, toHandlers(_ctx.keyboardFocusListeners)), [
        renderSlot(_ctx.$slots, "default", {}, () => [
          _ctx.icon ? (openBlock(), createBlock(_component_va_icon, {
            key: 0,
            class: "va-tab__icon",
            size: "small",
            name: _ctx.icon
          }, null, 8, ["name"])) : createCommentVNode("", true),
          createElementVNode("span", {
            class: "va-tab__label",
            textContent: toDisplayString(_ctx.label)
          }, null, 8, _hoisted_2)
        ])
      ], 16, _hoisted_1)
    ]),
    _: 3
  }, 40, ["aria-selected", "aria-disabled", "href", "target", "to", "replace", "exact", "active-class", "exact-active-class", "class", "style"]);
}
var _VaTab = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["styles", [...(   VaIcon .styles || []), _style_0]]]);
export { _VaTab as _ };
//# sourceMappingURL=VaTab.js.map
