import { defineComponent, computed, useCssVars, resolveComponent, openBlock, createBlock, mergeProps, withCtx, createVNode, normalizeStyle, createElementBlock, createCommentVNode, createElementVNode, renderSlot, normalizeProps, guardReactiveProps, normalizeClass, createSlots, renderList, TransitionGroup, Fragment, withModifiers, toDisplayString, createTextVNode } from "vue";
import { o as omit_1, p as pick_1 } from "../../../vendor.js";
import { u as useColumnsProps, a as useColumns } from "./hooks/useColumns.js";
import { u as usePaginatedRowsProps, a as usePaginatedRows } from "./hooks/usePaginatedRows.js";
import { u as useSelectableProps, a as useSelectableRow } from "./hooks/useSelectableRow.js";
import { u as useStylableProps, a as useStylable } from "./hooks/useStylable.js";
import { u as useBindingProps, a as useBinding } from "./hooks/useBinding.js";
import { u as useAnimationNameProps, a as useAnimationName } from "./hooks/useAnimationName.js";
import { u as useRowsProps, a as useRows } from "./hooks/useRows.js";
import { u as useFilterableProps, a as useFilterable } from "./hooks/useFilterable.js";
import { u as useSortableProps, a as useSortable } from "./hooks/useSortable.js";
import { u as useTableScrollProps, a as useTableScrollEmits, b as useTableScroll } from "./hooks/useTableScroll.js";
import { u as useComponentPresetProp } from "../../composables/useComponentPreset.js";
import { u as useTranslation } from "../../composables/useTranslation.js";
import { u as useThrottleProps } from "../../composables/useThrottle.js";
import { e as extractComponentProps } from "../../utils/component-options/extract-component-options.js";
import { f as filterComponentProps } from "../../utils/component-options/filter-props.js";
import { V as VaDataTableThRow } from "./components/index.js";
import { V as VaVirtualScroller } from "../va-virtual-scroller/index.js";
import { V as VaInnerLoading } from "../va-inner-loading/index.js";
import { V as VaCheckbox } from "../va-checkbox/index.js";
import { _ as _export_sfc } from "../../../plugin-vue_export-helper.js";
var _style_0 = '.va-data-table {\n  --va-data-table-cell-padding: 0.625rem;\n  --va-data-table-thead-line-height: 1.6;\n  --va-data-table-thead-font-size: 0.625rem;\n  --va-data-table-thead-font-weight: 700;\n  --va-data-table-thead-text-transform: uppercase;\n  --va-data-table-thead-letter-spacing: 0.6px;\n  --va-data-table-thead-border: 1px solid var(--va-background-border);\n  --va-data-table-thead-border-top-shadow: inset 0 1px 0 0 var(--va-background-border);\n  --va-data-table-thead-border-bottom-shadow: inset 0 -1px 0 0 var(--va-background-border);\n  --va-data-table-height: unset;\n  --va-data-table-max-height: unset;\n  --va-data-table-thead-color: currentColor;\n  --va-data-table-tfoot-color: currentColor;\n  --va-data-table-header-background: var(--va-background-primary);\n  /* Hover */\n  --va-data-table-hover-th-opacity: 0.3;\n  /* Striped */\n  --va-data-table-striped-tr-background-color: var(--va-background-element);\n  --va-data-table-striped-tr-opacity: 1;\n  /* Selectable */\n  --va-data-table-selectable-tr-cursor: pointer;\n  --va-data-table-selectable-cell-width: 55px;\n  --va-data-table-selectable-cell-vertical-align: middle;\n  --va-data-table-selectable-cell-text-align: center;\n  /* No-data */\n  --va-data-table-no-data-text-align: center;\n  --va-data-table-no-data-vertical-align: middle;\n  /* Animated */\n  --va-data-table-transition: var(--va-transition);\n  /* Grid */\n  --va-data-table-grid-tbody-gap: 0.5rem;\n  --va-data-table-grid-tbody-margin-top: 1rem;\n  --va-data-table-grid-tr-padding: 1rem;\n  --va-data-table-grid-tr-border-radius: 0.5rem;\n  --va-data-table-grid-tr-border: 1px solid var(--va-background-border);\n  --va-data-table-grid-tr-header-font-weight: 600;\n  --va-data-table-grid-tr-header-color: var(--va-text-primary);\n}\n.va-data-table {\n  --va-data-table-selected-color: var(--1f3a67be);\n  --va-data-table-hover-color: var(--88c618e4);\n  --va-data-table-height--computed: var(--1e63e124);\n  --va-data-table-thead-background--computed: var(--b38615dc);\n  --va-data-table-tfoot-background--computed: var(--b9326fc0);\n  --va-data-table-grid-tbody-columns: 4;\n  min-width: unset;\n  font-family: var(--va-font-family);\n}\n@media (max-width: 1199.98px) {\n.va-data-table {\n    --va-data-table-grid-tbody-columns: 3;\n}\n}\n@media (max-width: 991.98px) {\n.va-data-table {\n    --va-data-table-grid-tbody-columns: 2;\n}\n}\n@media (max-width: 767.98px) {\n.va-data-table {\n    --va-data-table-grid-tbody-columns: 1;\n}\n}\n.va-data-table:not(.va-data-table--virtual-scroller) {\n  overflow-x: auto;\n  overflow-y: hidden;\n}\n.va-data-table--sticky:not(.va-data-table--virtual-scroller), .va-data-table--scroll {\n  overflow-y: auto;\n  height: var(--va-data-table-height--computed);\n  max-height: var(--va-data-table-max-height);\n}\n.va-data-table .va-data-table__table {\n  width: 100%;\n  cursor: default;\n  white-space: nowrap;\n}\n.va-data-table .va-data-table__table .va-data-table__table-thead {\n  color: var(--va-data-table-thead-color);\n  border-bottom: var(--va-data-table-thead-border);\n}\n.va-data-table .va-data-table__table .va-data-table__table-thead th {\n  border-bottom: none;\n  box-shadow: var(--va-data-table-thead-border-bottom-shadow);\n}\n.va-data-table .va-data-table__table .va-data-table__table-thead--sticky {\n  position: sticky;\n  top: 0;\n  z-index: 1;\n  background: var(--va-data-table-thead-background--computed);\n}\n.va-data-table .va-data-table__table .va-data-table__table-tbody .no-data {\n  text-align: var(--va-data-table-no-data-text-align);\n  vertical-align: var(--va-data-table-no-data-vertical-align);\n}\n.va-data-table .va-data-table__table .va-data-table__table-tfoot {\n  color: var(--va-data-table-tfoot-color);\n  border-top: var(--va-data-table-thead-border);\n}\n.va-data-table .va-data-table__table .va-data-table__table-tfoot th {\n  border-bottom: none;\n  box-shadow: var(--va-data-table-thead-border-top-shadow);\n}\n.va-data-table .va-data-table__table .va-data-table__table-tfoot--sticky {\n  position: sticky;\n  bottom: 0;\n  z-index: 1;\n  background: var(--va-data-table-tfoot-background--computed);\n}\n.va-data-table .va-data-table__table .va-data-table__table-td {\n  padding: var(--va-data-table-cell-padding);\n  text-align: var(--va-data-table-align);\n  vertical-align: var(--va-data-table-vertical-align);\n}\n.va-data-table .va-data-table__table .va-data-table__table-th.va-data-table__table-cell-select,\n.va-data-table .va-data-table__table .va-data-table__table-td.va-data-table__table-cell-select {\n  width: var(--va-data-table-selectable-cell-width);\n  min-width: var(--va-data-table-selectable-cell-width);\n  text-align: var(--va-data-table-selectable-cell-text-align);\n  vertical-align: var(--va-data-table-selectable-cell-vertical-align);\n  cursor: var(--va-data-table-selectable-tr-cursor);\n}\n.va-data-table .va-data-table__table .va-data-table__table-th .va-data-table__table-cell-checkbox,\n.va-data-table .va-data-table__table .va-data-table__table-td .va-data-table__table-cell-checkbox {\n  display: block;\n}\n.va-data-table .va-data-table__table .va-data-table__table-tr.selected {\n  background-color: var(--va-data-table-selected-color);\n}\n.va-data-table .va-data-table__table.clickable .va-data-table__table-tr {\n  cursor: pointer;\n}\n.va-data-table .va-data-table__table.striped .va-data-table__table-tr {\n  position: relative;\n  z-index: 0;\n}\n.va-data-table .va-data-table__table.striped .va-data-table__table-tr:nth-child(2n):not(.selected) {\n  z-index: 0;\n}\n.va-data-table .va-data-table__table.striped .va-data-table__table-tr:nth-child(2n):not(.selected)::after {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  content: "";\n  background: var(--va-data-table-striped-tr-background-color);\n  opacity: var(--va-data-table-striped-tr-opacity);\n  z-index: -1;\n  transition: all 0.3s ease-in-out;\n}\n.va-data-table .va-data-table__table.selectable :not(thead, tfoot) .va-data-table__table-tr:hover, .va-data-table .va-data-table__table.hoverable :not(thead, tfoot) .va-data-table__table-tr:hover {\n  background-color: var(--va-data-table-hover-color);\n}\n.va-data-table .va-data-table__table.selectable :not(thead, tfoot) .va-data-table__table-tr:nth-child(2n):hover, .va-data-table .va-data-table__table.hoverable :not(thead, tfoot) .va-data-table__table-tr:nth-child(2n):hover {\n  background-color: var(--va-data-table-hover-color);\n}\n.va-data-table .va-data-table__table.selectable :not(thead, tfoot) .va-data-table__table-tr:nth-child(2n):hover::after, .va-data-table .va-data-table__table.hoverable :not(thead, tfoot) .va-data-table__table-tr:nth-child(2n):hover::after {\n  background: transparent;\n  opacity: 1;\n}\n.va-data-table .va-data-table__table .table-transition-fade-leave-active {\n  transition: opacity var(--va-data-table-transition);\n}\n.va-data-table .va-data-table__table .table-transition-fade-enter-active {\n  transition: opacity var(--va-data-table-transition) 0.2s;\n}\n.va-data-table .va-data-table__table .table-transition-fade-enter-from,\n.va-data-table .va-data-table__table .table-transition-shuffle-enter-from,\n.va-data-table .va-data-table__table .table-transition-fade-leave-to,\n.va-data-table .va-data-table__table .table-transition-shuffle-leave-to {\n  opacity: 0;\n}\n.va-data-table .va-data-table__table .table-transition-shuffle-move {\n  transition: transform var(--va-data-table-transition);\n}\n.va-data-table .va-data-table__table .table-transition-shuffle-leave-active {\n  transition: none;\n}\n.va-data-table .va-data-table__table .table-transition-shuffle-enter-active {\n  transition: opacity var(--va-data-table-transition);\n}\n.va-data-table__scroll-trigger {\n  -webkit-user-select: none;\n     -moz-user-select: none;\n          user-select: none;\n}\n.va-data-table--grid .va-data-table__table-thead .va-data-table__table-tr {\n  display: flex;\n  justify-content: space-between;\n}\n.va-data-table--grid .va-data-table__table-thead .va-data-table__table-tr .va-data-table__table-th {\n  box-shadow: none;\n}\n@media (max-width: 767.98px) {\n.va-data-table--grid .va-data-table__table-thead .va-data-table__table-tr {\n    flex-direction: column;\n}\n}\n.va-data-table--grid .va-data-table__table-tbody {\n  margin-top: var(--va-data-table-grid-tbody-margin-top);\n  display: grid;\n  grid-template-columns: repeat(var(--081f84ea), minmax(0, 1fr));\n  gap: var(--va-data-table-grid-tbody-gap);\n}\n.va-data-table--grid .va-data-table__table-tbody .va-data-table__table-tr {\n  grid-column: span 1/span 1;\n  padding: var(--va-data-table-grid-tr-padding);\n  display: flex;\n  flex-direction: column;\n  border: var(--va-data-table-grid-tr-border);\n  border-radius: var(--va-data-table-grid-tr-border-radius);\n}\n.va-data-table--grid .va-data-table__table-tbody .va-data-table__table-td {\n  overflow: hidden;\n}\n.va-data-table--grid .selectable .va-data-table__table-tr {\n  cursor: pointer;\n}\n.va-data-table--grid .va-data-table__table-td {\n  display: flex;\n  flex-direction: column;\n}\n.va-data-table--grid .va-data-table__grid-column-header {\n  font-weight: var(--va-data-table-grid-tr-header-font-weight);\n  color: var(--va-data-table-grid-tr-header-color);\n}';
const VaVirtualScrollerProps = extractComponentProps(VaVirtualScroller, ["items", "trackBy", "horizontal", "disabled", "table"]);
const VaDataTableThRowProps = extractComponentProps(VaDataTableThRow);
const __default__ = defineComponent({
  name: "VaDataTable",
  components: {
    VaDataTableThRow,
    VaVirtualScroller,
    VaInnerLoading,
    VaCheckbox
  },
  inheritAttrs: false,
  props: {
    ...useComponentPresetProp,
    ...VaVirtualScrollerProps,
    ...useAnimationNameProps,
    ...useBindingProps,
    ...useTableScrollProps,
    ...useSortableProps,
    ...useStylableProps,
    ...useColumnsProps,
    ...useFilterableProps,
    ...usePaginatedRowsProps,
    ...useRowsProps,
    ...useSelectableProps,
    ...useThrottleProps,
    hoverable: { type: Boolean, default: false },
    clickable: { type: Boolean, default: false },
    loading: { type: Boolean, default: false },
    loadingColor: { type: String, default: "primary" },
    noDataHtml: { type: String, default: "No items" },
    noDataFilteredHtml: { type: String, default: "No items match the provided filtering condition" },
    hideDefaultHeader: { type: Boolean, default: false },
    footerClone: { type: Boolean, default: false },
    striped: { type: Boolean, default: false },
    virtualScroller: { type: Boolean, default: false },
    virtualTrackBy: { type: [String, Number], default: "initialIndex" },
    grid: { type: Boolean, default: false },
    gridColumns: { type: Number, default: 0 }
  },
  emits: [
    "update:modelValue",
    "update:sortBy",
    "update:sortingOrder",
    "filtered",
    "sorted",
    "selectionChange",
    "row:click",
    "row:dblclick",
    "row:contextmenu",
    ...useTableScrollEmits
  ],
  setup(props, { attrs, emit }) {
    const { columnsComputed } = useColumns(props);
    const { rowsComputed } = useRows(columnsComputed, props);
    const { filteredRows } = useFilterable(rowsComputed, props, emit);
    const {
      sortBySync,
      sortingOrderSync,
      toggleSorting,
      sortedRows,
      sortingOrderIconName
    } = useSortable(columnsComputed, filteredRows, props, emit);
    const { paginatedRows } = usePaginatedRows(sortedRows, props);
    const {
      ctrlSelectRow,
      shiftSelectRows,
      toggleBulkSelection,
      isRowSelected,
      severalRowsSelected,
      allRowsSelected,
      toggleRowSelection
    } = useSelectableRow(paginatedRows, props, emit);
    const {
      CSSVariables,
      getCellCSSVariables,
      getClass,
      getStyle
    } = useStylable(props);
    const { getRowBind, getCellBind } = useBinding(props);
    const animationName = useAnimationName(props, paginatedRows);
    const showNoDataHtml = computed(() => props.items.length === 0);
    const showNoDataFilteredHtml = computed(() => paginatedRows.value.length === 0);
    const onRowClickHandler = (name, event, row) => {
      if (props.clickable) {
        emit(name, {
          event,
          item: row.source,
          itemIndex: row.initialIndex
        });
      }
      if (props.selectable && props.grid) {
        toggleRowSelection(row);
      }
    };
    const computedTableAttributes = computed(() => ({
      ...omit_1(attrs, ["class", "style"]),
      class: pick_1(props, ["striped", "selectable", "hoverable", "clickable"])
    }));
    const virtualScrollerPropsComputed = computed(() => ({
      ...pick_1(props, ["wrapperSize", "itemSize", "bench"]),
      items: paginatedRows.value,
      trackBy: props.virtualTrackBy,
      disabled: !props.virtualScroller,
      table: true
    }));
    const computedAttributes = computed(() => ({
      class: [
        { "va-data-table--sticky": props.stickyHeader || props.stickyFooter },
        { "va-data-table--scroll": !!props.height },
        { "va-data-table--virtual-scroller": isVirtualScroll.value },
        { "va-data-table--grid": props.grid },
        attrs.class
      ],
      style: [attrs.style],
      ...virtualScrollerPropsComputed.value
    }));
    const thAttributesComputed = computed(() => ({
      ...filterComponentProps(VaDataTableThRowProps).value,
      columns: columnsComputed.value,
      sortingOrderIconName: sortingOrderIconName.value,
      severalRowsSelected: severalRowsSelected.value,
      sortingOrderSync: sortingOrderSync.value,
      allRowsSelected: allRowsSelected.value,
      sortBySync: sortBySync.value
    }));
    const {
      scrollContainer,
      topTrigger,
      bottomTrigger,
      doRenderTopTrigger,
      doRenderBottomTrigger
    } = useTableScroll(props, emit);
    const isVirtualScroll = computed(() => props.virtualScroller && !props.grid);
    const gridColumnsCount = computed(() => props.gridColumns || "var(--va-data-table-grid-tbody-columns)");
    return {
      ...useTranslation(),
      scrollContainer,
      topTrigger,
      bottomTrigger,
      columnsComputed,
      ctrlSelectRow,
      shiftSelectRows,
      toggleBulkSelection,
      isRowSelected,
      toggleSorting,
      CSSVariables,
      getCellCSSVariables,
      getClass,
      getStyle,
      thAttributesComputed,
      showNoDataHtml,
      showNoDataFilteredHtml,
      onRowClickHandler,
      computedAttributes,
      computedTableAttributes,
      animationName,
      getRowBind,
      getCellBind,
      doRenderTopTrigger,
      doRenderBottomTrigger,
      isVirtualScroll,
      gridColumnsCount
    };
  }
});
const __injectCSSVars__ = () => {
  useCssVars((_ctx) => ({
    "1f3a67be": _ctx.CSSVariables.selectedColor,
    "88c618e4": _ctx.CSSVariables.hoverColor,
    "1e63e124": _ctx.CSSVariables.tableHeight,
    "b38615dc": _ctx.CSSVariables.theadBg,
    "b9326fc0": _ctx.CSSVariables.tfootBg,
    "081f84ea": _ctx.gridColumnsCount
  }));
};
const __setup__ = __default__.setup;
__default__.setup = __setup__ ? (props, ctx) => {
  __injectCSSVars__();
  return __setup__(props, ctx);
} : __injectCSSVars__;
const _sfc_main = __default__;
const _hoisted_1 = {
  key: 0,
  ref: "topTrigger",
  class: "va-data-table__scroll-trigger"
};
const _hoisted_2 = { key: 0 };
const _hoisted_3 = {
  ref: "list",
  class: "va-data-table__table-tbody"
};
const _hoisted_4 = { key: "showNoDataHtml" };
const _hoisted_5 = ["colspan", "innerHTML"];
const _hoisted_6 = { key: "showNoDataFilteredHtml" };
const _hoisted_7 = ["colspan", "innerHTML"];
const _hoisted_8 = ["onClick", "onDblclick", "onContextmenu"];
const _hoisted_9 = {
  key: 0,
  class: "va-data-table__grid-column-header"
};
const _hoisted_10 = {
  key: 1,
  ref: "bottomTrigger",
  class: "va-data-table__scroll-trigger"
};
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_va_data_table_th_row = resolveComponent("va-data-table-th-row");
  const _component_va_checkbox = resolveComponent("va-checkbox");
  const _component_va_inner_loading = resolveComponent("va-inner-loading");
  const _component_va_virtual_scroller = resolveComponent("va-virtual-scroller");
  return openBlock(), createBlock(_component_va_virtual_scroller, mergeProps({ class: "va-data-table" }, _ctx.computedAttributes, { ref: "scrollContainer" }), {
    content: withCtx(({
      uniqueKey,
      renderBuffer,
      currentListOffset,
      listStyleComputed,
      containerStyleComputed
    }) => [
      createVNode(_component_va_inner_loading, {
        "aria-live": "polite",
        style: normalizeStyle(containerStyleComputed),
        loading: _ctx.loading,
        color: _ctx.loadingColor
      }, {
        default: withCtx(() => [
          _ctx.doRenderTopTrigger ? (openBlock(), createElementBlock("div", _hoisted_1, null, 512)) : createCommentVNode("", true),
          createElementVNode("table", mergeProps({
            class: "va-data-table__table",
            style: listStyleComputed
          }, _ctx.computedTableAttributes), [
            "colgroup" in _ctx.$slots ? (openBlock(), createElementBlock("colgroup", _hoisted_2, [
              renderSlot(_ctx.$slots, "colgroup", normalizeProps(guardReactiveProps(_ctx.columnsComputed)))
            ])) : createCommentVNode("", true),
            createElementVNode("thead", {
              class: normalizeClass(["va-data-table__table-thead", { "va-data-table__table-thead--sticky": _ctx.$props.stickyHeader }]),
              style: normalizeStyle({ top: _ctx.isVirtualScroll && _ctx.$props.stickyHeader ? `-${currentListOffset}px` : void 0 })
            }, [
              renderSlot(_ctx.$slots, "headerPrepend"),
              !_ctx.hideDefaultHeader ? (openBlock(), createBlock(_component_va_data_table_th_row, mergeProps({ key: 0 }, _ctx.thAttributesComputed, {
                onToggleBulkSelection: _ctx.toggleBulkSelection,
                onToggleSorting: _ctx.toggleSorting
              }), createSlots({ _: 2 }, [
                renderList(_ctx.$slots, (_, slot) => {
                  return {
                    name: slot,
                    fn: withCtx((scope) => [
                      renderSlot(_ctx.$slots, slot, normalizeProps(guardReactiveProps(scope)))
                    ])
                  };
                })
              ]), 1040, ["onToggleBulkSelection", "onToggleSorting"])) : createCommentVNode("", true),
              renderSlot(_ctx.$slots, "headerAppend")
            ], 6),
            createElementVNode("tbody", _hoisted_3, [
              renderSlot(_ctx.$slots, "bodyPrepend"),
              createVNode(TransitionGroup, {
                name: _ctx.isVirtualScroll ? "" : _ctx.animationName,
                css: !_ctx.$props.virtualScroller,
                appear: !_ctx.$props.virtualScroller
              }, {
                default: withCtx(() => [
                  _ctx.showNoDataHtml ? (openBlock(), createElementBlock("tr", _hoisted_4, [
                    createElementVNode("td", {
                      class: "no-data",
                      colspan: _ctx.columnsComputed.length + (_ctx.selectable ? 1 : 0),
                      innerHTML: _ctx.noDataHtml
                    }, null, 8, _hoisted_5)
                  ])) : _ctx.showNoDataFilteredHtml ? (openBlock(), createElementBlock("tr", _hoisted_6, [
                    createElementVNode("td", {
                      class: "no-data",
                      colspan: _ctx.columnsComputed.length + (_ctx.selectable ? 1 : 0),
                      innerHTML: _ctx.noDataFilteredHtml
                    }, null, 8, _hoisted_7)
                  ])) : createCommentVNode("", true),
                  (openBlock(true), createElementBlock(Fragment, null, renderList(renderBuffer, (row, index) => {
                    return openBlock(), createElementBlock("tr", mergeProps({
                      key: `table-row_${uniqueKey(row, index)}`,
                      class: ["va-data-table__table-tr", [{ selected: _ctx.isRowSelected(row) }]]
                    }, _ctx.getRowBind(row), {
                      onClick: ($event) => _ctx.onRowClickHandler("row:click", $event, row),
                      onDblclick: ($event) => _ctx.onRowClickHandler("row:dblclick", $event, row),
                      onContextmenu: ($event) => _ctx.onRowClickHandler("row:contextmenu", $event, row)
                    }), [
                      _ctx.selectable && !_ctx.$props.grid ? (openBlock(), createElementBlock("td", {
                        class: "va-data-table__table-td va-data-table__table-cell-select",
                        key: `selectable_${uniqueKey(row, index)}`,
                        onSelectstart: _cache[0] || (_cache[0] = withModifiers(() => {
                        }, ["prevent"]))
                      }, [
                        createVNode(_component_va_checkbox, {
                          class: "va-data-table__table-cell-checkbox",
                          "model-value": _ctx.isRowSelected(row),
                          color: _ctx.selectedColor,
                          "aria-label": _ctx.t(`selectRowByIndex`, { index: row.initialIndex }),
                          onClick: [
                            withModifiers(($event) => _ctx.shiftSelectRows(row), ["shift", "exact", "stop"]),
                            withModifiers(($event) => _ctx.ctrlSelectRow(row), ["ctrl", "exact", "stop"]),
                            withModifiers(($event) => _ctx.ctrlSelectRow(row), ["exact", "stop"])
                          ]
                        }, null, 8, ["model-value", "color", "aria-label", "onClick"])
                      ], 32)) : createCommentVNode("", true),
                      (openBlock(true), createElementBlock(Fragment, null, renderList(row.cells, (cell, cellIndex) => {
                        return openBlock(), createElementBlock("td", mergeProps({
                          key: `table-cell_${cell.column.name + cell.rowIndex}`,
                          class: ["va-data-table__table-td", _ctx.getClass(cell.column.tdClass)],
                          style: [_ctx.getCellCSSVariables(cell), _ctx.getStyle(cell.column.tdStyle)]
                        }, _ctx.getCellBind(cell, row)), [
                          `cell(${cell.column.name})` in _ctx.$slots ? renderSlot(_ctx.$slots, `cell(${cell.column.name})`, normalizeProps(mergeProps({ key: 0 }, cell))) : renderSlot(_ctx.$slots, "cell", normalizeProps(mergeProps({ key: 1 }, cell)), () => [
                            _ctx.$props.grid ? (openBlock(), createElementBlock("span", _hoisted_9, toDisplayString(_ctx.columnsComputed[cellIndex].label), 1)) : createCommentVNode("", true),
                            createTextVNode(" " + toDisplayString(cell.value), 1)
                          ])
                        ], 16);
                      }), 128))
                    ], 16, _hoisted_8);
                  }), 128))
                ]),
                _: 2
              }, 1032, ["name", "css", "appear"]),
              renderSlot(_ctx.$slots, "bodyAppend")
            ], 512),
            _ctx.footerClone && !_ctx.$props.grid ? (openBlock(), createElementBlock("tfoot", {
              key: 1,
              class: normalizeClass(["va-data-table__table-tfoot", { "va-data-table__table-tfoot--sticky": _ctx.$props.stickyFooter }]),
              style: normalizeStyle({ bottom: _ctx.isVirtualScroll && _ctx.$props.stickyFooter ? `${currentListOffset}px` : void 0 })
            }, [
              renderSlot(_ctx.$slots, "footerPrepend"),
              !_ctx.hideDefaultHeader ? (openBlock(), createBlock(_component_va_data_table_th_row, mergeProps({ key: 0 }, _ctx.thAttributesComputed, {
                "is-footer": "",
                onToggleBulkSelection: _ctx.toggleBulkSelection,
                onToggleSorting: _ctx.toggleSorting
              }), createSlots({ _: 2 }, [
                renderList(_ctx.$slots, (_, slot) => {
                  return {
                    name: slot,
                    fn: withCtx((scope) => [
                      renderSlot(_ctx.$slots, slot, normalizeProps(guardReactiveProps(scope)))
                    ])
                  };
                })
              ]), 1040, ["onToggleBulkSelection", "onToggleSorting"])) : createCommentVNode("", true),
              renderSlot(_ctx.$slots, "footerAppend")
            ], 6)) : createCommentVNode("", true)
          ], 16),
          _ctx.doRenderBottomTrigger ? (openBlock(), createElementBlock("div", _hoisted_10, null, 512)) : createCommentVNode("", true)
        ]),
        _: 2
      }, 1032, ["style", "loading", "color"])
    ]),
    _: 3
  }, 16);
}
var _VaDataTable = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["styles", [...(      VaDataTableThRow.styles || []), ...(    VaVirtualScroller.styles || []), ...(    VaInnerLoading.styles || []), ...(    VaCheckbox  .styles || []), _style_0]]]);
export { _VaDataTable as _ };
//# sourceMappingURL=VaDataTable.js.map
