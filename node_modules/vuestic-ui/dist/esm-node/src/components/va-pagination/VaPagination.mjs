import { defineComponent, shallowRef, ref, computed, toRefs, watch, nextTick, resolveComponent, openBlock, createElementBlock, normalizeClass, withKeys, withModifiers, renderSlot, normalizeProps, mergeProps, createBlock, createCommentVNode, Fragment, renderList, withCtx, createTextVNode, toDisplayString, withDirectives, vModelDynamic } from "vue";
import { c as clamp_1, p as pick_1 } from "../../../vendor.mjs";
import { _ as __DEV__ } from "../../utils/env.mjs";
import { u as useArrayRefs } from "../../composables/useArrayRefs.mjs";
import { u as useBem } from "../../composables/useBem.mjs";
import { u as useColors } from "../../composables/useColors.mjs";
import { u as useComponentPresetProp } from "../../composables/useComponentPreset.mjs";
import { u as useStatefulEmits, a as useStatefulProps, b as useStateful } from "../../composables/useStateful.mjs";
import { u as useTranslation } from "../../composables/useTranslation.mjs";
import { s as setPaginationRange } from "./setPaginationRange.mjs";
import { V as VaButton } from "../va-button/index.mjs";
import { _ as _export_sfc } from "../../../plugin-vue_export-helper.mjs";
var VaPagination_vue_vue_type_style_index_0_lang = "";
const _sfc_main = defineComponent({
  name: "VaPagination",
  components: { VaButton },
  emits: useStatefulEmits,
  props: {
    ...useStatefulProps,
    ...useComponentPresetProp,
    modelValue: { type: Number, default: 1 },
    visiblePages: { type: Number, default: 0 },
    pages: { type: Number, default: 0 },
    disabled: { type: Boolean, default: false },
    color: { type: String, default: "primary" },
    size: {
      type: String,
      default: "medium",
      validator: (v) => ["small", "medium", "large"].includes(v)
    },
    boundaryLinks: { type: Boolean, default: true },
    boundaryNumbers: { type: Boolean, default: false },
    directionLinks: { type: Boolean, default: true },
    input: { type: Boolean, default: false },
    hideOnSinglePage: { type: Boolean, default: false },
    total: { type: Number, default: null },
    pageSize: { type: Number, default: null },
    boundaryIconLeft: { type: String, default: "va-arrow-first" },
    boundaryIconRight: { type: String, default: "va-arrow-last" },
    directionIconLeft: { type: String, default: "va-arrow-left" },
    directionIconRight: { type: String, default: "va-arrow-right" },
    gapped: { type: Boolean, default: false },
    borderColor: { type: String, default: "" },
    rounded: { type: Boolean, default: false },
    activePageColor: { type: String, default: "" },
    buttonsPreset: { type: String, default: "primary" }
  },
  setup(props, { emit }) {
    const htmlInput = shallowRef();
    const inputValue = ref("");
    const usesTotal = computed(() => !!((props.total || props.total === 0) && props.pageSize));
    const { valueComputed } = useStateful(props, emit);
    const currentValue = computed({
      get: () => usesTotal.value ? Math.ceil(valueComputed.value / props.pageSize) || 1 : valueComputed.value,
      set: (value) => {
        valueComputed.value = value;
      }
    });
    const paginationRange = computed(() => {
      const { visiblePages, total, pageSize, boundaryNumbers, pages } = props;
      const value = currentValue.value || 1;
      const totalPages = usesTotal.value ? Math.ceil(total / pageSize) : pages;
      return setPaginationRange(value, visiblePages, totalPages, boundaryNumbers);
    });
    const lastPage = computed(() => usesTotal.value ? Math.ceil(props.total / props.pageSize) || 1 : +props.pages);
    const isLastPageNotVisible = computed(() => !!props.visiblePages && lastPage.value > props.visiblePages || props.input);
    const showBoundaryLinks = computed(() => {
      const { boundaryLinks, boundaryNumbers } = props;
      return isLastPageNotVisible.value && boundaryLinks && !boundaryNumbers;
    });
    const showDirectionLinks = computed(() => isLastPageNotVisible.value && props.directionLinks);
    const showPagination = computed(() => lastPage.value > 1 || !props.hideOnSinglePage && lastPage.value <= 1);
    const focusInput = () => {
      inputValue.value = String(currentValue.value);
      nextTick(() => {
        var _a;
        return (_a = htmlInput.value) == null ? void 0 : _a.setSelectionRange(0, htmlInput.value.value.length);
      });
    };
    const { setItemRefByIndex, itemRefs } = useArrayRefs();
    const onUserInput = (pageNum) => {
      var _a;
      if (pageNum === "..." || pageNum === currentValue.value) {
        return;
      }
      const limitedPageNum = clamp_1(pageNum, 1, lastPage.value);
      currentValue.value = usesTotal.value ? (limitedPageNum - 1) * props.pageSize + 1 : limitedPageNum;
      (_a = itemRefs.value[pageNum - 1]) == null ? void 0 : _a.focus();
    };
    const resetInput = () => {
      var _a;
      inputValue.value = "";
      (_a = htmlInput.value) == null ? void 0 : _a.blur();
    };
    const changeValue = () => {
      if (+inputValue.value === currentValue.value) {
        resetInput();
      }
      if (!inputValue.value.length) {
        return;
      }
      let pageNum = Number.parseInt(inputValue.value);
      switch (true) {
        case pageNum < 1:
          pageNum = 1;
          break;
        case pageNum > lastPage.value:
          pageNum = lastPage.value;
          break;
        case isNaN(pageNum):
          pageNum = currentValue.value;
          break;
      }
      onUserInput(pageNum);
      resetInput();
    };
    const { getColor, colorToRgba } = useColors();
    const inputBorderColorComputed = computed(() => {
      const { color, buttonsPreset } = toRefs(props);
      if (!color.value) {
        return "transparent";
      }
      switch (buttonsPreset.value) {
        case "default":
          return getColor(color.value);
        case void 0:
        case "primary":
          return colorToRgba(getColor(color.value), 0.1);
        default:
          return "transparent";
      }
    });
    const inputStyleComputed = computed(() => ({
      cursor: "default",
      color: getColor(props.color),
      opacity: props.disabled ? 0.4 : 1,
      borderColor: inputBorderColorComputed.value
    }));
    watch([usesTotal, () => props.pages], () => {
      if (__DEV__ && usesTotal.value && props.pages) {
        throw new Error("Please, use either `total` and `page-size` props, or `pages`.");
      }
    });
    const inputAttributesComputed = computed(() => ({
      disabled: props.disabled,
      placeholder: `${currentValue.value}/${lastPage.value}`
    }));
    const buttonPropsComputed = computed(() => ({
      size: props.size,
      preset: props.buttonsPreset,
      color: props.color,
      borderColor: props.borderColor,
      round: props.rounded
    }));
    const currentPageButtonProps = computed(() => ({
      preset: props.buttonsPreset === "default" ? "primary" : "default",
      color: props.activePageColor || props.color
    }));
    const getPageButtonProps = (n) => {
      if (!isNaN(+n) && n === currentValue.value) {
        return Object.assign({}, buttonPropsComputed.value, currentPageButtonProps.value);
      }
      return buttonPropsComputed.value;
    };
    const isStandAloneInput = computed(() => props.input && !props.boundaryLinks && !props.directionLinks);
    const inputClassComputed = useBem("va-pagination__input", () => ({
      sm: props.size === "small" && isStandAloneInput.value,
      md: props.size === "medium" && isStandAloneInput.value,
      lg: props.size === "large" && isStandAloneInput.value,
      auto: !isStandAloneInput.value
    }));
    const classComputed = useBem("va-pagination", () => ({
      ...pick_1(props, ["gapped", "rounded", "disabled"]),
      bordered: !!props.borderColor
    }));
    const goNextPage = () => onUserInput(currentValue.value + 1);
    const goPrevPage = () => onUserInput(currentValue.value - 1);
    return {
      ...useTranslation(),
      getPageButtonProps,
      inputClassComputed,
      classComputed,
      currentValue,
      lastPage,
      changeValue,
      inputValue,
      showPagination,
      showBoundaryLinks,
      onUserInput,
      showDirectionLinks,
      paginationRange,
      focusInput,
      inputStyleComputed,
      inputAttributesComputed,
      goNextPage,
      goPrevPage,
      buttonPropsComputed,
      htmlInput,
      setItemRefByIndex
    };
  }
});
const _hoisted_1 = ["aria-label"];
const _hoisted_2 = ["aria-label"];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_va_button = resolveComponent("va-button");
  return _ctx.showPagination ? (openBlock(), createElementBlock("nav", {
    key: 0,
    class: normalizeClass(["va-pagination", _ctx.classComputed]),
    "aria-label": _ctx.t("pagination"),
    onKeydown: [
      _cache[6] || (_cache[6] = withKeys(withModifiers((...args) => _ctx.goPrevPage && _ctx.goPrevPage(...args), ["stop"]), ["left"])),
      _cache[7] || (_cache[7] = withKeys(withModifiers((...args) => _ctx.goNextPage && _ctx.goNextPage(...args), ["stop"]), ["right"])),
      _cache[8] || (_cache[8] = withKeys(withModifiers((...args) => _ctx.goPrevPage && _ctx.goPrevPage(...args), ["stop"]), ["up"])),
      _cache[9] || (_cache[9] = withKeys(withModifiers((...args) => _ctx.goNextPage && _ctx.goNextPage(...args), ["stop"]), ["down"]))
    ]
  }, [
    _ctx.showBoundaryLinks ? renderSlot(_ctx.$slots, "firstPageLink", normalizeProps(mergeProps({ key: 0 }, { onClick: () => _ctx.onUserInput(1), disabled: _ctx.$props.disabled || _ctx.currentValue === 1 })), () => [
      _ctx.showBoundaryLinks ? (openBlock(), createBlock(_component_va_button, mergeProps({
        key: 0,
        "aria-label": _ctx.t("goToTheFirstPage"),
        disabled: _ctx.$props.disabled || _ctx.currentValue === 1,
        icon: _ctx.$props.boundaryIconLeft
      }, _ctx.buttonPropsComputed, {
        onClick: _cache[0] || (_cache[0] = ($event) => _ctx.onUserInput(1))
      }), null, 16, ["aria-label", "disabled", "icon"])) : createCommentVNode("", true)
    ]) : createCommentVNode("", true),
    _ctx.showDirectionLinks ? renderSlot(_ctx.$slots, "prevPageLink", normalizeProps(mergeProps({ key: 1 }, { onClick: _ctx.goPrevPage, disabled: _ctx.$props.disabled || _ctx.currentValue === 1 })), () => [
      _ctx.showDirectionLinks ? (openBlock(), createBlock(_component_va_button, mergeProps({
        key: 0,
        "aria-label": _ctx.t("goToPreviousPage"),
        disabled: _ctx.$props.disabled || _ctx.currentValue === 1,
        icon: _ctx.$props.directionIconLeft
      }, _ctx.buttonPropsComputed, { onClick: _ctx.goPrevPage }), null, 16, ["aria-label", "disabled", "icon", "onClick"])) : createCommentVNode("", true)
    ]) : createCommentVNode("", true),
    !_ctx.$props.input ? renderSlot(_ctx.$slots, "default", { key: 2 }, () => [
      (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.paginationRange, (n, i) => {
        return openBlock(), createBlock(_component_va_button, mergeProps({
          key: i,
          ref_for: true,
          ref: _ctx.setItemRefByIndex(i),
          class: { "va-button--ellipsis": n === "...", "va-button--current": n === _ctx.currentValue },
          "aria-label": _ctx.t(`goToSpecificPage`, { page: n }),
          "aria-current": n === _ctx.currentValue,
          disabled: _ctx.$props.disabled || n === "..."
        }, _ctx.getPageButtonProps(n), {
          onClick: ($event) => _ctx.onUserInput(n)
        }), {
          default: withCtx(() => [
            createTextVNode(toDisplayString(n), 1)
          ]),
          _: 2
        }, 1040, ["class", "aria-label", "aria-current", "disabled", "onClick"]);
      }), 128))
    ]) : withDirectives((openBlock(), createElementBlock("input", mergeProps({
      key: 3,
      "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => _ctx.inputValue = $event),
      ref: "htmlInput",
      class: ["va-pagination__input va-button", _ctx.inputClassComputed],
      "aria-label": _ctx.t("goToSpecificPageInput"),
      style: _ctx.inputStyleComputed
    }, _ctx.inputAttributesComputed, {
      onKeydown: _cache[2] || (_cache[2] = withKeys((...args) => _ctx.changeValue && _ctx.changeValue(...args), ["enter"])),
      onFocus: _cache[3] || (_cache[3] = (...args) => _ctx.focusInput && _ctx.focusInput(...args)),
      onBlur: _cache[4] || (_cache[4] = (...args) => _ctx.changeValue && _ctx.changeValue(...args))
    }), null, 16, _hoisted_2)), [
      [vModelDynamic, _ctx.inputValue]
    ]),
    _ctx.showDirectionLinks ? renderSlot(_ctx.$slots, "nextPageLink", normalizeProps(mergeProps({ key: 4 }, { onClick: _ctx.goNextPage, disabled: _ctx.$props.disabled || _ctx.currentValue === _ctx.lastPage })), () => [
      _ctx.showDirectionLinks ? (openBlock(), createBlock(_component_va_button, mergeProps({
        key: 0,
        "aria-label": _ctx.t("goNextPage"),
        disabled: _ctx.$props.disabled || _ctx.currentValue === _ctx.lastPage,
        icon: _ctx.$props.directionIconRight
      }, _ctx.buttonPropsComputed, { onClick: _ctx.goNextPage }), null, 16, ["aria-label", "disabled", "icon", "onClick"])) : createCommentVNode("", true)
    ]) : createCommentVNode("", true),
    _ctx.showBoundaryLinks ? renderSlot(_ctx.$slots, "lastPageLink", normalizeProps(mergeProps({ key: 5 }, { onClick: () => _ctx.onUserInput(_ctx.lastPage), disabled: _ctx.$props.disabled || _ctx.currentValue === _ctx.lastPage })), () => [
      _ctx.showBoundaryLinks ? (openBlock(), createBlock(_component_va_button, mergeProps({
        key: 0,
        "aria-label": _ctx.t("goLastPage"),
        disabled: _ctx.$props.disabled || _ctx.currentValue === _ctx.lastPage,
        icon: _ctx.$props.boundaryIconRight
      }, _ctx.buttonPropsComputed, {
        onClick: _cache[5] || (_cache[5] = ($event) => _ctx.onUserInput(_ctx.lastPage))
      }), null, 16, ["aria-label", "disabled", "icon"])) : createCommentVNode("", true)
    ]) : createCommentVNode("", true)
  ], 42, _hoisted_1)) : createCommentVNode("", true);
}
var _VaPagination = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { _VaPagination as _ };
//# sourceMappingURL=VaPagination.mjs.map
