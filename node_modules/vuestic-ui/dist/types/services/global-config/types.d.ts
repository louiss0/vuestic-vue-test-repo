import type { ComponentConfig } from '../component-config';
import type { ColorConfig } from '../color';
import type { IconConfig } from '../icon';
import type { BreakpointConfig } from '../breakpoint';
import type { I18nConfig } from '../i18n';
import type { Ref } from 'vue';
import type { ColorsClassesConfig } from '../colors-classes';
export declare type GlobalConfig = {
    colors: ColorConfig;
    icons: IconConfig;
    components: ComponentConfig;
    breakpoint: BreakpointConfig;
    i18n: I18nConfig;
    colorsClasses: ColorsClassesConfig;
};
declare type DeepPartial<T> = T extends Record<string, any> ? {
    [P in keyof T]?: P extends 'components' ? T[P] : DeepPartial<T[P]>;
} : T;
export declare type PartialGlobalConfig = DeepPartial<GlobalConfig>;
export declare type SizeConfig = {
    defaultSize?: number;
    sizes?: {
        [sizeName: string]: number | string;
    };
};
export declare type GlobalConfigUpdater<T> = (config: T) => T;
export type { ColorConfig, ComponentConfig, IconConfig, BreakpointConfig, };
export declare type ProvidedGlobalConfig = {
    globalConfig: Ref<GlobalConfig>;
    getGlobalConfig: () => GlobalConfig;
    /**
     * Set new global config
     * @see mergeGlobalConfig if you want to update existing config
     */
    setGlobalConfig: (updater: GlobalConfig | GlobalConfigUpdater<GlobalConfig>) => void;
    mergeGlobalConfig: (updater: PartialGlobalConfig | GlobalConfigUpdater<PartialGlobalConfig>) => void;
};
export declare const defineVuesticConfig: (config: PartialGlobalConfig) => {
    colors?: {
        variables?: {
            [x: string]: string | undefined;
            primary?: string | undefined;
            secondary?: string | undefined;
            success?: string | undefined;
            info?: string | undefined;
            danger?: string | undefined;
            warning?: string | undefined;
            backgroundPrimary?: string | undefined;
            backgroundSecondary?: string | undefined;
            backgroundElement?: string | undefined;
            backgroundBorder?: string | undefined;
            textPrimary?: string | undefined;
            textInverted?: string | undefined;
            shadow?: string | undefined;
            focus?: string | undefined;
        } | undefined;
        threshold?: number | undefined;
        presets?: {
            [x: string]: {
                [x: string]: string | undefined;
                primary?: string | undefined;
                secondary?: string | undefined;
                success?: string | undefined;
                info?: string | undefined;
                danger?: string | undefined;
                warning?: string | undefined;
                backgroundPrimary?: string | undefined;
                backgroundSecondary?: string | undefined;
                backgroundElement?: string | undefined;
                backgroundBorder?: string | undefined;
                textPrimary?: string | undefined;
                textInverted?: string | undefined;
                shadow?: string | undefined;
                focus?: string | undefined;
            } | undefined;
            light?: {
                [x: string]: string | undefined;
                primary?: string | undefined;
                secondary?: string | undefined;
                success?: string | undefined;
                info?: string | undefined;
                danger?: string | undefined;
                warning?: string | undefined;
                backgroundPrimary?: string | undefined;
                backgroundSecondary?: string | undefined;
                backgroundElement?: string | undefined;
                backgroundBorder?: string | undefined;
                textPrimary?: string | undefined;
                textInverted?: string | undefined;
                shadow?: string | undefined;
                focus?: string | undefined;
            } | undefined;
            dark?: {
                [x: string]: string | undefined;
                primary?: string | undefined;
                secondary?: string | undefined;
                success?: string | undefined;
                info?: string | undefined;
                danger?: string | undefined;
                warning?: string | undefined;
                backgroundPrimary?: string | undefined;
                backgroundSecondary?: string | undefined;
                backgroundElement?: string | undefined;
                backgroundBorder?: string | undefined;
                textPrimary?: string | undefined;
                textInverted?: string | undefined;
                shadow?: string | undefined;
                focus?: string | undefined;
            } | undefined;
        } | undefined;
        currentPresetName?: string | undefined;
    } | undefined;
    icons?: ({
        name?: string | undefined;
        resolve?: {} | undefined;
        attrs?: {
            [x: string]: string | {} | undefined;
        } | undefined;
        component?: any;
        content?: string | undefined;
        class?: string | undefined;
        tag?: string | undefined;
        color?: string | undefined;
        rotation?: string | number | undefined;
        spin?: boolean | "clockwise" | "counter-clockwise" | undefined;
        to?: string | undefined;
    } | {
        name?: {
            exec?: {} | undefined;
            test?: {} | undefined;
            readonly source?: string | undefined;
            readonly global?: boolean | undefined;
            readonly ignoreCase?: boolean | undefined;
            readonly multiline?: boolean | undefined;
            lastIndex?: number | undefined;
            compile?: {} | undefined;
            readonly flags?: string | undefined;
            readonly sticky?: boolean | undefined;
            readonly unicode?: boolean | undefined;
            readonly dotAll?: boolean | undefined;
            [Symbol.match]?: {} | undefined;
            [Symbol.replace]?: {} | undefined;
            [Symbol.search]?: {} | undefined;
            [Symbol.split]?: {} | undefined;
            [Symbol.matchAll]?: {} | undefined;
        } | undefined;
        resolveFromRegex?: {} | undefined;
        attrs?: {
            [x: string]: string | {} | undefined;
        } | undefined;
        component?: any;
        content?: string | undefined;
        class?: string | undefined;
        tag?: string | undefined;
        color?: string | undefined;
        rotation?: string | number | undefined;
        spin?: boolean | "clockwise" | "counter-clockwise" | undefined;
        to?: string | undefined;
    } | undefined)[] | undefined;
    components?: Partial<{
        [x: string]: {};
    } & {
        all: import("../component-config").Props;
        presets: import("../component-config").Presets;
    }> | undefined;
    breakpoint?: {
        enabled?: boolean | undefined;
        bodyClass?: boolean | undefined;
        thresholds?: {
            xs?: number | undefined;
            sm?: number | undefined;
            md?: number | undefined;
            lg?: number | undefined;
            xl?: number | undefined;
        } | undefined;
    } | undefined;
    i18n?: {
        search?: string | undefined;
        noOptions?: string | undefined;
        ok?: string | undefined;
        cancel?: string | undefined;
        uploadFile?: string | undefined;
        undo?: string | undefined;
        dropzone?: string | undefined;
        fileDeleted?: string | undefined;
        closeAlert?: string | undefined;
        backToTop?: string | undefined;
        toggleDropdown?: string | undefined;
        carousel?: string | undefined;
        goPreviousSlide?: string | undefined;
        goNextSlide?: string | undefined;
        goSlide?: string | undefined;
        slideOf?: string | undefined;
        close?: string | undefined;
        openColorPicker?: string | undefined;
        colorSelection?: string | undefined;
        colorName?: string | undefined;
        decreaseCounter?: string | undefined;
        increaseCounter?: string | undefined;
        selectAllRows?: string | undefined;
        sortColumnBy?: string | undefined;
        selectRowByIndex?: string | undefined;
        resetDate?: string | undefined;
        nextPeriod?: string | undefined;
        switchView?: string | undefined;
        previousPeriod?: string | undefined;
        removeFile?: string | undefined;
        reset?: string | undefined;
        pagination?: string | undefined;
        goToTheFirstPage?: string | undefined;
        goToPreviousPage?: string | undefined;
        goToSpecificPage?: string | undefined;
        goToSpecificPageInput?: string | undefined;
        goNextPage?: string | undefined;
        goLastPage?: string | undefined;
        currentRating?: string | undefined;
        voteRating?: string | undefined;
        optionsFilter?: string | undefined;
        splitPanels?: string | undefined;
        movePaginationLeft?: string | undefined;
        movePaginationRight?: string | undefined;
        resetTime?: string | undefined;
        closeToast?: string | undefined;
        selectedOption?: string | undefined;
        noSelectedOption?: string | undefined;
        breadcrumbs?: string | undefined;
        counterValue?: string | undefined;
        selectedDate?: string | undefined;
        selectedTime?: string | undefined;
        progressState?: string | undefined;
        color?: string | undefined;
        next?: string | undefined;
        back?: string | undefined;
        finish?: string | undefined;
    } | undefined;
    colorsClasses?: ({
        prefix?: string | undefined;
        postfix?: string | undefined;
        property?: string | (string | undefined)[] | undefined;
        value?: string | undefined;
    } | undefined)[] | undefined;
};
