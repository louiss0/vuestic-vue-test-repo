import type { PropType, StyleValue } from 'vue';
declare const _default: import("vue").DefineComponent<{
    modelValue: {
        type: BooleanConstructor;
        default: boolean;
    };
    attachElement: {
        type: StringConstructor;
        default: string;
    };
    allowBodyScroll: {
        type: BooleanConstructor;
        default: boolean;
    };
    disableAttachment: {
        type: BooleanConstructor;
        default: boolean;
    };
    title: {
        type: StringConstructor;
        default: string;
    };
    message: {
        type: StringConstructor;
        default: string;
    };
    okText: {
        type: StringConstructor;
        default: string;
    };
    cancelText: {
        type: StringConstructor;
        default: string;
    };
    hideDefaultActions: {
        type: BooleanConstructor;
        default: boolean;
    };
    fullscreen: {
        type: BooleanConstructor;
        default: boolean;
    };
    mobileFullscreen: {
        type: BooleanConstructor;
        default: boolean;
    };
    noDismiss: {
        type: BooleanConstructor;
        default: boolean;
    };
    noOutsideDismiss: {
        type: BooleanConstructor;
        default: boolean;
    };
    noEscDismiss: {
        type: BooleanConstructor;
        default: boolean;
    };
    maxWidth: {
        type: StringConstructor;
        default: string;
    };
    maxHeight: {
        type: StringConstructor;
        default: string;
    };
    anchorClass: {
        type: StringConstructor;
    };
    size: {
        type: PropType<"small" | "medium" | "large">;
        default: string;
        validator: (value: string) => boolean;
    };
    fixedLayout: {
        type: BooleanConstructor;
        default: boolean;
    };
    withoutTransitions: {
        type: BooleanConstructor;
        default: boolean;
    };
    overlay: {
        type: BooleanConstructor;
        default: boolean;
    };
    overlayOpacity: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    blur: {
        type: BooleanConstructor;
        default: boolean;
    };
    zIndex: {
        type: (StringConstructor | NumberConstructor)[];
        default: undefined;
    };
    backgroundColor: {
        type: StringConstructor;
        default: string;
    };
    noPadding: {
        type: BooleanConstructor;
        default: boolean;
    };
    beforeClose: {
        type: PropType<(hide: () => void) => any>;
    };
    stateful: {
        type: PropType<boolean>;
        default: boolean;
    };
}, {
    show: () => void;
    hide: (cb?: (() => void) | undefined) => void;
    toggle: () => void;
    cancel: () => void;
    ok: () => void;
    onBeforeEnterTransition: (el: HTMLElement) => void;
    onAfterEnterTransition: (el: HTMLElement) => void;
    onBeforeLeaveTransition: (el: HTMLElement) => void;
    onAfterLeaveTransition: (el: HTMLElement) => void;
    listenKeyUp: (e: KeyboardEvent) => void;
    tp: <Key extends string | undefined>(key: Key) => Key;
    t(key: string, values?: Record<string, string | number | boolean | undefined> | undefined): string;
    getColor: (prop?: string | undefined, defaultColor?: string | undefined, preferVariables?: boolean | undefined) => string;
    rootElement: import("vue").ShallowRef<HTMLElement | undefined>;
    modalDialog: import("vue").ShallowRef<HTMLElement | undefined>;
    valueComputed: import("vue").WritableComputedRef<any>;
    computedClass: import("vue").ComputedRef<{
        [x: string]: boolean;
        'va-modal--fullscreen': boolean;
        'va-modal--mobile-fullscreen': boolean;
        'va-modal--fixed-layout': boolean;
        'va-modal--no-padding': boolean;
    }>;
    computedDialogStyle: import("vue").ComputedRef<{
        maxWidth: string;
        maxHeight: string;
        color: string;
        background: string;
    }>;
    computedModalContainerStyle: import("vue").ComputedRef<StyleValue>;
    computedOverlayStyles: import("vue").ComputedRef<StyleValue | undefined>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, string[], string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    modelValue: {
        type: BooleanConstructor;
        default: boolean;
    };
    attachElement: {
        type: StringConstructor;
        default: string;
    };
    allowBodyScroll: {
        type: BooleanConstructor;
        default: boolean;
    };
    disableAttachment: {
        type: BooleanConstructor;
        default: boolean;
    };
    title: {
        type: StringConstructor;
        default: string;
    };
    message: {
        type: StringConstructor;
        default: string;
    };
    okText: {
        type: StringConstructor;
        default: string;
    };
    cancelText: {
        type: StringConstructor;
        default: string;
    };
    hideDefaultActions: {
        type: BooleanConstructor;
        default: boolean;
    };
    fullscreen: {
        type: BooleanConstructor;
        default: boolean;
    };
    mobileFullscreen: {
        type: BooleanConstructor;
        default: boolean;
    };
    noDismiss: {
        type: BooleanConstructor;
        default: boolean;
    };
    noOutsideDismiss: {
        type: BooleanConstructor;
        default: boolean;
    };
    noEscDismiss: {
        type: BooleanConstructor;
        default: boolean;
    };
    maxWidth: {
        type: StringConstructor;
        default: string;
    };
    maxHeight: {
        type: StringConstructor;
        default: string;
    };
    anchorClass: {
        type: StringConstructor;
    };
    size: {
        type: PropType<"small" | "medium" | "large">;
        default: string;
        validator: (value: string) => boolean;
    };
    fixedLayout: {
        type: BooleanConstructor;
        default: boolean;
    };
    withoutTransitions: {
        type: BooleanConstructor;
        default: boolean;
    };
    overlay: {
        type: BooleanConstructor;
        default: boolean;
    };
    overlayOpacity: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    blur: {
        type: BooleanConstructor;
        default: boolean;
    };
    zIndex: {
        type: (StringConstructor | NumberConstructor)[];
        default: undefined;
    };
    backgroundColor: {
        type: StringConstructor;
        default: string;
    };
    noPadding: {
        type: BooleanConstructor;
        default: boolean;
    };
    beforeClose: {
        type: PropType<(hide: () => void) => any>;
    };
    stateful: {
        type: PropType<boolean>;
        default: boolean;
    };
}>> & {
    [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
}, {
    title: string;
    size: "small" | "medium" | "large";
    modelValue: boolean;
    backgroundColor: string;
    blur: boolean;
    attachElement: string;
    allowBodyScroll: boolean;
    disableAttachment: boolean;
    message: string;
    okText: string;
    cancelText: string;
    hideDefaultActions: boolean;
    fullscreen: boolean;
    mobileFullscreen: boolean;
    noDismiss: boolean;
    noOutsideDismiss: boolean;
    noEscDismiss: boolean;
    maxWidth: string;
    maxHeight: string;
    fixedLayout: boolean;
    withoutTransitions: boolean;
    overlay: boolean;
    overlayOpacity: string | number;
    zIndex: string | number;
    noPadding: boolean;
    stateful: boolean;
}>;
export default _default;
