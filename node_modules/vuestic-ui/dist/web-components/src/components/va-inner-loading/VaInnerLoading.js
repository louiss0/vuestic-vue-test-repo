import { u as useComponentPresetProp } from "../../composables/useComponentPreset.js";
import { defineComponent, computed, resolveComponent, openBlock, createElementBlock, renderSlot, createVNode, createCommentVNode } from "vue";
import { u as useColors } from "../../composables/useColors.js";
import { u as useLoadingProps } from "../../composables/useLoading.js";
import { V as VaIcon } from "../va-icon/index.js";
import { _ as _export_sfc } from "../../../plugin-vue_export-helper.js";
var _style_0 = ':root,\n:host {\n  --va-inner-loading-position: relative;\n  --va-inner-loading-min-width: fit-content;\n  --va-inner-loading-width: 100%;\n  --va-inner-loading-overlay-display: flex;\n  --va-inner-loading-overlay-align-items: center;\n  --va-inner-loading-overlay-justify-content: center;\n  --va-inner-loading-overlay-position: absolute;\n  --va-inner-loading-overlay-top: 0;\n  --va-inner-loading-overlay-bottom: 0;\n  --va-inner-loading-overlay-width: 100%;\n  --va-inner-loading-overlay-background: var(--va-background-primary);\n}\n.inner-loading {\n  position: var(--va-inner-loading-position);\n  min-width: var(--va-inner-loading-min-width);\n  width: var(--va-inner-loading-width);\n  font-family: var(--va-font-family);\n}\n.inner-loading__overlay {\n  display: var(--va-inner-loading-overlay-display);\n  align-items: var(--va-inner-loading-overlay-align-items);\n  justify-content: var(--va-inner-loading-overlay-justify-content);\n  position: var(--va-inner-loading-overlay-position);\n  top: var(--va-inner-loading-overlay-top);\n  bottom: var(--va-inner-loading-overlay-bottom);\n  width: var(--va-inner-loading-overlay-width);\n  z-index: 0;\n}\n.inner-loading__overlay::after {\n  content: "";\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  top: 0;\n  left: 0;\n  background: var(--va-inner-loading-overlay-background);\n  opacity: 0.3;\n  z-index: -1;\n}';
const _sfc_main = defineComponent({
  name: "VaInnerLoading",
  components: { VaIcon },
  props: {
    ...useLoadingProps,
    ...useComponentPresetProp,
    color: { type: String },
    icon: { type: String, default: "autorenew" },
    size: { type: Number, default: 30 }
  },
  setup(props) {
    const { getColor } = useColors();
    const colorComputed = computed(() => getColor(props.color));
    return { colorComputed };
  }
});
const _hoisted_1 = { class: "inner-loading" };
const _hoisted_2 = {
  key: 0,
  class: "inner-loading__overlay",
  "aria-hidden": "true"
};
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_va_icon = resolveComponent("va-icon");
  return openBlock(), createElementBlock("div", _hoisted_1, [
    renderSlot(_ctx.$slots, "default"),
    _ctx.$props.loading ? (openBlock(), createElementBlock("div", _hoisted_2, [
      createVNode(_component_va_icon, {
        class: "inner-loading__spinner",
        spin: "",
        color: _ctx.colorComputed,
        size: _ctx.$props.size,
        name: _ctx.$props.icon
      }, null, 8, ["color", "size", "name"])
    ])) : createCommentVNode("", true)
  ]);
}
var _VaInnerLoading = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["styles", [...(   VaIcon .styles || []), _style_0]]]);
export { _VaInnerLoading as _ };
//# sourceMappingURL=VaInnerLoading.js.map
