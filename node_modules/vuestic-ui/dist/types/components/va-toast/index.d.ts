export declare const VaToast: import("vue").DefineComponent<{
    title: {
        type: StringConstructor;
        default: string;
    };
    offsetY: {
        type: NumberConstructor;
        default: number;
    };
    offsetX: {
        type: NumberConstructor;
        default: number;
    };
    message: {
        type: (FunctionConstructor | StringConstructor)[];
        default: string;
    };
    dangerouslyUseHtmlString: {
        type: BooleanConstructor;
        default: boolean;
    };
    icon: {
        type: StringConstructor;
        default: string;
    };
    customClass: {
        type: StringConstructor;
        default: string;
    };
    duration: {
        type: NumberConstructor;
        default: number;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    closeable: {
        type: BooleanConstructor;
        default: boolean;
    };
    onClose: {
        type: FunctionConstructor;
    };
    onClick: {
        type: FunctionConstructor;
    };
    multiLine: {
        type: BooleanConstructor;
        default: boolean;
    };
    position: {
        type: import("vue").PropType<import("./types").ToastPosition>;
        default: string;
        validator: (value: string) => boolean;
    };
    render: {
        type: FunctionConstructor;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
}, {
    visible: import("vue").Ref<boolean>;
    toastClasses: import("vue").ComputedRef<string[]>;
    toastStyles: import("vue").ComputedRef<{
        [x: string]: string;
        backgroundColor: string;
        color: string;
    }>;
    computedMessage: import("vue").ComputedRef<any>;
    onToastClick: () => void;
    onToastClose: () => void;
    startTimer: () => void;
    clearTimer: () => void | 0 | undefined;
    tp: <Key extends string | undefined>(key: Key) => Key;
    t(key: string, values?: Record<string, string | number | boolean | undefined> | undefined): string;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("on-click" | "on-close")[], "on-click" | "on-close", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    title: {
        type: StringConstructor;
        default: string;
    };
    offsetY: {
        type: NumberConstructor;
        default: number;
    };
    offsetX: {
        type: NumberConstructor;
        default: number;
    };
    message: {
        type: (FunctionConstructor | StringConstructor)[];
        default: string;
    };
    dangerouslyUseHtmlString: {
        type: BooleanConstructor;
        default: boolean;
    };
    icon: {
        type: StringConstructor;
        default: string;
    };
    customClass: {
        type: StringConstructor;
        default: string;
    };
    duration: {
        type: NumberConstructor;
        default: number;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    closeable: {
        type: BooleanConstructor;
        default: boolean;
    };
    onClose: {
        type: FunctionConstructor;
    };
    onClick: {
        type: FunctionConstructor;
    };
    multiLine: {
        type: BooleanConstructor;
        default: boolean;
    };
    position: {
        type: import("vue").PropType<import("./types").ToastPosition>;
        default: string;
        validator: (value: string) => boolean;
    };
    render: {
        type: FunctionConstructor;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
}>> & {
    "onOn-click"?: ((...args: any[]) => any) | undefined;
    "onOn-close"?: ((...args: any[]) => any) | undefined;
}, {
    title: string;
    icon: string;
    color: string;
    preset: string;
    duration: number;
    message: string | Function;
    position: import("./types").ToastPosition;
    offsetY: number;
    offsetX: number;
    dangerouslyUseHtmlString: boolean;
    customClass: string;
    closeable: boolean;
    multiLine: boolean;
}>;
export { useToast } from './hooks/useToast';
export * from './types';
