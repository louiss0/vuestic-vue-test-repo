import { defineComponent, computed, useCssVars, openBlock, createElementBlock, createElementVNode, renderSlot } from "vue";
import { u as useColors } from "../../composables/useColors.js";
import { u as useSizeProps, a as useSize } from "../../composables/useSize.js";
import { _ as _export_sfc } from "../../../plugin-vue_export-helper.js";
var _style_0 = ":root {\n  --va-scroll-container-scrollbar-gradient-to: var(--va-background-primary);\n}\n.va-scroll-container {\n  scrollbar-color: var(--f55ca9ca) transparent;\n  scrollbar-width: thin;\n  overflow-x: var(--62c5c45b);\n  overflow-y: var(--62c5c45c);\n  width: 100%;\n  height: 100%;\n  direction: var(--c20c3f98);\n}\n.va-scroll-container::-webkit-scrollbar {\n  width: var(--704f36e8);\n  height: var(--704f36e8);\n}\n.va-scroll-container::-webkit-scrollbar-track {\n  box-shadow: none;\n  border-radius: 10px;\n}\n.va-scroll-container::-webkit-scrollbar-thumb {\n  background: var(--f55ca9ca);\n  opacity: 0.3;\n  border-radius: 2px;\n}\n.va-scroll-container__content {\n  height: -webkit-fill-available;\n  height: -moz-available;\n  height: stretch;\n  width: -webkit-fill-available;\n  width: -moz-available;\n  width: stretch;\n  direction: ltr;\n}";
const __default__ = defineComponent({
  name: "VaScrollContainer",
  props: {
    ...useSizeProps,
    vertical: { type: Boolean, default: false },
    horizontal: { type: Boolean, default: false },
    color: { type: String, default: "secondary" },
    rtl: { type: Boolean, default: false },
    gradient: { type: Boolean, default: false },
    sizesConfig: {
      type: Object,
      default: () => ({
        defaultSize: 4,
        sizes: { small: 4, medium: 6, large: 8 }
      })
    },
    size: {
      type: String,
      default: "small",
      validator: (v) => ["small", "medium", "large"].includes(v)
    }
  },
  setup(props) {
    const { getColor } = useColors();
    const { sizeComputed } = useSize(props);
    return {
      overflowX: computed(() => props.horizontal ? "auto" : "hidden"),
      overflowY: computed(() => props.vertical ? "auto" : "hidden"),
      scrollColor: computed(() => {
        const color = getColor(props.color);
        return props.gradient ? `linear-gradient(0deg, var(--va-scroll-container-scrollbar-gradient-to) 0%, ${color} 100%)` : color;
      }),
      scrollbarSize: computed(() => sizeComputed.value),
      scrollbarPosition: computed(() => props.rtl ? "rtl" : "ltr")
    };
  }
});
const __injectCSSVars__ = () => {
  useCssVars((_ctx) => ({
    "f55ca9ca": _ctx.scrollColor,
    "704f36e8": _ctx.scrollbarSize,
    "62c5c45b": _ctx.overflowX,
    "62c5c45c": _ctx.overflowY,
    "c20c3f98": _ctx.scrollbarPosition
  }));
};
const __setup__ = __default__.setup;
__default__.setup = __setup__ ? (props, ctx) => {
  __injectCSSVars__();
  return __setup__(props, ctx);
} : __injectCSSVars__;
const _sfc_main = __default__;
const _hoisted_1 = { class: "va-scroll-container" };
const _hoisted_2 = { class: "va-scroll-container__content" };
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", _hoisted_1, [
    createElementVNode("div", _hoisted_2, [
      renderSlot(_ctx.$slots, "default")
    ])
  ]);
}
var _VaScrollContainer = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["styles", [_style_0]]]);
export { _VaScrollContainer as _ };
//# sourceMappingURL=VaScrollContainer.js.map
