import { defineComponent, computed, resolveComponent, openBlock, createBlock, normalizeClass, withCtx, createElementBlock, Fragment, renderList, createCommentVNode } from "vue";
import { b as VaList } from "../../va-list/index.mjs";
import { V as VaFileUploadListItem } from "../VaFileUploadListItem/index.mjs";
import { V as VaFileUploadGalleryItem } from "../VaFileUploadGalleryItem/index.mjs";
import { V as VaFileUploadSingleItem } from "../VaFileUploadSingleItem/index.mjs";
import { _ as _export_sfc } from "../../../../plugin-vue_export-helper.mjs";
var VaFileUploadList_vue_vue_type_style_index_0_lang = "";
const _sfc_main = defineComponent({
  name: "VaFileUploadList",
  components: {
    VaList,
    VaFileUploadListItem,
    VaFileUploadGalleryItem,
    VaFileUploadSingleItem
  },
  emits: ["remove", "removeSingle"],
  props: {
    type: { type: String, default: "" },
    files: { type: Array, default: null },
    color: { type: String, default: "success" }
  },
  setup(props) {
    const filesList = computed(() => props.files.map(convertFile));
    const convertFile = (file) => ({
      name: file.name || file.url || "",
      size: formatSize(file.size),
      date: formatDate(new Date()),
      image: file
    });
    const formatSize = (bytes) => {
      if (bytes === 0) {
        return "0 Bytes";
      }
      if (!bytes) {
        return "";
      }
      const k = 1024;
      const sizes = ["Bytes", "KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB"];
      const i = Math.floor(Math.log(bytes) / Math.log(k));
      return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + " " + sizes[i];
    };
    const formatDate = (date = new Date()) => {
      return date.toLocaleDateString("en-US", {
        hour: "2-digit",
        minute: "2-digit",
        month: "short",
        day: "numeric",
        year: "numeric"
      });
    };
    return {
      filesList
    };
  }
});
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_va_file_upload_list_item = resolveComponent("va-file-upload-list-item");
  const _component_va_file_upload_gallery_item = resolveComponent("va-file-upload-gallery-item");
  const _component_va_file_upload_single_item = resolveComponent("va-file-upload-single-item");
  const _component_va_list = resolveComponent("va-list");
  return openBlock(), createBlock(_component_va_list, {
    class: normalizeClass(["va-file-upload-list", `va-file-upload-list--${_ctx.type}`]),
    role: _ctx.type !== "single" ? "list" : void 0
  }, {
    default: withCtx(() => [
      _ctx.type === "list" ? (openBlock(true), createElementBlock(Fragment, { key: 0 }, renderList(_ctx.filesList, (file, index) => {
        return openBlock(), createBlock(_component_va_file_upload_list_item, {
          key: file.name,
          file,
          color: _ctx.color,
          role: "listitem",
          onRemove: ($event) => _ctx.$emit("remove", index)
        }, null, 8, ["file", "color", "onRemove"]);
      }), 128)) : createCommentVNode("", true),
      _ctx.type === "gallery" ? (openBlock(true), createElementBlock(Fragment, { key: 1 }, renderList(_ctx.filesList, (file, index) => {
        return openBlock(), createBlock(_component_va_file_upload_gallery_item, {
          key: file.name,
          file,
          color: _ctx.color,
          role: "listitem",
          onRemove: ($event) => _ctx.$emit("remove", index)
        }, null, 8, ["file", "color", "onRemove"]);
      }), 128)) : createCommentVNode("", true),
      _ctx.type === "single" && _ctx.filesList.length ? (openBlock(), createBlock(_component_va_file_upload_single_item, {
        key: 2,
        file: _ctx.filesList[_ctx.filesList.length - 1],
        onRemove: _cache[0] || (_cache[0] = ($event) => _ctx.$emit("removeSingle"))
      }, null, 8, ["file"])) : createCommentVNode("", true)
    ]),
    _: 1
  }, 8, ["role", "class"]);
}
var _VaFileUploadList = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { _VaFileUploadList as _ };
//# sourceMappingURL=VaFileUploadList.mjs.map
