import { PropType } from 'vue';
import type { Step, StepControls } from './types';
declare const _default: import("vue").DefineComponent<{
    modelValue: {
        type: NumberConstructor;
        default: number;
    };
    steps: {
        type: PropType<Step[]>;
        default: () => never[];
        required: true;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    vertical: {
        type: BooleanConstructor;
        default: boolean;
    };
    navigationDisabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    controlsHidden: {
        type: BooleanConstructor;
        default: boolean;
    };
    nextDisabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    finishButtonHidden: {
        type: BooleanConstructor;
        default: boolean;
    };
    stateful: {
        type: PropType<boolean>;
        default: boolean;
    };
}, {
    isNextStepDisabled: (index: number) => boolean;
    stepperColor: string;
    getColor: (prop?: string | undefined, defaultColor?: string | undefined, preferVariables?: boolean | undefined) => string;
    stepControls: StepControls;
    getIterableSlotData: (step: Step, index: number) => {
        step: Step;
        isActive: boolean;
        isCompleted: boolean;
        setStep: (index: number) => void;
        nextStep: (stepsToSkip?: number | undefined) => void;
        prevStep: (stepsToSkip?: number | undefined) => void;
    };
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "finish")[], "finish" | "update:modelValue", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    modelValue: {
        type: NumberConstructor;
        default: number;
    };
    steps: {
        type: PropType<Step[]>;
        default: () => never[];
        required: true;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    vertical: {
        type: BooleanConstructor;
        default: boolean;
    };
    navigationDisabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    controlsHidden: {
        type: BooleanConstructor;
        default: boolean;
    };
    nextDisabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    finishButtonHidden: {
        type: BooleanConstructor;
        default: boolean;
    };
    stateful: {
        type: PropType<boolean>;
        default: boolean;
    };
}>> & {
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    onFinish?: ((...args: any[]) => any) | undefined;
}, {
    color: string;
    vertical: boolean;
    modelValue: number;
    stateful: boolean;
    steps: Step[];
    nextDisabled: boolean;
    finishButtonHidden: boolean;
    navigationDisabled: boolean;
    controlsHidden: boolean;
}>;
export default _default;
