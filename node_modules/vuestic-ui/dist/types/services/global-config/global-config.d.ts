import { GlobalConfig, GlobalConfigUpdater, PartialGlobalConfig, ProvidedGlobalConfig } from './types';
export declare const GLOBAL_CONFIG: unique symbol;
export declare const createGlobalConfig: () => {
    getGlobalConfig: () => GlobalConfig;
    setGlobalConfig: (updater: GlobalConfig | GlobalConfigUpdater<GlobalConfig>) => void;
    mergeGlobalConfig: (updater: PartialGlobalConfig | GlobalConfigUpdater<PartialGlobalConfig>) => void;
    globalConfig: import("vue").Ref<{
        colors: {
            variables: {
                [x: string]: string;
                primary: string;
                secondary: string;
                success: string;
                info: string;
                danger: string;
                warning: string;
                backgroundPrimary: string;
                backgroundSecondary: string;
                backgroundElement: string;
                backgroundBorder: string;
                textPrimary: string;
                textInverted: string;
                shadow: string;
                focus: string;
            };
            threshold: number;
            presets: {
                [x: string]: {
                    [x: string]: string;
                    primary: string;
                    secondary: string;
                    success: string;
                    info: string;
                    danger: string;
                    warning: string;
                    backgroundPrimary: string;
                    backgroundSecondary: string;
                    backgroundElement: string;
                    backgroundBorder: string;
                    textPrimary: string;
                    textInverted: string;
                    shadow: string;
                    focus: string;
                };
                light: {
                    [x: string]: string;
                    primary: string;
                    secondary: string;
                    success: string;
                    info: string;
                    danger: string;
                    warning: string;
                    backgroundPrimary: string;
                    backgroundSecondary: string;
                    backgroundElement: string;
                    backgroundBorder: string;
                    textPrimary: string;
                    textInverted: string;
                    shadow: string;
                    focus: string;
                };
                dark: {
                    [x: string]: string;
                    primary: string;
                    secondary: string;
                    success: string;
                    info: string;
                    danger: string;
                    warning: string;
                    backgroundPrimary: string;
                    backgroundSecondary: string;
                    backgroundElement: string;
                    backgroundBorder: string;
                    textPrimary: string;
                    textInverted: string;
                    shadow: string;
                    focus: string;
                };
            };
            currentPresetName: string;
        };
        icons: ({
            name: string;
            resolve?: ((dynamicSegments: {
                [dynamicSegment: string]: string;
            }) => import("../icon").IconProps) | undefined;
            attrs?: Record<string, string | ((...args: any[]) => unknown)> | undefined;
            component?: any;
            content?: string | undefined;
            class?: string | undefined;
            tag?: string | undefined;
            color?: string | undefined;
            rotation?: string | number | undefined;
            spin?: boolean | "clockwise" | "counter-clockwise" | undefined;
            to?: string | undefined;
        } | {
            name: {
                exec: (string: string) => RegExpExecArray | null;
                test: (string: string) => boolean;
                readonly source: string;
                readonly global: boolean;
                readonly ignoreCase: boolean;
                readonly multiline: boolean;
                lastIndex: number;
                compile: (pattern: string, flags?: string | undefined) => RegExp;
                readonly flags: string;
                readonly sticky: boolean;
                readonly unicode: boolean;
                readonly dotAll: boolean;
                [Symbol.match]: (string: string) => RegExpMatchArray | null;
                [Symbol.replace]: {
                    (string: string, replaceValue: string): string;
                    (string: string, replacer: (substring: string, ...args: any[]) => string): string;
                };
                [Symbol.search]: (string: string) => number;
                [Symbol.split]: (string: string, limit?: number | undefined) => string[];
                [Symbol.matchAll]: (str: string) => IterableIterator<RegExpMatchArray>;
            };
            resolveFromRegex?: ((...regexGroupValues: string[]) => import("../icon").IconProps) | undefined;
            attrs?: Record<string, string | ((...args: any[]) => unknown)> | undefined;
            component?: any;
            content?: string | undefined;
            class?: string | undefined;
            tag?: string | undefined;
            color?: string | undefined;
            rotation?: string | number | undefined;
            spin?: boolean | "clockwise" | "counter-clockwise" | undefined;
            to?: string | undefined;
        })[];
        components: {
            [x: string]: {} | undefined;
            all?: import("../component-config").Props | undefined;
            presets?: import("../component-config").Presets | undefined;
        };
        breakpoint: {
            enabled: boolean;
            bodyClass: boolean;
            thresholds: {
                xs: number;
                sm: number;
                md: number;
                lg: number;
                xl: number;
            };
        };
        i18n: {
            search: string;
            noOptions: string;
            ok: string;
            cancel: string;
            uploadFile: string;
            undo: string;
            dropzone: string;
            fileDeleted: string;
            closeAlert: string;
            backToTop: string;
            toggleDropdown: string;
            carousel: string;
            goPreviousSlide: string;
            goNextSlide: string;
            goSlide: string;
            slideOf: string;
            close: string;
            openColorPicker: string;
            colorSelection: string;
            colorName: string;
            decreaseCounter: string;
            increaseCounter: string;
            selectAllRows: string;
            sortColumnBy: string;
            selectRowByIndex: string;
            resetDate: string;
            nextPeriod: string;
            switchView: string;
            previousPeriod: string;
            removeFile: string;
            reset: string;
            pagination: string;
            goToTheFirstPage: string;
            goToPreviousPage: string;
            goToSpecificPage: string;
            goToSpecificPageInput: string;
            goNextPage: string;
            goLastPage: string;
            currentRating: string;
            voteRating: string;
            optionsFilter: string;
            splitPanels: string;
            movePaginationLeft: string;
            movePaginationRight: string;
            resetTime: string;
            closeToast: string;
            selectedOption: string;
            noSelectedOption: string;
            breadcrumbs: string;
            counterValue: string;
            selectedDate: string;
            selectedTime: string;
            progressState: string;
            color: string;
            next: string;
            back: string;
            finish: string;
        };
        colorsClasses: {
            prefix?: string | undefined;
            postfix?: string | undefined;
            property?: string | string[] | undefined;
            value?: string | undefined;
        }[];
    }>;
};
/** Use this function if you don't want to throw error if hook used outside setup function by useGlobalConfig */
export declare function useGlobalConfig(): ProvidedGlobalConfig;
export * from './types';
