import { defineComponent, shallowRef, computed, resolveComponent, openBlock, createElementBlock, createVNode, withCtx, withKeys, withDirectives, createElementVNode, vModelText } from "vue";
import { u as useComponentPresetProp } from "../../composables/useComponentPreset.js";
import { u as useStatefulEmits, a as useStatefulProps, b as useStateful } from "../../composables/useStateful.js";
import { u as useTranslation } from "../../composables/useTranslation.js";
import { V as VaColorIndicator } from "../va-color-indicator/index.js";
import { V as VaInput } from "../va-input/index.js";
import { _ as _export_sfc } from "../../../plugin-vue_export-helper.js";
var _style_0 = ".va-color-input {\n  display: flex;\n  align-items: center !important;\n}\n.va-color-input .form-group {\n  margin-bottom: 0;\n}\n.va-color-input__input {\n  margin-bottom: 0;\n  margin-left: 0.25rem;\n  min-width: 5.6rem;\n}\n.va-color-input__input__pointer {\n  cursor: pointer;\n}\n.va-color-input__hidden-input {\n  visibility: hidden;\n  width: 0;\n  height: 0;\n  overflow: hidden;\n  position: absolute;\n  pointer-events: none;\n}";
const _sfc_main = defineComponent({
  name: "VaColorInput",
  components: {
    VaInput,
    VaColorIndicator
  },
  emits: useStatefulEmits,
  props: {
    ...useStatefulProps,
    ...useComponentPresetProp,
    modelValue: { type: String, default: null },
    disabled: { type: Boolean, default: false },
    indicator: {
      type: String,
      default: "dot",
      validator: (value) => ["dot", "square"].includes(value)
    }
  },
  setup: (props, { emit }) => {
    const colorPicker = shallowRef();
    const { valueComputed } = useStateful(props, emit);
    const callPickerDialog = () => {
      var _a;
      return !props.disabled && ((_a = colorPicker.value) == null ? void 0 : _a.click());
    };
    const tabIndexComputed = computed(() => props.disabled ? -1 : 0);
    return {
      ...useTranslation(),
      valueComputed,
      callPickerDialog,
      colorPicker,
      tabIndexComputed
    };
  }
});
const _hoisted_1 = { class: "va-color-input" };
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_va_color_indicator = resolveComponent("va-color-indicator");
  const _component_va_input = resolveComponent("va-input");
  return openBlock(), createElementBlock("div", _hoisted_1, [
    createVNode(_component_va_input, {
      class: "va-color-input__input",
      placeholder: "input color",
      modelValue: _ctx.valueComputed,
      "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => _ctx.valueComputed = $event),
      tabindex: _ctx.tabIndexComputed,
      disabled: _ctx.$props.disabled
    }, {
      appendInner: withCtx(() => [
        createVNode(_component_va_color_indicator, {
          class: "va-color-input__dot",
          role: "button",
          "aria-label": _ctx.t("openColorPicker"),
          "aria-disabled": _ctx.$props.disabled,
          tabindex: _ctx.tabIndexComputed,
          color: _ctx.valueComputed,
          indicator: _ctx.$props.indicator,
          onClick: _ctx.callPickerDialog,
          onKeydown: [
            withKeys(_ctx.callPickerDialog, ["space"]),
            withKeys(_ctx.callPickerDialog, ["enter"])
          ]
        }, null, 8, ["aria-label", "aria-disabled", "tabindex", "color", "indicator", "onClick", "onKeydown"])
      ]),
      _: 1
    }, 8, ["modelValue", "tabindex", "disabled"]),
    withDirectives(createElementVNode("input", {
      ref: "colorPicker",
      type: "color",
      class: "va-color-input__hidden-input",
      "aria-hidden": "true",
      tabindex: "-1",
      "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => _ctx.valueComputed = $event)
    }, null, 512), [
      [vModelText, _ctx.valueComputed]
    ])
  ]);
}
var _VaColorInput = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["styles", [...(      VaInput.styles || []), ...(    VaColorIndicator  .styles || []), _style_0]]]);
export { _VaColorInput as _ };
//# sourceMappingURL=VaColorInput.js.map
