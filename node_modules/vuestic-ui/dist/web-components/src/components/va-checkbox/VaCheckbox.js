import { defineComponent, shallowRef, computed, resolveComponent, openBlock, createBlock, normalizeClass, withCtx, createElementVNode, normalizeStyle, withModifiers, mergeProps, toHandlers, withDirectives, createVNode, vShow, createElementBlock, renderSlot, createTextVNode, toDisplayString, createCommentVNode } from "vue";
import { g as generateUniqueId } from "../../utils/uuid.js";
import { u as useColors } from "../../composables/useColors.js";
import { u as useComponentPresetProp } from "../../composables/useComponentPreset.js";
import { u as useKeyboardOnlyFocus } from "../../composables/useKeyboardOnlyFocus.js";
import { u as useSelectableEmits, a as useSelectableProps, b as useSelectable } from "../../composables/useSelectable.js";
import { u as useTextColor } from "../../composables/useTextColor.js";
import { V as VaIcon } from "../va-icon/index.js";
import { _ as _export_sfc } from "../../../plugin-vue_export-helper.js";
import { V as VaMessageListWrapper } from "../va-input/components/VaMessageListWrapper.js";
var _style_0 = ":root,\n:host {\n  --va-checkbox-display: inline-block;\n  --va-checkbox-input-padding: 0;\n  --va-checkbox-input-cursor: pointer;\n  --va-checkbox-disabled-cursor: default;\n  --va-checkbox-readonly-cursor: initial;\n  --va-checkbox-label-display: inline-block;\n  --va-checkbox-font-size: 15px;\n  --va-checkbox-line-height: 20px;\n  /* Square */\n  --va-checkbox-square-width: 1.35rem;\n  --va-checkbox-square-min-width: 1.35rem;\n  --va-checkbox-square-height: 1.35rem;\n  --va-checkbox-square-background-color: var(--va-background-element);\n  --va-checkbox-square-border: solid 0.125rem var(--va-background-border);\n  --va-checkbox-square-border-radius: 0.25rem;\n}\n.va-checkbox {\n  display: var(--va-checkbox-display);\n  max-width: -moz-fit-content;\n  max-width: fit-content;\n  font-family: var(--va-font-family);\n}\n.va-checkbox__input-container {\n  align-items: center;\n  display: flex;\n  padding: var(--va-checkbox-input-padding);\n  cursor: var(--va-checkbox-input-cursor);\n  font-size: var(--va-checkbox-font-size);\n  line-height: var(--va-checkbox-line-height);\n}\n.va-checkbox--disabled .va-checkbox__input-container {\n  cursor: default;\n  opacity: 0.4;\n  pointer-events: none;\n  -webkit-user-select: none;\n     -moz-user-select: none;\n          user-select: none;\n  cursor: var(--va-checkbox-disabled-cursor);\n}\n.va-checkbox--readonly .va-checkbox__input-container {\n  cursor: var(--va-checkbox-readonly-cursor);\n}\n.va-checkbox--left-label .va-checkbox__input-container {\n  flex-direction: row-reverse;\n}\n.va-checkbox .va-checkbox__square {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: var(--va-checkbox-square-width);\n  min-width: var(--va-checkbox-square-min-width);\n  height: var(--va-checkbox-square-height);\n  position: relative;\n  background-color: var(--va-checkbox-square-background-color);\n  border: var(--va-checkbox-square-border, var(--va-control-border));\n  border-radius: var(--va-checkbox-square-border-radius);\n}\n.va-checkbox--on-keyboard-focus.va-checkbox .va-checkbox__square {\n  transition: all, 0.6s, ease-in;\n  outline: 2px solid var(--va-focus);\n}\n.va-checkbox__input {\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  margin: -1px;\n  border: 0;\n  padding: 0;\n  white-space: nowrap;\n  -webkit-clip-path: inset(100%);\n          clip-path: inset(100%);\n  clip: rect(0 0 0 0);\n  overflow: hidden;\n}\n.va-checkbox__label {\n  display: var(--va-checkbox-label-display);\n  position: relative;\n}\n.va-checkbox__icon {\n  pointer-events: none;\n  position: absolute;\n}\n.va-checkbox--selected .va-checkbox__icon {\n  color: var(--va-checkbox-selected-icon-color);\n}\n.va-checkbox--indeterminate .va-checkbox__icon {\n  color: var(--va-checkbox-indeterminate-icon-color);\n}";
const VaCheckboxValueType = [Boolean, Array, String, Object];
const _sfc_main = defineComponent({
  name: "VaCheckbox",
  components: { VaMessageListWrapper, VaIcon },
  emits: useSelectableEmits,
  props: {
    ...useSelectableProps,
    ...useComponentPresetProp,
    modelValue: { type: VaCheckboxValueType, default: false },
    color: { type: String, default: "primary" },
    checkedIcon: { type: String, default: "va-check" },
    indeterminate: { type: Boolean, default: false },
    indeterminateValue: { type: VaCheckboxValueType, default: null },
    indeterminateIcon: { type: String, default: "remove" },
    id: { type: String, default: "" },
    name: { type: String, default: "" },
    ariaLabel: { type: String, default: void 0 }
  },
  setup(props, { emit }) {
    const elements = {
      container: shallowRef(),
      input: shallowRef(),
      label: shallowRef()
    };
    const {
      isChecked,
      computedError,
      isIndeterminate,
      computedErrorMessages,
      validationAriaAttributes,
      toggleSelection,
      onBlur,
      onFocus
    } = useSelectable(props, emit, elements);
    const { getColor } = useColors();
    const { hasKeyboardFocus, keyboardFocusListeners } = useKeyboardOnlyFocus();
    const { textColorComputed } = useTextColor();
    const isActive = computed(() => isChecked.value || isIndeterminate.value);
    const computedClass = computed(() => ({
      "va-checkbox--selected": isChecked.value,
      "va-checkbox--readonly": props.readonly,
      "va-checkbox--disabled": props.disabled,
      "va-checkbox--indeterminate": props.indeterminate,
      "va-checkbox--error": computedError.value,
      "va-checkbox--left-label": props.leftLabel,
      "va-checkbox--on-keyboard-focus": hasKeyboardFocus.value
    }));
    const labelStyle = computed(() => {
      return {
        color: computedError.value ? getColor("danger") : "",
        padding: !props.label ? "" : props.leftLabel ? "0 0.5rem 0 0" : "0 0 0 0.5rem"
      };
    });
    const inputStyle = computed(() => {
      const style = {
        background: isActive.value ? getColor(props.color) : "",
        borderColor: isActive.value ? getColor(props.color) : ""
      };
      if (computedError.value) {
        style.borderColor = getColor("danger");
      }
      return style;
    });
    const computedIconName = computed(
      () => props.indeterminate && isIndeterminate.value ? props.indeterminateIcon : props.checkedIcon
    );
    const uniqueId = computed(generateUniqueId);
    const computedId = computed(() => props.id || uniqueId.value);
    const computedName = computed(() => props.name || uniqueId.value);
    const inputAttributesComputed = computed(() => ({
      name: computedName.value,
      disabled: props.disabled,
      readonly: props.readonly,
      tabindex: props.disabled ? -1 : 0,
      "aria-label": props.ariaLabel,
      "aria-disabled": props.disabled,
      "aria-readOnly": props.readonly,
      "aria-checked": isActive.value,
      ...validationAriaAttributes.value
    }));
    return {
      isActive,
      computedClass,
      labelStyle,
      inputStyle,
      computedIconName,
      textColorComputed,
      computedError,
      computedErrorMessages,
      keyboardFocusListeners,
      toggleSelection,
      onBlur,
      onFocus,
      inputAttributesComputed,
      computedId,
      computedName
    };
  }
});
const _hoisted_1 = ["id", "indeterminate", "value", "checked"];
const _hoisted_2 = ["for"];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_va_icon = resolveComponent("va-icon");
  const _component_VaMessageListWrapper = resolveComponent("VaMessageListWrapper");
  return openBlock(), createBlock(_component_VaMessageListWrapper, {
    class: normalizeClass(["va-checkbox", _ctx.computedClass]),
    disabled: _ctx.disabled,
    success: _ctx.success,
    messages: _ctx.messages,
    error: _ctx.computedError,
    "error-messages": _ctx.computedErrorMessages,
    "error-count": _ctx.errorCount
  }, {
    default: withCtx(() => [
      createElementVNode("div", {
        ref: "container",
        class: "va-checkbox__input-container",
        onClick: _cache[6] || (_cache[6] = (...args) => _ctx.toggleSelection && _ctx.toggleSelection(...args)),
        onBlur: _cache[7] || (_cache[7] = (...args) => _ctx.onBlur && _ctx.onBlur(...args))
      }, [
        createElementVNode("div", {
          class: "va-checkbox__square",
          style: normalizeStyle(_ctx.inputStyle),
          onSelectstart: _cache[4] || (_cache[4] = withModifiers(() => {
          }, ["prevent"]))
        }, [
          createElementVNode("input", mergeProps({
            ref: "input",
            type: "checkbox",
            class: "va-checkbox__input",
            id: _ctx.computedId,
            indeterminate: _ctx.indeterminate,
            value: _ctx.label,
            checked: _ctx.isActive
          }, _ctx.inputAttributesComputed, toHandlers(_ctx.keyboardFocusListeners), {
            onFocus: _cache[0] || (_cache[0] = (...args) => _ctx.onFocus && _ctx.onFocus(...args)),
            onBlur: _cache[1] || (_cache[1] = (...args) => _ctx.onBlur && _ctx.onBlur(...args)),
            onClick: _cache[2] || (_cache[2] = withModifiers(() => {
            }, ["stop", "prevent"])),
            onKeypress: _cache[3] || (_cache[3] = withModifiers((...args) => _ctx.toggleSelection && _ctx.toggleSelection(...args), ["prevent"]))
          }), null, 16, _hoisted_1),
          withDirectives(createVNode(_component_va_icon, {
            class: "va-checkbox__icon",
            size: "20px",
            name: _ctx.computedIconName,
            color: _ctx.textColorComputed
          }, null, 8, ["name", "color"]), [
            [vShow, _ctx.isActive]
          ])
        ], 36),
        _ctx.label || _ctx.$slots.label ? (openBlock(), createElementBlock("label", {
          key: 0,
          ref: "label",
          class: "va-checkbox__label",
          for: _ctx.computedId,
          style: normalizeStyle(_ctx.labelStyle),
          onBlur: _cache[5] || (_cache[5] = (...args) => _ctx.onBlur && _ctx.onBlur(...args))
        }, [
          renderSlot(_ctx.$slots, "label", {}, () => [
            createTextVNode(toDisplayString(_ctx.label), 1)
          ])
        ], 44, _hoisted_2)) : createCommentVNode("", true)
      ], 544)
    ]),
    _: 3
  }, 8, ["class", "disabled", "success", "messages", "error", "error-messages", "error-count"]);
}
var _VaCheckbox = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["styles", [...(   VaMessageListWrapper.styles || []), ...( VaIcon .styles || []), _style_0]]]);
export { _VaCheckbox as _ };
//# sourceMappingURL=VaCheckbox.js.map
