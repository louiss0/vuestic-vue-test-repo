declare const _default: import("vue").DefineComponent<{
    nodes: {
        type: import("vue").PropType<import("./types").TreeNode[]>;
        default: never[];
    };
    stateful: {
        type: BooleanConstructor;
        default: boolean;
    };
    selectable: {
        type: BooleanConstructor;
        default: boolean;
    };
    selectionType: {
        type: StringConstructor;
        default: string;
        validator: (v: string) => boolean;
    };
    valueBy: {
        type: import("vue").PropType<import("./types").TreeViewPropKey>;
        default: string;
    };
    textBy: {
        type: import("vue").PropType<import("./types").TreeViewPropKey>;
        default: string;
    };
    trackBy: {
        type: import("vue").PropType<import("./types").TreeViewPropKey>;
        default: string;
    };
    iconBy: {
        type: import("vue").PropType<import("./types").TreeViewPropKey>;
        default: string;
    };
    disabledBy: {
        type: import("vue").PropType<import("./types").TreeViewPropKey>;
        default: string;
    };
    expandedBy: {
        type: import("vue").PropType<import("./types").TreeViewPropKey>;
        default: string;
    };
    checkedBy: {
        type: import("vue").PropType<import("./types").TreeViewPropKey>;
        default: string;
    };
    expandAll: {
        type: BooleanConstructor;
        default: boolean;
    };
    expanded: {
        type: import("vue").PropType<(string | number | import("./types").TreeNode)[]>;
        default: never[];
    };
    expandNodeBy: {
        type: import("vue").PropType<"leaf" | "node">;
        default: string;
    };
    filter: {
        type: StringConstructor;
        default: string;
    };
    filterMethod: {
        type: import("vue").PropType<import("./types").TreeViewFilterMethod | undefined>;
        default: undefined;
    };
    checked: {
        type: import("vue").PropType<(string | number | import("./types").TreeNode)[]>;
        default: never[];
    };
    color: {
        type: StringConstructor;
        default: string;
    };
}, {
    treeItems: import("vue").ComputedRef<import("./types").TreeNode[]>;
    getTrackBy: (node: import("./types").TreeNode) => string | number;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, string[], string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    nodes: {
        type: import("vue").PropType<import("./types").TreeNode[]>;
        default: never[];
    };
    stateful: {
        type: BooleanConstructor;
        default: boolean;
    };
    selectable: {
        type: BooleanConstructor;
        default: boolean;
    };
    selectionType: {
        type: StringConstructor;
        default: string;
        validator: (v: string) => boolean;
    };
    valueBy: {
        type: import("vue").PropType<import("./types").TreeViewPropKey>;
        default: string;
    };
    textBy: {
        type: import("vue").PropType<import("./types").TreeViewPropKey>;
        default: string;
    };
    trackBy: {
        type: import("vue").PropType<import("./types").TreeViewPropKey>;
        default: string;
    };
    iconBy: {
        type: import("vue").PropType<import("./types").TreeViewPropKey>;
        default: string;
    };
    disabledBy: {
        type: import("vue").PropType<import("./types").TreeViewPropKey>;
        default: string;
    };
    expandedBy: {
        type: import("vue").PropType<import("./types").TreeViewPropKey>;
        default: string;
    };
    checkedBy: {
        type: import("vue").PropType<import("./types").TreeViewPropKey>;
        default: string;
    };
    expandAll: {
        type: BooleanConstructor;
        default: boolean;
    };
    expanded: {
        type: import("vue").PropType<(string | number | import("./types").TreeNode)[]>;
        default: never[];
    };
    expandNodeBy: {
        type: import("vue").PropType<"leaf" | "node">;
        default: string;
    };
    filter: {
        type: StringConstructor;
        default: string;
    };
    filterMethod: {
        type: import("vue").PropType<import("./types").TreeViewFilterMethod | undefined>;
        default: undefined;
    };
    checked: {
        type: import("vue").PropType<(string | number | import("./types").TreeNode)[]>;
        default: never[];
    };
    color: {
        type: StringConstructor;
        default: string;
    };
}>> & {
    [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
}, {
    filter: string;
    color: string;
    stateful: boolean;
    expanded: (string | number | import("./types").TreeNode)[];
    textBy: import("./types").TreeViewPropKey;
    valueBy: import("./types").TreeViewPropKey;
    trackBy: import("./types").TreeViewPropKey;
    disabledBy: import("./types").TreeViewPropKey;
    checked: (string | number | import("./types").TreeNode)[];
    selectable: boolean;
    filterMethod: import("./types").TreeViewFilterMethod | undefined;
    nodes: import("./types").TreeNode[];
    selectionType: string;
    iconBy: import("./types").TreeViewPropKey;
    expandedBy: import("./types").TreeViewPropKey;
    checkedBy: import("./types").TreeViewPropKey;
    expandAll: boolean;
    expandNodeBy: "leaf" | "node";
}>;
export default _default;
