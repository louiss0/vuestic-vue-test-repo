declare const _default: {
    name: string;
    components: {
        VaForm: import("vue").DefineComponent<{
            autofocus: {
                type: BooleanConstructor;
                default: boolean;
            };
            tag: {
                type: StringConstructor;
                default: string;
            };
            preset: {
                type: StringConstructor;
                default: undefined;
            };
        }, import("./consts").Form, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "validation"[], "validation", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            autofocus: {
                type: BooleanConstructor;
                default: boolean;
            };
            tag: {
                type: StringConstructor;
                default: string;
            };
            preset: {
                type: StringConstructor;
                default: undefined;
            };
        }>> & {
            onValidation?: ((...args: any[]) => any) | undefined;
        }, {
            tag: string;
            preset: string;
            autofocus: boolean;
        }>;
        VaCheckbox: import("vue").DefineComponent<{
            modelValue: {
                type: import("vue").PropType<string | number | boolean | unknown[] | Record<any, unknown> | null>;
                default: boolean;
            };
            color: {
                type: StringConstructor;
                default: string;
            };
            checkedIcon: {
                type: StringConstructor;
                default: string;
            };
            indeterminate: {
                type: BooleanConstructor;
                default: boolean;
            };
            indeterminateValue: {
                type: import("vue").PropType<string | number | boolean | unknown[] | Record<any, unknown> | null>;
                default: null;
            };
            indeterminateIcon: {
                type: StringConstructor;
                default: string;
            };
            id: {
                type: StringConstructor;
                default: string;
            };
            name: {
                type: StringConstructor;
                default: string;
            };
            ariaLabel: {
                type: StringConstructor;
                default: undefined;
            };
            preset: {
                type: StringConstructor;
                default: undefined;
            };
            arrayValue: {
                type: (ObjectConstructor | StringConstructor | BooleanConstructor | NumberConstructor)[];
                default: undefined;
            };
            label: {
                type: StringConstructor;
                default: string;
            };
            leftLabel: {
                type: BooleanConstructor;
                default: boolean;
            };
            trueValue: {
                type: import("vue").PropType<unknown>;
                default: boolean;
            };
            falseValue: {
                type: import("vue").PropType<unknown>;
                default: boolean;
            };
            disabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            readonly: {
                type: BooleanConstructor;
                default: boolean;
            };
            error: {
                type: BooleanConstructor;
                default: undefined;
            };
            errorMessages: {
                type: import("vue").PropType<string | string[]>;
                default: undefined;
            };
            errorCount: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            rules: {
                type: import("vue").PropType<import("../../composables").ValidationRule<any>[]>;
                default: () => any;
            };
            success: {
                type: BooleanConstructor;
                default: boolean;
            };
            messages: {
                type: import("vue").PropType<string | string[]>;
                default: () => never[];
            };
            immediateValidation: {
                type: BooleanConstructor;
                default: boolean;
            };
            loading: {
                type: BooleanConstructor;
                default: boolean;
            };
            stateful: {
                type: import("vue").PropType<boolean>;
                default: boolean;
            };
        }, {
            isActive: import("vue").ComputedRef<boolean>;
            computedClass: import("vue").ComputedRef<{
                'va-checkbox--selected': boolean;
                'va-checkbox--readonly': boolean;
                'va-checkbox--disabled': boolean;
                'va-checkbox--indeterminate': boolean;
                'va-checkbox--error': boolean;
                'va-checkbox--left-label': boolean;
                'va-checkbox--on-keyboard-focus': boolean;
            }>;
            labelStyle: import("vue").ComputedRef<{
                color: string;
                padding: string;
            }>;
            inputStyle: import("vue").ComputedRef<{
                background: string;
                borderColor: string;
            }>;
            computedIconName: import("vue").ComputedRef<string>;
            textColorComputed: import("vue").ComputedRef<string>;
            computedError: import("vue").WritableComputedRef<boolean>;
            computedErrorMessages: import("vue").WritableComputedRef<string[]>;
            keyboardFocusListeners: {
                mousedown: () => void;
                focus: () => void;
                blur: () => void;
            };
            toggleSelection: () => void;
            onBlur: (event: FocusEvent) => void;
            onFocus: (event: FocusEvent) => void;
            inputAttributesComputed: import("vue").ComputedRef<{
                'aria-invalid': boolean;
                'aria-errormessage': string;
                name: string;
                disabled: boolean;
                readonly: boolean;
                tabindex: number;
                'aria-label': string | undefined;
                'aria-disabled': boolean;
                'aria-readOnly': boolean;
                'aria-checked': boolean;
            }>;
            computedId: import("vue").ComputedRef<string>;
            computedName: import("vue").ComputedRef<string>;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, string[], string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            modelValue: {
                type: import("vue").PropType<string | number | boolean | unknown[] | Record<any, unknown> | null>;
                default: boolean;
            };
            color: {
                type: StringConstructor;
                default: string;
            };
            checkedIcon: {
                type: StringConstructor;
                default: string;
            };
            indeterminate: {
                type: BooleanConstructor;
                default: boolean;
            };
            indeterminateValue: {
                type: import("vue").PropType<string | number | boolean | unknown[] | Record<any, unknown> | null>;
                default: null;
            };
            indeterminateIcon: {
                type: StringConstructor;
                default: string;
            };
            id: {
                type: StringConstructor;
                default: string;
            };
            name: {
                type: StringConstructor;
                default: string;
            };
            ariaLabel: {
                type: StringConstructor;
                default: undefined;
            };
            preset: {
                type: StringConstructor;
                default: undefined;
            };
            arrayValue: {
                type: (ObjectConstructor | StringConstructor | BooleanConstructor | NumberConstructor)[];
                default: undefined;
            };
            label: {
                type: StringConstructor;
                default: string;
            };
            leftLabel: {
                type: BooleanConstructor;
                default: boolean;
            };
            trueValue: {
                type: import("vue").PropType<unknown>;
                default: boolean;
            };
            falseValue: {
                type: import("vue").PropType<unknown>;
                default: boolean;
            };
            disabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            readonly: {
                type: BooleanConstructor;
                default: boolean;
            };
            error: {
                type: BooleanConstructor;
                default: undefined;
            };
            errorMessages: {
                type: import("vue").PropType<string | string[]>;
                default: undefined;
            };
            errorCount: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            rules: {
                type: import("vue").PropType<import("../../composables").ValidationRule<any>[]>;
                default: () => any;
            };
            success: {
                type: BooleanConstructor;
                default: boolean;
            };
            messages: {
                type: import("vue").PropType<string | string[]>;
                default: () => never[];
            };
            immediateValidation: {
                type: BooleanConstructor;
                default: boolean;
            };
            loading: {
                type: BooleanConstructor;
                default: boolean;
            };
            stateful: {
                type: import("vue").PropType<boolean>;
                default: boolean;
            };
        }>> & {
            [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
        }, {
            readonly: boolean;
            label: string;
            success: boolean;
            name: string;
            color: string;
            preset: string;
            modelValue: string | number | boolean | unknown[] | Record<any, unknown> | null;
            indeterminate: boolean;
            disabled: boolean;
            loading: boolean;
            stateful: boolean;
            id: string;
            error: boolean;
            ariaLabel: string;
            errorMessages: string | string[];
            errorCount: string | number;
            rules: import("../../composables").ValidationRule<any>[];
            messages: string | string[];
            immediateValidation: boolean;
            arrayValue: string | number | boolean | Record<string, any>;
            leftLabel: boolean;
            trueValue: boolean;
            falseValue: boolean;
            indeterminateValue: string | number | boolean | unknown[] | Record<any, unknown> | null;
            checkedIcon: string;
            indeterminateIcon: string;
        }>;
        VaInput: import("vue").DefineComponent<{
            placeholder: {
                type: StringConstructor;
                default: string;
            };
            tabindex: {
                type: NumberConstructor;
                default: number;
            };
            modelValue: {
                type: (StringConstructor | NumberConstructor)[];
                default: string;
            };
            label: {
                type: StringConstructor;
                default: string;
            };
            type: {
                type: import("vue").PropType<"textarea" | "text" | "password" | (string & Record<never, never>)>;
                default: string;
            };
            loading: {
                type: BooleanConstructor;
                default: boolean;
            };
            inputClass: {
                type: StringConstructor;
                default: string;
            };
            pattern: {
                type: StringConstructor;
            };
            inputmode: {
                type: StringConstructor;
                default: string;
            };
            ariaLabel: {
                type: StringConstructor;
                default: undefined;
            };
            counter: {
                type: BooleanConstructor;
                default: boolean;
            };
            maxLength: {
                type: NumberConstructor;
                default: undefined;
            };
            color: {
                type: StringConstructor;
                default: string;
            };
            background: {
                type: StringConstructor;
                default: string;
            };
            outline: {
                type: BooleanConstructor;
                default: boolean;
            };
            bordered: {
                type: BooleanConstructor;
                default: boolean;
            };
            requiredMark: {
                type: BooleanConstructor;
                default: boolean;
            };
            preset: {
                type: StringConstructor;
                default: undefined;
            };
            readonly: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            disabled: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            autosize: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            minRows: {
                type: import("vue").PropType<number>;
                required: true;
                default: number;
            };
            maxRows: {
                type: import("vue").PropType<number | undefined>;
                required: false;
                default: undefined;
            };
            mask: {
                type: import("vue").PropType<string | Record<string, number[]> | import("cleave.js/options").CleaveOptions>;
                default: string;
            };
            returnRaw: {
                type: BooleanConstructor;
                default: boolean;
            };
            clearable: {
                type: BooleanConstructor;
                default: boolean;
            };
            clearableIcon: {
                type: StringConstructor;
                default: string;
            };
            clearValue: {
                type: StringConstructor;
                default: string;
            };
            error: {
                type: BooleanConstructor;
                default: undefined;
            };
            errorMessages: {
                type: import("vue").PropType<string | string[]>;
                default: undefined;
            };
            errorCount: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            rules: {
                type: import("vue").PropType<import("../../composables").ValidationRule<any>[]>;
                default: () => any;
            } & {
                type: import("vue").PropType<import("../../composables").ValidationRule<string>[]>;
            };
            success: {
                type: BooleanConstructor;
                default: boolean;
            };
            messages: {
                type: import("vue").PropType<string | string[]>;
                default: () => never[];
            };
            immediateValidation: {
                type: BooleanConstructor;
                default: boolean;
            };
        }, {
            input: import("vue").ShallowRef<HTMLInputElement | import("vue").DefineComponent<{
                modelValue: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: string;
                };
                placeholder: {
                    type: StringConstructor;
                };
                autosize: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                minRows: {
                    type: NumberConstructor;
                    default: number;
                    validator: (val: number) => boolean;
                };
                maxRows: {
                    type: NumberConstructor;
                    validator: (val: number) => boolean;
                };
                disabled: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                readonly: {
                    type: BooleanConstructor;
                    default: boolean;
                };
            }, {
                textarea: import("vue").ShallowRef<HTMLTextAreaElement | undefined>;
                computedStyle: import("vue").ComputedRef<import("vue").CSSProperties>;
                listeners: Record<string, any>;
                computedProps: import("vue").ComputedRef<{
                    [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
                    readonly?: boolean | undefined;
                    modelValue?: string | number | undefined;
                    disabled?: boolean | undefined;
                    placeholder?: string | undefined;
                    autosize?: boolean | undefined;
                    minRows?: number | undefined;
                    maxRows?: number | undefined;
                }>;
                focus: () => void;
                blur: () => void;
            }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, string[], string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
                modelValue: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: string;
                };
                placeholder: {
                    type: StringConstructor;
                };
                autosize: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                minRows: {
                    type: NumberConstructor;
                    default: number;
                    validator: (val: number) => boolean;
                };
                maxRows: {
                    type: NumberConstructor;
                    validator: (val: number) => boolean;
                };
                disabled: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                readonly: {
                    type: BooleanConstructor;
                    default: boolean;
                };
            }>> & {
                [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
            }, {
                readonly: boolean;
                modelValue: string | number;
                disabled: boolean;
                autosize: boolean;
                minRows: number;
            }> | undefined>;
            inputEvents: {
                onFocus: (e: Event) => void;
                onBlur: (e: Event) => void;
                onInput: (event: Event) => void;
            };
            valueLengthComputed: import("vue").ComputedRef<number | undefined>;
            computedChildAttributes: import("vue").ComputedRef<import("vue").InputHTMLAttributes>;
            computedInputAttributes: import("vue").ComputedRef<import("vue").InputHTMLAttributes>;
            textareaProps: import("vue").ComputedRef<import("vue").ExtractPropTypes<{
                [x: string & `on${string}`]: {
                    type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                    required: false;
                    default: undefined;
                };
                readonly: {
                    type: import("vue").PropType<boolean>;
                    required: true;
                    default: boolean;
                };
                modelValue: {
                    type: import("vue").PropType<string | number>;
                    required: true;
                    default: string | number;
                };
                disabled: {
                    type: import("vue").PropType<boolean>;
                    required: true;
                    default: boolean;
                };
                autosize: {
                    type: import("vue").PropType<boolean>;
                    required: true;
                    default: boolean;
                };
                minRows: {
                    type: import("vue").PropType<number>;
                    required: true;
                    default: number;
                };
                placeholder: {
                    type: import("vue").PropType<string | undefined>;
                    required: false;
                    default: undefined;
                };
                maxRows: {
                    type: import("vue").PropType<number | undefined>;
                    required: false;
                    default: undefined;
                };
            }>>;
            computedValue: import("vue").ComputedRef<string | number>;
            tabIndexComputed: import("vue").ComputedRef<number>;
            computedError: import("vue").WritableComputedRef<boolean>;
            computedErrorMessages: import("vue").WritableComputedRef<string[]>;
            isFocused: import("vue").WritableComputedRef<boolean | undefined>;
            canBeCleared: import("vue").ComputedRef<boolean>;
            clearIconProps: import("vue").ComputedRef<{
                name: string;
                color: string;
                size: string;
            }>;
            fieldListeners: Record<string, any>;
            filterSlots: import("vue").ComputedRef<string[]>;
            reset: () => void;
            focus: () => void;
            blur: () => void;
            tp: <Key extends string | undefined>(key: Key) => Key;
            t(key: string, values?: Record<string, string | number | boolean | undefined> | undefined): string;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, string[], string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            placeholder: {
                type: StringConstructor;
                default: string;
            };
            tabindex: {
                type: NumberConstructor;
                default: number;
            };
            modelValue: {
                type: (StringConstructor | NumberConstructor)[];
                default: string;
            };
            label: {
                type: StringConstructor;
                default: string;
            };
            type: {
                type: import("vue").PropType<"textarea" | "text" | "password" | (string & Record<never, never>)>;
                default: string;
            };
            loading: {
                type: BooleanConstructor;
                default: boolean;
            };
            inputClass: {
                type: StringConstructor;
                default: string;
            };
            pattern: {
                type: StringConstructor;
            };
            inputmode: {
                type: StringConstructor;
                default: string;
            };
            ariaLabel: {
                type: StringConstructor;
                default: undefined;
            };
            counter: {
                type: BooleanConstructor;
                default: boolean;
            };
            maxLength: {
                type: NumberConstructor;
                default: undefined;
            };
            color: {
                type: StringConstructor;
                default: string;
            };
            background: {
                type: StringConstructor;
                default: string;
            };
            outline: {
                type: BooleanConstructor;
                default: boolean;
            };
            bordered: {
                type: BooleanConstructor;
                default: boolean;
            };
            requiredMark: {
                type: BooleanConstructor;
                default: boolean;
            };
            preset: {
                type: StringConstructor;
                default: undefined;
            };
            readonly: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            disabled: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            autosize: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            minRows: {
                type: import("vue").PropType<number>;
                required: true;
                default: number;
            };
            maxRows: {
                type: import("vue").PropType<number | undefined>;
                required: false;
                default: undefined;
            };
            mask: {
                type: import("vue").PropType<string | Record<string, number[]> | import("cleave.js/options").CleaveOptions>;
                default: string;
            };
            returnRaw: {
                type: BooleanConstructor;
                default: boolean;
            };
            clearable: {
                type: BooleanConstructor;
                default: boolean;
            };
            clearableIcon: {
                type: StringConstructor;
                default: string;
            };
            clearValue: {
                type: StringConstructor;
                default: string;
            };
            error: {
                type: BooleanConstructor;
                default: undefined;
            };
            errorMessages: {
                type: import("vue").PropType<string | string[]>;
                default: undefined;
            };
            errorCount: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            rules: {
                type: import("vue").PropType<import("../../composables").ValidationRule<any>[]>;
                default: () => any;
            } & {
                type: import("vue").PropType<import("../../composables").ValidationRule<string>[]>;
            };
            success: {
                type: BooleanConstructor;
                default: boolean;
            };
            messages: {
                type: import("vue").PropType<string | string[]>;
                default: () => never[];
            };
            immediateValidation: {
                type: BooleanConstructor;
                default: boolean;
            };
        }>> & {
            [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
        }, {
            readonly: boolean;
            label: string;
            mask: string | Record<string, number[]> | import("cleave.js/options").CleaveOptions;
            success: boolean;
            color: string;
            type: "textarea" | "text" | "password" | (string & Record<never, never>);
            preset: string;
            tabindex: number;
            modelValue: string | number;
            disabled: boolean;
            loading: boolean;
            bordered: boolean;
            background: string;
            outline: boolean;
            error: boolean;
            ariaLabel: string;
            errorMessages: string | string[];
            errorCount: string | number;
            rules: import("../../composables").ValidationRule<string>[];
            messages: string | string[];
            immediateValidation: boolean;
            placeholder: string;
            returnRaw: boolean;
            maxLength: number;
            requiredMark: boolean;
            autosize: boolean;
            minRows: number;
            maxRows: number | undefined;
            inputClass: string;
            inputmode: string;
            counter: boolean;
            clearable: boolean;
            clearableIcon: string;
            clearValue: string;
        }>;
        VaSelect: import("vue").DefineComponent<{
            modelValue: {
                type: import("vue").PropType<import("../va-select").SelectOption | import("../va-select").SelectOption[]>;
                default: string;
            };
            placement: {
                type: import("vue").PropType<import("../va-select").Placement>;
                default: string;
                validator: (placement: string) => boolean;
            };
            allowCreate: {
                type: import("vue").PropType<boolean | "unique">;
                default: boolean;
                validator: (mode: string | boolean) => boolean;
            };
            color: {
                type: StringConstructor;
                default: string;
            };
            multiple: {
                type: BooleanConstructor;
                default: boolean;
            };
            searchable: {
                type: BooleanConstructor;
                default: boolean;
            };
            width: {
                type: StringConstructor;
                default: string;
            };
            maxHeight: {
                type: StringConstructor;
                default: string;
            };
            noOptionsText: {
                type: StringConstructor;
                default: string;
            };
            hideSelected: {
                type: BooleanConstructor;
                default: boolean;
            };
            tabindex: {
                type: NumberConstructor;
                default: number;
            };
            virtualScroller: {
                type: BooleanConstructor;
                default: boolean;
            };
            selectedTopShown: {
                type: BooleanConstructor;
                default: boolean;
            };
            highlightMatchedText: {
                type: BooleanConstructor;
                default: boolean;
            };
            minSearchChars: {
                type: NumberConstructor;
                default: number;
            };
            autoSelectFirstOption: {
                type: BooleanConstructor;
                default: boolean;
            };
            outline: {
                type: BooleanConstructor;
                default: boolean;
            };
            bordered: {
                type: BooleanConstructor;
                default: boolean;
            };
            label: {
                type: StringConstructor;
                default: string;
            };
            placeholder: {
                type: StringConstructor;
                default: string;
            };
            searchPlaceholderText: {
                type: StringConstructor;
                default: string;
            };
            requiredMark: {
                type: BooleanConstructor;
                default: boolean;
            };
            autocomplete: {
                type: BooleanConstructor;
                default: boolean;
            };
            separator: {
                type: StringConstructor;
                default: string;
            };
            delay: {
                type: NumberConstructor;
                default: number;
                validator: (value: number) => boolean;
            };
            dropdownIcon: {
                type: import("vue").PropType<string | import("../va-select").SelectDropdownIcon>;
                default: () => import("../va-select").SelectDropdownIcon;
                validator: (value: string | import("../va-select").SelectDropdownIcon) => boolean;
            };
            maxVisibleOptions: {
                type: NumberConstructor;
                default: number;
            };
            disabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            readonly: {
                type: BooleanConstructor;
                default: boolean;
            };
            clearable: {
                type: BooleanConstructor;
                default: boolean;
            };
            clearableIcon: {
                type: StringConstructor;
                default: string;
            };
            clearValue: {
                type: StringConstructor;
                default: string;
            };
            maxSelections: {
                type: (StringConstructor | NumberConstructor)[];
                default: undefined;
            };
            loading: {
                type: BooleanConstructor;
                default: boolean;
            };
            error: {
                type: BooleanConstructor;
                default: undefined;
            };
            errorMessages: {
                type: import("vue").PropType<string | string[]>;
                default: undefined;
            };
            errorCount: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            rules: {
                type: import("vue").PropType<import("../../composables").ValidationRule<any>[]>;
                default: () => any;
            } & {
                type: import("vue").PropType<import("../../composables").ValidationRule<import("../va-select").SelectOption>[]>;
            };
            success: {
                type: BooleanConstructor;
                default: boolean;
            };
            messages: {
                type: import("vue").PropType<string | string[]>;
                default: () => never[];
            };
            immediateValidation: {
                type: BooleanConstructor;
                default: boolean;
            };
            options: {
                type: import("vue").PropType<import("../va-select").SelectOption[]>;
                default: () => never[];
            };
            textBy: {
                type: import("vue").PropType<string | ((option: import("../va-select").SelectOption) => unknown)>;
                default: string;
            };
            valueBy: {
                type: import("vue").PropType<string | ((option: import("../va-select").SelectOption) => unknown)>;
                default: string;
            };
            trackBy: {
                type: import("vue").PropType<string | ((option: import("../va-select").SelectOption) => unknown)>;
                default: string;
            };
            disabledBy: {
                type: import("vue").PropType<string | ((option: import("../va-select").SelectOption) => unknown)>;
                default: string;
            };
            groupBy: {
                type: import("vue").PropType<string | ((option: import("../va-select").SelectOption) => unknown)>;
                default: string;
            };
            preset: {
                type: StringConstructor;
                default: undefined;
            };
            stateful: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            cursor: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            offset: {
                type: import("vue").PropType<import("../va-dropdown/types").DropdownOffsetProp>;
                required: true;
                default: import("../va-dropdown/types").DropdownOffsetProp;
            };
            keepAnchorWidth: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            autoPlacement: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            stickToEdges: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            anchorSelector: {
                type: import("vue").PropType<string>;
                required: true;
                default: string;
            };
            innerAnchorSelector: {
                type: import("vue").PropType<string>;
                required: true;
                default: string;
            };
            preventOverflow: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            isContentHoverable: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            closeOnContentClick: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            closeOnClickOutside: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            closeOnAnchorClick: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            hoverOverTimeout: {
                type: import("vue").PropType<number>;
                required: true;
                default: number;
            };
            hoverOutTimeout: {
                type: import("vue").PropType<number>;
                required: true;
                default: number;
            };
            trigger: {
                type: import("vue").PropType<"none" | "click" | "dblclick" | "right-click" | "hover">;
                required: true;
                default: "none" | "click" | "dblclick" | "right-click" | "hover";
            };
            keyboardNavigation: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            target: {
                type: import("vue").PropType<import("../../composables").MaybeHTMLElementOrSelector>;
                required: false;
                default: undefined;
            };
        }, {
            input: import("vue").ShallowRef<import("vue").DefineComponent<{
                counterValue: {
                    type: NumberConstructor;
                    default: undefined;
                };
                maxLength: {
                    type: NumberConstructor;
                    default: undefined;
                };
                label: {
                    type: StringConstructor;
                    default: string;
                };
                color: {
                    type: StringConstructor;
                    default: string;
                };
                background: {
                    type: StringConstructor;
                    default: string;
                };
                outline: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                bordered: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                focused: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                error: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                success: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                requiredMark: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                modelValue: {
                    required: boolean;
                };
                errorMessages: {
                    type: import("vue").PropType<string | string[]>;
                    default: undefined;
                };
                errorCount: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: number;
                };
                rules: {
                    type: import("vue").PropType<import("../../composables").ValidationRule<any>[]>;
                    default: () => any;
                };
                messages: {
                    type: import("vue").PropType<string | string[]>;
                    default: () => never[];
                };
                immediateValidation: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                disabled: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                readonly: {
                    type: BooleanConstructor;
                    default: boolean;
                };
            }, {
                containerStyle: import("vue").ComputedRef<{
                    color: string;
                    'caret-color': string;
                    '--va-input-color': string | undefined;
                    borderColor: string | undefined;
                }>;
                wrapperClass: {
                    [x: `va-input-wrapper--${string}`]: boolean;
                } & {
                    readonly asObject: import("vue").ComputedRef<{
                        [x: `va-input-wrapper--${string}`]: boolean;
                    }>;
                    readonly asArray: import("vue").ComputedRef<`va-input-wrapper--${string}`[]>;
                    readonly asString: import("vue").ComputedRef<string>;
                };
                wrapperStyle: import("vue").ComputedRef<{
                    [x: string]: string;
                }[]>;
                textColorComputed: import("vue").ComputedRef<string>;
                isCounterVisible: import("vue").ComputedRef<boolean>;
                counterComputed: import("vue").ComputedRef<string | number | undefined>;
                colorComputed: import("vue").ComputedRef<string>;
                backgroundComputed: import("vue").ComputedRef<string>;
                borderColorComputed: import("vue").ComputedRef<string | undefined>;
                messagesColor: import("vue").ComputedRef<"" | "danger" | "success">;
                messagesComputed: import("vue").ComputedRef<string | string[] | undefined>;
                hasMessages: import("vue").ComputedRef<boolean>;
                errorLimit: import("vue").ComputedRef<number>;
            }, unknown, {}, {
                focus(): void;
                blur(): void;
            }, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("click" | "click-prepend" | "click-append" | "click-prepend-inner" | "click-append-inner")[], "click" | "click-prepend" | "click-append" | "click-prepend-inner" | "click-append-inner", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
                counterValue: {
                    type: NumberConstructor;
                    default: undefined;
                };
                maxLength: {
                    type: NumberConstructor;
                    default: undefined;
                };
                label: {
                    type: StringConstructor;
                    default: string;
                };
                color: {
                    type: StringConstructor;
                    default: string;
                };
                background: {
                    type: StringConstructor;
                    default: string;
                };
                outline: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                bordered: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                focused: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                error: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                success: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                requiredMark: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                modelValue: {
                    required: boolean;
                };
                errorMessages: {
                    type: import("vue").PropType<string | string[]>;
                    default: undefined;
                };
                errorCount: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: number;
                };
                rules: {
                    type: import("vue").PropType<import("../../composables").ValidationRule<any>[]>;
                    default: () => any;
                };
                messages: {
                    type: import("vue").PropType<string | string[]>;
                    default: () => never[];
                };
                immediateValidation: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                disabled: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                readonly: {
                    type: BooleanConstructor;
                    default: boolean;
                };
            }>> & {
                onClick?: ((...args: any[]) => any) | undefined;
                "onClick-prepend"?: ((...args: any[]) => any) | undefined;
                "onClick-append"?: ((...args: any[]) => any) | undefined;
                "onClick-prepend-inner"?: ((...args: any[]) => any) | undefined;
                "onClick-append-inner"?: ((...args: any[]) => any) | undefined;
            }, {
                readonly: boolean;
                label: string;
                success: boolean;
                color: string;
                counterValue: number;
                disabled: boolean;
                bordered: boolean;
                background: string;
                outline: boolean;
                error: boolean;
                errorMessages: string | string[];
                errorCount: string | number;
                rules: import("../../composables").ValidationRule<any>[];
                messages: string | string[];
                immediateValidation: boolean;
                maxLength: number;
                focused: boolean;
                requiredMark: boolean;
            }> | undefined>;
            optionList: import("vue").ShallowRef<import("vue").DefineComponent<{
                noOptionsText: {
                    type: StringConstructor;
                    default: string;
                };
                getSelectedState: {
                    type: import("vue").PropType<(option: import("../va-select").SelectOption) => boolean>;
                    required: true;
                };
                multiple: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                search: {
                    type: StringConstructor;
                    default: string;
                };
                tabindex: {
                    type: NumberConstructor;
                    default: number;
                };
                hoveredOption: {
                    type: import("vue").PropType<import("../va-select").SelectOption | null>;
                    default: null;
                };
                virtualScroller: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                highlightMatchedText: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                minSearchChars: {
                    type: NumberConstructor;
                    default: number;
                };
                autoSelectFirstOption: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                delay: {
                    type: NumberConstructor;
                    default: number;
                    validator: (value: number) => boolean;
                };
                options: {
                    type: import("vue").PropType<import("../va-select").SelectOption[]>;
                    default: () => never[];
                };
                textBy: {
                    type: import("vue").PropType<string | ((option: import("../va-select").SelectOption) => unknown)>;
                    default: string;
                };
                valueBy: {
                    type: import("vue").PropType<string | ((option: import("../va-select").SelectOption) => unknown)>;
                    default: string;
                };
                trackBy: {
                    type: import("vue").PropType<string | ((option: import("../va-select").SelectOption) => unknown)>;
                    default: string;
                };
                disabledBy: {
                    type: import("vue").PropType<string | ((option: import("../va-select").SelectOption) => unknown)>;
                    default: string;
                };
                groupBy: {
                    type: import("vue").PropType<string | ((option: import("../va-select").SelectOption) => unknown)>;
                    default: string;
                };
                preset: {
                    type: StringConstructor;
                    default: undefined;
                };
                color: {
                    type: StringConstructor;
                    default: string;
                };
            }, {
                focusPreviousOption: () => void;
                focusNextOption: () => void;
                focusFirstOption: () => void;
                scrollToOption: (option: import("../va-select").SelectOption) => void;
                focus: () => void;
                root: import("vue").ShallowRef<HTMLElement | undefined>;
                virtualScrollerRef: import("vue").ShallowRef<({
                    $: import("vue").ComponentInternalInstance;
                    $data: {};
                    $props: Partial<{
                        table: boolean;
                        horizontal: boolean;
                        disabled: boolean;
                        trackBy: string | number | ((item: any[] | Record<string, any>) => string | number);
                        items: unknown[];
                        itemSize: string | number;
                        wrapperSize: string | number;
                        bench: number;
                    }> & Omit<Readonly<import("vue").ExtractPropTypes<{
                        items: {
                            type: ArrayConstructor;
                            default: () => never[];
                        };
                        bench: {
                            type: NumberConstructor;
                            default: number;
                            validator: (v: number) => boolean;
                        };
                        disabled: {
                            type: BooleanConstructor;
                            default: boolean;
                        };
                        table: {
                            type: BooleanConstructor;
                            default: boolean;
                        };
                        horizontal: {
                            type: BooleanConstructor;
                            default: boolean;
                        };
                        itemSize: {
                            type: import("vue").PropType<string | number>;
                            default: number;
                            validator: (v: string | number) => boolean;
                        };
                        wrapperSize: {
                            type: import("vue").PropType<string | number>;
                            default: number;
                            validator: (v: string | number) => boolean;
                        };
                        trackBy: {
                            type: import("vue").PropType<string | number | ((item: any[] | Record<string, any>) => string | number)>;
                            default: string;
                        };
                    }>> & {
                        "onScroll:bottom"?: ((...args: any[]) => any) | undefined;
                    } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "table" | "horizontal" | "disabled" | "trackBy" | "items" | "itemSize" | "wrapperSize" | "bench">;
                    $attrs: {
                        [x: string]: unknown;
                    };
                    $refs: {
                        [x: string]: unknown;
                    };
                    $slots: Readonly<{
                        [name: string]: import("vue").Slot | undefined;
                    }>;
                    $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
                    $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
                    $emit: (event: "scroll:bottom", ...args: any[]) => void;
                    $el: any;
                    $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
                        items: {
                            type: ArrayConstructor;
                            default: () => never[];
                        };
                        bench: {
                            type: NumberConstructor;
                            default: number;
                            validator: (v: number) => boolean;
                        };
                        disabled: {
                            type: BooleanConstructor;
                            default: boolean;
                        };
                        table: {
                            type: BooleanConstructor;
                            default: boolean;
                        };
                        horizontal: {
                            type: BooleanConstructor;
                            default: boolean;
                        };
                        itemSize: {
                            type: import("vue").PropType<string | number>;
                            default: number;
                            validator: (v: string | number) => boolean;
                        };
                        wrapperSize: {
                            type: import("vue").PropType<string | number>;
                            default: number;
                            validator: (v: string | number) => boolean;
                        };
                        trackBy: {
                            type: import("vue").PropType<string | number | ((item: any[] | Record<string, any>) => string | number)>;
                            default: string;
                        };
                    }>> & {
                        "onScroll:bottom"?: ((...args: any[]) => any) | undefined;
                    }, {
                        containerStyleComputed: import("vue").ComputedRef<{
                            [x: string]: string | undefined;
                        }>;
                        wrapperStyleComputed: import("vue").ComputedRef<{
                            [x: string]: string | undefined;
                        }>;
                        wrapperClassComputed: {
                            [x: `va-virtual-scroller--${string}`]: boolean;
                        } & {
                            readonly asObject: import("vue").ComputedRef<{
                                [x: `va-virtual-scroller--${string}`]: boolean;
                            }>;
                            readonly asArray: import("vue").ComputedRef<`va-virtual-scroller--${string}`[]>;
                            readonly asString: import("vue").ComputedRef<string>;
                        };
                        listStyleComputed: import("vue").ComputedRef<{
                            transform: string;
                        }>;
                        currentListOffset: import("vue").ComputedRef<number>;
                        renderStartIndex: import("vue").ComputedRef<number>;
                        virtualScrollTo: (index: number) => void;
                        renderBuffer: import("vue").ComputedRef<unknown[]>;
                        uniqueKey: (item: any[] | Record<string, any>, index: number, defaultValue?: any) => any;
                        wrapper: import("vue").ShallowRef<HTMLElement | undefined>;
                        list: import("vue").ShallowRef<HTMLElement | undefined>;
                    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "scroll:bottom"[], string, {
                        table: boolean;
                        horizontal: boolean;
                        disabled: boolean;
                        trackBy: string | number | ((item: any[] | Record<string, any>) => string | number);
                        items: unknown[];
                        itemSize: string | number;
                        wrapperSize: string | number;
                        bench: number;
                    }> & {
                        beforeCreate?: ((() => void) | (() => void)[]) | undefined;
                        created?: ((() => void) | (() => void)[]) | undefined;
                        beforeMount?: ((() => void) | (() => void)[]) | undefined;
                        mounted?: ((() => void) | (() => void)[]) | undefined;
                        beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
                        updated?: ((() => void) | (() => void)[]) | undefined;
                        activated?: ((() => void) | (() => void)[]) | undefined;
                        deactivated?: ((() => void) | (() => void)[]) | undefined;
                        beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
                        beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
                        destroyed?: ((() => void) | (() => void)[]) | undefined;
                        unmounted?: ((() => void) | (() => void)[]) | undefined;
                        renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
                        renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
                        errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void)[]) | undefined;
                    };
                    $forceUpdate: () => void;
                    $nextTick: typeof import("vue").nextTick;
                    $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
                } & Readonly<import("vue").ExtractPropTypes<{
                    items: {
                        type: ArrayConstructor;
                        default: () => never[];
                    };
                    bench: {
                        type: NumberConstructor;
                        default: number;
                        validator: (v: number) => boolean;
                    };
                    disabled: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    table: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    horizontal: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    itemSize: {
                        type: import("vue").PropType<string | number>;
                        default: number;
                        validator: (v: string | number) => boolean;
                    };
                    wrapperSize: {
                        type: import("vue").PropType<string | number>;
                        default: number;
                        validator: (v: string | number) => boolean;
                    };
                    trackBy: {
                        type: import("vue").PropType<string | number | ((item: any[] | Record<string, any>) => string | number)>;
                        default: string;
                    };
                }>> & {
                    "onScroll:bottom"?: ((...args: any[]) => any) | undefined;
                } & import("vue").ShallowUnwrapRef<{
                    containerStyleComputed: import("vue").ComputedRef<{
                        [x: string]: string | undefined;
                    }>;
                    wrapperStyleComputed: import("vue").ComputedRef<{
                        [x: string]: string | undefined;
                    }>;
                    wrapperClassComputed: {
                        [x: `va-virtual-scroller--${string}`]: boolean;
                    } & {
                        readonly asObject: import("vue").ComputedRef<{
                            [x: `va-virtual-scroller--${string}`]: boolean;
                        }>;
                        readonly asArray: import("vue").ComputedRef<`va-virtual-scroller--${string}`[]>;
                        readonly asString: import("vue").ComputedRef<string>;
                    };
                    listStyleComputed: import("vue").ComputedRef<{
                        transform: string;
                    }>;
                    currentListOffset: import("vue").ComputedRef<number>;
                    renderStartIndex: import("vue").ComputedRef<number>;
                    virtualScrollTo: (index: number) => void;
                    renderBuffer: import("vue").ComputedRef<unknown[]>;
                    uniqueKey: (item: any[] | Record<string, any>, index: number, defaultValue?: any) => any;
                    wrapper: import("vue").ShallowRef<HTMLElement | undefined>;
                    list: import("vue").ShallowRef<HTMLElement | undefined>;
                }> & {} & import("@vue/runtime-core").ComponentCustomProperties)[] | undefined>;
                rootHeight: import("vue").ComputedRef<number>;
                optionGroups: import("vue").Ref<Record<string, import("../va-select").SelectOption[]>>;
                filteredOptions: import("vue").ComputedRef<import("../va-select").SelectOption[]>;
                selectOptionProps: import("vue").ComputedRef<{
                    getText: (option: import("../va-select").SelectOption) => string;
                    getTrackBy: (option: import("../va-select").SelectOption) => any;
                    search: string;
                    color: string;
                    getSelectedState: (option: import("../va-select").SelectOption) => boolean;
                    highlightMatchedText: boolean;
                    minSearchChars: number;
                }>;
                currentOptionComputed: import("vue").ComputedRef<import("../va-select").SelectOption | null>;
                onScroll: (event: UIEvent) => void;
                getTrackBy: (option: import("../va-select").SelectOption) => any;
                setItemRef: (key: string | number) => (el: any) => string | undefined;
                getDisabled: (option: import("../va-select").SelectOption) => any;
                selectOption: (option: import("../va-select").SelectOption) => false | void;
                updateHoveredOption: (option?: import("../va-select").SelectOption | undefined) => void;
                handleScrollToBottom: () => void;
            }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("select-option" | "update:hoveredOption" | "no-previous-option-to-hover" | "scroll-bottom")[], "select-option" | "update:hoveredOption" | "no-previous-option-to-hover" | "scroll-bottom", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
                noOptionsText: {
                    type: StringConstructor;
                    default: string;
                };
                getSelectedState: {
                    type: import("vue").PropType<(option: import("../va-select").SelectOption) => boolean>;
                    required: true;
                };
                multiple: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                search: {
                    type: StringConstructor;
                    default: string;
                };
                tabindex: {
                    type: NumberConstructor;
                    default: number;
                };
                hoveredOption: {
                    type: import("vue").PropType<import("../va-select").SelectOption | null>;
                    default: null;
                };
                virtualScroller: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                highlightMatchedText: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                minSearchChars: {
                    type: NumberConstructor;
                    default: number;
                };
                autoSelectFirstOption: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                delay: {
                    type: NumberConstructor;
                    default: number;
                    validator: (value: number) => boolean;
                };
                options: {
                    type: import("vue").PropType<import("../va-select").SelectOption[]>;
                    default: () => never[];
                };
                textBy: {
                    type: import("vue").PropType<string | ((option: import("../va-select").SelectOption) => unknown)>;
                    default: string;
                };
                valueBy: {
                    type: import("vue").PropType<string | ((option: import("../va-select").SelectOption) => unknown)>;
                    default: string;
                };
                trackBy: {
                    type: import("vue").PropType<string | ((option: import("../va-select").SelectOption) => unknown)>;
                    default: string;
                };
                disabledBy: {
                    type: import("vue").PropType<string | ((option: import("../va-select").SelectOption) => unknown)>;
                    default: string;
                };
                groupBy: {
                    type: import("vue").PropType<string | ((option: import("../va-select").SelectOption) => unknown)>;
                    default: string;
                };
                preset: {
                    type: StringConstructor;
                    default: undefined;
                };
                color: {
                    type: StringConstructor;
                    default: string;
                };
            }>> & {
                "onSelect-option"?: ((...args: any[]) => any) | undefined;
                "onUpdate:hoveredOption"?: ((...args: any[]) => any) | undefined;
                "onNo-previous-option-to-hover"?: ((...args: any[]) => any) | undefined;
                "onScroll-bottom"?: ((...args: any[]) => any) | undefined;
            }, {
                search: string;
                color: string;
                preset: string;
                tabindex: number;
                multiple: boolean;
                options: import("../va-select").SelectOption[];
                textBy: string | ((option: import("../va-select").SelectOption) => unknown);
                valueBy: string | ((option: import("../va-select").SelectOption) => unknown);
                trackBy: string | ((option: import("../va-select").SelectOption) => unknown);
                disabledBy: string | ((option: import("../va-select").SelectOption) => unknown);
                groupBy: string | ((option: import("../va-select").SelectOption) => unknown);
                delay: number;
                virtualScroller: boolean;
                highlightMatchedText: boolean;
                minSearchChars: number;
                noOptionsText: string;
                hoveredOption: import("../va-select").SelectOption | null;
                autoSelectFirstOption: boolean;
            }> | undefined>;
            searchBar: import("vue").ShallowRef<import("vue").DefineComponent<{
                placeholder: {
                    type: StringConstructor;
                    default: string;
                };
                tabindex: {
                    type: NumberConstructor;
                    default: number;
                };
                modelValue: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: string;
                };
                label: {
                    type: StringConstructor;
                    default: string;
                };
                type: {
                    type: import("vue").PropType<"textarea" | "text" | "password" | (string & Record<never, never>)>;
                    default: string;
                };
                loading: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                inputClass: {
                    type: StringConstructor;
                    default: string;
                };
                pattern: {
                    type: StringConstructor;
                };
                inputmode: {
                    type: StringConstructor;
                    default: string;
                };
                ariaLabel: {
                    type: StringConstructor;
                    default: undefined;
                };
                counter: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                maxLength: {
                    type: NumberConstructor;
                    default: undefined;
                };
                color: {
                    type: StringConstructor;
                    default: string;
                };
                background: {
                    type: StringConstructor;
                    default: string;
                };
                outline: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                bordered: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                requiredMark: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                preset: {
                    type: StringConstructor;
                    default: undefined;
                };
                readonly: {
                    type: import("vue").PropType<boolean>;
                    required: true;
                    default: boolean;
                };
                disabled: {
                    type: import("vue").PropType<boolean>;
                    required: true;
                    default: boolean;
                };
                autosize: {
                    type: import("vue").PropType<boolean>;
                    required: true;
                    default: boolean;
                };
                minRows: {
                    type: import("vue").PropType<number>;
                    required: true;
                    default: number;
                };
                maxRows: {
                    type: import("vue").PropType<number | undefined>;
                    required: false;
                    default: undefined;
                };
                mask: {
                    type: import("vue").PropType<string | Record<string, number[]> | import("cleave.js/options").CleaveOptions>;
                    default: string;
                };
                returnRaw: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                clearable: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                clearableIcon: {
                    type: StringConstructor;
                    default: string;
                };
                clearValue: {
                    type: StringConstructor;
                    default: string;
                };
                error: {
                    type: BooleanConstructor;
                    default: undefined;
                };
                errorMessages: {
                    type: import("vue").PropType<string | string[]>;
                    default: undefined;
                };
                errorCount: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: number;
                };
                rules: {
                    type: import("vue").PropType<import("../../composables").ValidationRule<any>[]>;
                    default: () => any;
                } & {
                    type: import("vue").PropType<import("../../composables").ValidationRule<string>[]>;
                };
                success: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                messages: {
                    type: import("vue").PropType<string | string[]>;
                    default: () => never[];
                };
                immediateValidation: {
                    type: BooleanConstructor;
                    default: boolean;
                };
            }, {
                input: import("vue").ShallowRef<HTMLInputElement | import("vue").DefineComponent<{
                    modelValue: {
                        type: (StringConstructor | NumberConstructor)[];
                        default: string;
                    };
                    placeholder: {
                        type: StringConstructor;
                    };
                    autosize: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    minRows: {
                        type: NumberConstructor;
                        default: number;
                        validator: (val: number) => boolean;
                    };
                    maxRows: {
                        type: NumberConstructor;
                        validator: (val: number) => boolean;
                    };
                    disabled: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    readonly: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                }, {
                    textarea: import("vue").ShallowRef<HTMLTextAreaElement | undefined>;
                    computedStyle: import("vue").ComputedRef<import("vue").CSSProperties>;
                    listeners: Record<string, any>;
                    computedProps: import("vue").ComputedRef<{
                        [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
                        readonly?: boolean | undefined;
                        modelValue?: string | number | undefined;
                        disabled?: boolean | undefined;
                        placeholder?: string | undefined;
                        autosize?: boolean | undefined;
                        minRows?: number | undefined;
                        maxRows?: number | undefined;
                    }>;
                    focus: () => void;
                    blur: () => void;
                }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, string[], string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
                    modelValue: {
                        type: (StringConstructor | NumberConstructor)[];
                        default: string;
                    };
                    placeholder: {
                        type: StringConstructor;
                    };
                    autosize: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    minRows: {
                        type: NumberConstructor;
                        default: number;
                        validator: (val: number) => boolean;
                    };
                    maxRows: {
                        type: NumberConstructor;
                        validator: (val: number) => boolean;
                    };
                    disabled: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    readonly: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                }>> & {
                    [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
                }, {
                    readonly: boolean;
                    modelValue: string | number;
                    disabled: boolean;
                    autosize: boolean;
                    minRows: number;
                }> | undefined>;
                inputEvents: {
                    onFocus: (e: Event) => void;
                    onBlur: (e: Event) => void;
                    onInput: (event: Event) => void;
                };
                valueLengthComputed: import("vue").ComputedRef<number | undefined>;
                computedChildAttributes: import("vue").ComputedRef<import("vue").InputHTMLAttributes>;
                computedInputAttributes: import("vue").ComputedRef<import("vue").InputHTMLAttributes>;
                textareaProps: import("vue").ComputedRef<import("vue").ExtractPropTypes<{
                    [x: string & `on${string}`]: {
                        type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                        required: false;
                        default: undefined;
                    };
                    readonly: {
                        type: import("vue").PropType<boolean>;
                        required: true;
                        default: boolean;
                    };
                    modelValue: {
                        type: import("vue").PropType<string | number>;
                        required: true;
                        default: string | number;
                    };
                    disabled: {
                        type: import("vue").PropType<boolean>;
                        required: true;
                        default: boolean;
                    };
                    autosize: {
                        type: import("vue").PropType<boolean>;
                        required: true;
                        default: boolean;
                    };
                    minRows: {
                        type: import("vue").PropType<number>;
                        required: true;
                        default: number;
                    };
                    placeholder: {
                        type: import("vue").PropType<string | undefined>;
                        required: false;
                        default: undefined;
                    };
                    maxRows: {
                        type: import("vue").PropType<number | undefined>;
                        required: false;
                        default: undefined;
                    };
                }>>;
                computedValue: import("vue").ComputedRef<string | number>;
                tabIndexComputed: import("vue").ComputedRef<number>;
                computedError: import("vue").WritableComputedRef<boolean>;
                computedErrorMessages: import("vue").WritableComputedRef<string[]>;
                isFocused: import("vue").WritableComputedRef<boolean | undefined>;
                canBeCleared: import("vue").ComputedRef<boolean>;
                clearIconProps: import("vue").ComputedRef<{
                    name: string;
                    color: string;
                    size: string;
                }>;
                fieldListeners: Record<string, any>;
                filterSlots: import("vue").ComputedRef<string[]>;
                reset: () => void;
                focus: () => void;
                blur: () => void;
                tp: <Key extends string | undefined>(key: Key) => Key;
                t(key: string, values?: Record<string, string | number | boolean | undefined> | undefined): string;
            }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, string[], string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
                placeholder: {
                    type: StringConstructor;
                    default: string;
                };
                tabindex: {
                    type: NumberConstructor;
                    default: number;
                };
                modelValue: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: string;
                };
                label: {
                    type: StringConstructor;
                    default: string;
                };
                type: {
                    type: import("vue").PropType<"textarea" | "text" | "password" | (string & Record<never, never>)>;
                    default: string;
                };
                loading: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                inputClass: {
                    type: StringConstructor;
                    default: string;
                };
                pattern: {
                    type: StringConstructor;
                };
                inputmode: {
                    type: StringConstructor;
                    default: string;
                };
                ariaLabel: {
                    type: StringConstructor;
                    default: undefined;
                };
                counter: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                maxLength: {
                    type: NumberConstructor;
                    default: undefined;
                };
                color: {
                    type: StringConstructor;
                    default: string;
                };
                background: {
                    type: StringConstructor;
                    default: string;
                };
                outline: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                bordered: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                requiredMark: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                preset: {
                    type: StringConstructor;
                    default: undefined;
                };
                readonly: {
                    type: import("vue").PropType<boolean>;
                    required: true;
                    default: boolean;
                };
                disabled: {
                    type: import("vue").PropType<boolean>;
                    required: true;
                    default: boolean;
                };
                autosize: {
                    type: import("vue").PropType<boolean>;
                    required: true;
                    default: boolean;
                };
                minRows: {
                    type: import("vue").PropType<number>;
                    required: true;
                    default: number;
                };
                maxRows: {
                    type: import("vue").PropType<number | undefined>;
                    required: false;
                    default: undefined;
                };
                mask: {
                    type: import("vue").PropType<string | Record<string, number[]> | import("cleave.js/options").CleaveOptions>;
                    default: string;
                };
                returnRaw: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                clearable: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                clearableIcon: {
                    type: StringConstructor;
                    default: string;
                };
                clearValue: {
                    type: StringConstructor;
                    default: string;
                };
                error: {
                    type: BooleanConstructor;
                    default: undefined;
                };
                errorMessages: {
                    type: import("vue").PropType<string | string[]>;
                    default: undefined;
                };
                errorCount: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: number;
                };
                rules: {
                    type: import("vue").PropType<import("../../composables").ValidationRule<any>[]>;
                    default: () => any;
                } & {
                    type: import("vue").PropType<import("../../composables").ValidationRule<string>[]>;
                };
                success: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                messages: {
                    type: import("vue").PropType<string | string[]>;
                    default: () => never[];
                };
                immediateValidation: {
                    type: BooleanConstructor;
                    default: boolean;
                };
            }>> & {
                [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
            }, {
                readonly: boolean;
                label: string;
                mask: string | Record<string, number[]> | import("cleave.js/options").CleaveOptions;
                success: boolean;
                color: string;
                type: "textarea" | "text" | "password" | (string & Record<never, never>);
                preset: string;
                tabindex: number;
                modelValue: string | number;
                disabled: boolean;
                loading: boolean;
                bordered: boolean;
                background: string;
                outline: boolean;
                error: boolean;
                ariaLabel: string;
                errorMessages: string | string[];
                errorCount: string | number;
                rules: import("../../composables").ValidationRule<string>[];
                messages: string | string[];
                immediateValidation: boolean;
                placeholder: string;
                returnRaw: boolean;
                maxLength: number;
                requiredMark: boolean;
                autosize: boolean;
                minRows: number;
                maxRows: number | undefined;
                inputClass: string;
                inputmode: string;
                counter: boolean;
                clearable: boolean;
                clearableIcon: string;
                clearValue: string;
            }> | undefined>;
            reset: () => void;
            focus: () => void;
            blur: () => void;
            toggleDropdown: () => void;
            deleteLastSelected: () => void;
            focusAutocompleteInput: (e?: Event | undefined) => void;
            tp: <Key extends string | undefined>(key: Key) => Key;
            t: (key: string, values?: Record<string, string | number | boolean | undefined> | undefined) => string;
            onInputFocus: () => void;
            onInputBlur: () => void;
            focusOptionList: () => void;
            focusSearchBar: () => void;
            searchInput: import("vue").Ref<string>;
            showSearchInput: import("vue").ComputedRef<boolean>;
            hoveredOption: import("vue").Ref<import("../va-select").SelectOption | null>;
            tabIndexComputed: import("vue").ComputedRef<number>;
            valueString: import("vue").ComputedRef<string>;
            showClearIcon: import("vue").ComputedRef<boolean>;
            toggleIcon: import("vue").ComputedRef<string>;
            selectOption: (option: import("../va-select").SelectOption) => void;
            selectOrAddOption: () => void;
            selectHoveredOption: () => void;
            focusPreviousOption: () => any;
            focusNextOption: () => any;
            showDropdownContentComputed: import("vue").WritableComputedRef<boolean>;
            handleDropdownOpen: () => void;
            handleDropdownClose: () => void;
            hideAndFocus: () => void;
            toggleIconColor: import("vue").ComputedRef<string>;
            onHintedSearch: (event: KeyboardEvent) => void;
            onScrollBottom: () => void;
            clearIconProps: import("vue").ComputedRef<{
                name: string;
                color: string;
                size: string;
            }>;
            dropdownPropsComputed: import("vue").ComputedRef<{
                closeOnContentClick: boolean;
                stateful: boolean;
                offset: import("../va-dropdown/types").DropdownOffsetProp;
                keepAnchorWidth: boolean;
                keyboardNavigation: boolean;
                innerAnchorSelector: string;
                'aria-label': string;
                readonly: boolean;
                disabled: boolean;
                cursor: boolean;
                placement: import("../../composables").PlacementWithAlias;
                autoPlacement: boolean;
                stickToEdges: boolean;
                anchorSelector: string;
                preventOverflow: boolean;
                isContentHoverable: boolean;
                closeOnClickOutside: boolean;
                closeOnAnchorClick: boolean;
                hoverOverTimeout: number;
                hoverOutTimeout: number;
                trigger: "none" | "click" | "dblclick" | "right-click" | "hover";
                preset?: string | undefined;
                modelValue?: boolean | undefined;
                target?: import("../../composables").MaybeHTMLElementOrSelector;
            }>;
            visibleSelectedOptions: import("vue").ComputedRef<import("../va-select").SelectOption[]>;
            optionsListPropsComputed: import("vue").ComputedRef<{
                autoSelectFirstOption: boolean;
                search: string;
                tabindex: number;
                selectedValue: import("../va-select").SelectOption | import("../va-select").SelectOption[];
                options: import("../va-select").SelectOption[];
                getSelectedState: (option: import("../va-select").SelectOption) => boolean;
                noOptionsText: string;
                color: string;
                textBy: string | ((option: import("../va-select").SelectOption) => unknown);
                trackBy: string | ((option: import("../va-select").SelectOption) => unknown);
                disabledBy: string | ((option: import("../va-select").SelectOption) => unknown);
                groupBy: string | ((option: import("../va-select").SelectOption) => unknown);
                delay: number;
                virtualScroller: boolean;
                highlightMatchedText: boolean;
                minSearchChars: number;
            }>;
            toggleHiddenOptionsState: () => boolean;
            setAutocompleteValue: (v: string) => string;
            inputWrapperPropsComputed: import("vue").ComputedRef<{
                error: boolean;
                errorMessages: string[];
                focused: boolean;
                tabindex: number;
                label: string;
                success: boolean;
                color: string;
                bordered: boolean;
                outline: boolean;
                messages: string | string[];
                requiredMark: boolean;
            }>;
            inputWrapperClassComputed: {
                [x: `va-select-anchor--${string}`]: boolean;
            } & {
                readonly asObject: import("vue").ComputedRef<{
                    [x: `va-select-anchor--${string}`]: boolean;
                }>;
                readonly asArray: import("vue").ComputedRef<`va-select-anchor--${string}`[]>;
                readonly asString: import("vue").ComputedRef<string>;
            };
            selectContentPropsComputed: import("vue").ComputedRef<{
                tabindex: number;
                value: import("../va-select").SelectOption[];
                valueString: string;
                hiddenSelectedOptionsAmount: number;
                isAllOptionsShown: boolean;
                focused: boolean | undefined;
                autocompleteInputValue: string;
                getText: (option: import("../va-select").SelectOption) => string;
                disabled: boolean;
                multiple: boolean;
                placeholder: string;
                autocomplete: boolean;
            }>;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, string[], string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            modelValue: {
                type: import("vue").PropType<import("../va-select").SelectOption | import("../va-select").SelectOption[]>;
                default: string;
            };
            placement: {
                type: import("vue").PropType<import("../va-select").Placement>;
                default: string;
                validator: (placement: string) => boolean;
            };
            allowCreate: {
                type: import("vue").PropType<boolean | "unique">;
                default: boolean;
                validator: (mode: string | boolean) => boolean;
            };
            color: {
                type: StringConstructor;
                default: string;
            };
            multiple: {
                type: BooleanConstructor;
                default: boolean;
            };
            searchable: {
                type: BooleanConstructor;
                default: boolean;
            };
            width: {
                type: StringConstructor;
                default: string;
            };
            maxHeight: {
                type: StringConstructor;
                default: string;
            };
            noOptionsText: {
                type: StringConstructor;
                default: string;
            };
            hideSelected: {
                type: BooleanConstructor;
                default: boolean;
            };
            tabindex: {
                type: NumberConstructor;
                default: number;
            };
            virtualScroller: {
                type: BooleanConstructor;
                default: boolean;
            };
            selectedTopShown: {
                type: BooleanConstructor;
                default: boolean;
            };
            highlightMatchedText: {
                type: BooleanConstructor;
                default: boolean;
            };
            minSearchChars: {
                type: NumberConstructor;
                default: number;
            };
            autoSelectFirstOption: {
                type: BooleanConstructor;
                default: boolean;
            };
            outline: {
                type: BooleanConstructor;
                default: boolean;
            };
            bordered: {
                type: BooleanConstructor;
                default: boolean;
            };
            label: {
                type: StringConstructor;
                default: string;
            };
            placeholder: {
                type: StringConstructor;
                default: string;
            };
            searchPlaceholderText: {
                type: StringConstructor;
                default: string;
            };
            requiredMark: {
                type: BooleanConstructor;
                default: boolean;
            };
            autocomplete: {
                type: BooleanConstructor;
                default: boolean;
            };
            separator: {
                type: StringConstructor;
                default: string;
            };
            delay: {
                type: NumberConstructor;
                default: number;
                validator: (value: number) => boolean;
            };
            dropdownIcon: {
                type: import("vue").PropType<string | import("../va-select").SelectDropdownIcon>;
                default: () => import("../va-select").SelectDropdownIcon;
                validator: (value: string | import("../va-select").SelectDropdownIcon) => boolean;
            };
            maxVisibleOptions: {
                type: NumberConstructor;
                default: number;
            };
            disabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            readonly: {
                type: BooleanConstructor;
                default: boolean;
            };
            clearable: {
                type: BooleanConstructor;
                default: boolean;
            };
            clearableIcon: {
                type: StringConstructor;
                default: string;
            };
            clearValue: {
                type: StringConstructor;
                default: string;
            };
            maxSelections: {
                type: (StringConstructor | NumberConstructor)[];
                default: undefined;
            };
            loading: {
                type: BooleanConstructor;
                default: boolean;
            };
            error: {
                type: BooleanConstructor;
                default: undefined;
            };
            errorMessages: {
                type: import("vue").PropType<string | string[]>;
                default: undefined;
            };
            errorCount: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            rules: {
                type: import("vue").PropType<import("../../composables").ValidationRule<any>[]>;
                default: () => any;
            } & {
                type: import("vue").PropType<import("../../composables").ValidationRule<import("../va-select").SelectOption>[]>;
            };
            success: {
                type: BooleanConstructor;
                default: boolean;
            };
            messages: {
                type: import("vue").PropType<string | string[]>;
                default: () => never[];
            };
            immediateValidation: {
                type: BooleanConstructor;
                default: boolean;
            };
            options: {
                type: import("vue").PropType<import("../va-select").SelectOption[]>;
                default: () => never[];
            };
            textBy: {
                type: import("vue").PropType<string | ((option: import("../va-select").SelectOption) => unknown)>;
                default: string;
            };
            valueBy: {
                type: import("vue").PropType<string | ((option: import("../va-select").SelectOption) => unknown)>;
                default: string;
            };
            trackBy: {
                type: import("vue").PropType<string | ((option: import("../va-select").SelectOption) => unknown)>;
                default: string;
            };
            disabledBy: {
                type: import("vue").PropType<string | ((option: import("../va-select").SelectOption) => unknown)>;
                default: string;
            };
            groupBy: {
                type: import("vue").PropType<string | ((option: import("../va-select").SelectOption) => unknown)>;
                default: string;
            };
            preset: {
                type: StringConstructor;
                default: undefined;
            };
            stateful: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            cursor: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            offset: {
                type: import("vue").PropType<import("../va-dropdown/types").DropdownOffsetProp>;
                required: true;
                default: import("../va-dropdown/types").DropdownOffsetProp;
            };
            keepAnchorWidth: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            autoPlacement: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            stickToEdges: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            anchorSelector: {
                type: import("vue").PropType<string>;
                required: true;
                default: string;
            };
            innerAnchorSelector: {
                type: import("vue").PropType<string>;
                required: true;
                default: string;
            };
            preventOverflow: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            isContentHoverable: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            closeOnContentClick: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            closeOnClickOutside: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            closeOnAnchorClick: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            hoverOverTimeout: {
                type: import("vue").PropType<number>;
                required: true;
                default: number;
            };
            hoverOutTimeout: {
                type: import("vue").PropType<number>;
                required: true;
                default: number;
            };
            trigger: {
                type: import("vue").PropType<"none" | "click" | "dblclick" | "right-click" | "hover">;
                required: true;
                default: "none" | "click" | "dblclick" | "right-click" | "hover";
            };
            keyboardNavigation: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            target: {
                type: import("vue").PropType<import("../../composables").MaybeHTMLElementOrSelector>;
                required: false;
                default: undefined;
            };
        }>> & {
            [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
        }, {
            readonly: boolean;
            label: string;
            success: boolean;
            color: string;
            preset: string;
            tabindex: number;
            modelValue: import("../va-select").SelectOption | import("../va-select").SelectOption[];
            disabled: boolean;
            target: import("../../composables").MaybeHTMLElementOrSelector;
            loading: boolean;
            bordered: boolean;
            maxHeight: string;
            stateful: boolean;
            cursor: boolean;
            width: string;
            offset: import("../va-dropdown/types").DropdownOffsetProp;
            outline: boolean;
            separator: string;
            multiple: boolean;
            error: boolean;
            placement: import("../va-select").Placement;
            keepAnchorWidth: boolean;
            autoPlacement: boolean;
            stickToEdges: boolean;
            errorMessages: string | string[];
            errorCount: string | number;
            rules: import("../../composables").ValidationRule<import("../va-select").SelectOption>[];
            messages: string | string[];
            immediateValidation: boolean;
            options: import("../va-select").SelectOption[];
            textBy: string | ((option: import("../va-select").SelectOption) => unknown);
            valueBy: string | ((option: import("../va-select").SelectOption) => unknown);
            trackBy: string | ((option: import("../va-select").SelectOption) => unknown);
            disabledBy: string | ((option: import("../va-select").SelectOption) => unknown);
            groupBy: string | ((option: import("../va-select").SelectOption) => unknown);
            delay: number;
            anchorSelector: string;
            innerAnchorSelector: string;
            preventOverflow: boolean;
            isContentHoverable: boolean;
            closeOnContentClick: boolean;
            closeOnClickOutside: boolean;
            closeOnAnchorClick: boolean;
            hoverOverTimeout: number;
            hoverOutTimeout: number;
            trigger: "none" | "click" | "dblclick" | "right-click" | "hover";
            keyboardNavigation: boolean;
            placeholder: string;
            autocomplete: boolean;
            requiredMark: boolean;
            clearable: boolean;
            clearableIcon: string;
            clearValue: string;
            virtualScroller: boolean;
            highlightMatchedText: boolean;
            minSearchChars: number;
            noOptionsText: string;
            autoSelectFirstOption: boolean;
            maxVisibleOptions: number;
            dropdownIcon: string | import("../va-select").SelectDropdownIcon;
            allowCreate: boolean | "unique";
            searchable: boolean;
            hideSelected: boolean;
            selectedTopShown: boolean;
            searchPlaceholderText: string;
            maxSelections: string | number;
        }>;
        VaButton: import("vue").DefineComponent<{
            tag: {
                type: StringConstructor;
                default: string;
            };
            type: {
                type: StringConstructor;
                default: string;
            };
            block: {
                type: BooleanConstructor;
                default: boolean;
            };
            disabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            color: {
                type: StringConstructor;
                default: string;
            };
            textColor: {
                type: StringConstructor;
                default: string;
            };
            textOpacity: {
                type: NumberConstructor;
                default: number;
            };
            backgroundOpacity: {
                type: NumberConstructor;
                default: number;
            };
            borderColor: {
                type: StringConstructor;
                default: string;
            };
            gradient: {
                type: BooleanConstructor;
                default: boolean;
            };
            plain: {
                type: BooleanConstructor;
                default: boolean;
            };
            round: {
                type: BooleanConstructor;
                default: boolean;
            };
            size: {
                type: import("vue").PropType<"small" | "medium" | "large">;
                default: string;
                validator: (v: string) => boolean;
            };
            icon: {
                type: StringConstructor;
                default: string;
            };
            iconRight: {
                type: StringConstructor;
                default: string;
            };
            iconColor: {
                type: StringConstructor;
                default: string;
            };
            to: {
                type: import("vue").PropType<string | Record<string, any>>;
                default: string;
            };
            replace: {
                type: BooleanConstructor;
                default: boolean;
            };
            append: {
                type: BooleanConstructor;
                default: boolean;
            };
            exact: {
                type: BooleanConstructor;
                default: boolean;
            };
            activeClass: {
                type: StringConstructor;
                default: string;
            };
            exactActiveClass: {
                type: StringConstructor;
                default: string;
            };
            href: {
                type: StringConstructor;
                default: string;
            };
            target: {
                type: StringConstructor;
                default: string;
            };
            loading: {
                type: BooleanConstructor;
                default: boolean;
            };
            pressedBehavior: {
                type: import("vue").PropType<"mask" | "opacity">;
                default: string;
                validator: (value: string) => boolean;
            };
            pressedOpacity: {
                type: NumberConstructor;
                default: number;
            };
            pressedMaskColor: {
                type: StringConstructor;
                default: string;
            };
            hoverBehavior: {
                type: import("vue").PropType<"mask" | "opacity">;
                default: string;
                validator: (value: string) => boolean;
            };
            hoverOpacity: {
                type: NumberConstructor;
                default: number;
            };
            hoverMaskColor: {
                type: StringConstructor;
                default: string;
            };
            sizesConfig: {
                type: import("vue").PropType<Record<string, any>>;
                default: () => import("../../services/global-config").SizeConfig;
            };
            fontSizesConfig: {
                type: import("vue").PropType<Record<string, any>>;
                default: () => import("../../services/global-config").SizeConfig;
            };
            preset: {
                type: StringConstructor;
                default: undefined;
            };
        }, {
            focus: () => void;
            blur: () => void;
            button: import("vue").ShallowRef<HTMLElement | undefined>;
            tagComputed: import("vue").ComputedRef<string>;
            computedClass: {
                [x: `va-button--${string}`]: boolean;
            } & {
                readonly asObject: import("vue").ComputedRef<{
                    [x: `va-button--${string}`]: boolean;
                }>;
                readonly asArray: import("vue").ComputedRef<`va-button--${string}`[]>;
                readonly asString: import("vue").ComputedRef<string>;
            };
            computedStyle: import("vue").ComputedRef<{
                color: string;
                background?: string | undefined;
                opacity?: number | undefined;
                'background-clip'?: "text" | undefined;
                '-webkit-background-clip'?: "text" | undefined;
                borderColor: string;
            }>;
            textColorComputed: import("vue").ComputedRef<string>;
            loaderSizeComputed: import("vue").ComputedRef<string>;
            attributesComputed: import("vue").ComputedRef<{
                'aria-disabled': boolean;
                disabled: boolean;
                type?: any;
                tabindex?: number | undefined;
                target?: string | undefined;
                href?: any;
                to?: string | Record<string, any> | undefined;
                replace?: boolean | undefined;
                append?: boolean | undefined;
                activeClass?: string | undefined;
                exact?: boolean | undefined;
                exactActiveClass?: string | undefined;
            }>;
            wrapperClassComputed: import("vue").ComputedRef<{
                'va-button__content--loading': boolean;
            }>;
            iconAttributesComputed: import("vue").ComputedRef<{
                size: "small" | "medium" | "large";
                color: string;
            }>;
            backgroundColor: import("vue").ComputedRef<string>;
            backgroundMaskColor: import("vue").ComputedRef<string>;
            backgroundMaskOpacity: import("vue").ComputedRef<number>;
            backgroundColorOpacity: import("vue").ComputedRef<number>;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            tag: {
                type: StringConstructor;
                default: string;
            };
            type: {
                type: StringConstructor;
                default: string;
            };
            block: {
                type: BooleanConstructor;
                default: boolean;
            };
            disabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            color: {
                type: StringConstructor;
                default: string;
            };
            textColor: {
                type: StringConstructor;
                default: string;
            };
            textOpacity: {
                type: NumberConstructor;
                default: number;
            };
            backgroundOpacity: {
                type: NumberConstructor;
                default: number;
            };
            borderColor: {
                type: StringConstructor;
                default: string;
            };
            gradient: {
                type: BooleanConstructor;
                default: boolean;
            };
            plain: {
                type: BooleanConstructor;
                default: boolean;
            };
            round: {
                type: BooleanConstructor;
                default: boolean;
            };
            size: {
                type: import("vue").PropType<"small" | "medium" | "large">;
                default: string;
                validator: (v: string) => boolean;
            };
            icon: {
                type: StringConstructor;
                default: string;
            };
            iconRight: {
                type: StringConstructor;
                default: string;
            };
            iconColor: {
                type: StringConstructor;
                default: string;
            };
            to: {
                type: import("vue").PropType<string | Record<string, any>>;
                default: string;
            };
            replace: {
                type: BooleanConstructor;
                default: boolean;
            };
            append: {
                type: BooleanConstructor;
                default: boolean;
            };
            exact: {
                type: BooleanConstructor;
                default: boolean;
            };
            activeClass: {
                type: StringConstructor;
                default: string;
            };
            exactActiveClass: {
                type: StringConstructor;
                default: string;
            };
            href: {
                type: StringConstructor;
                default: string;
            };
            target: {
                type: StringConstructor;
                default: string;
            };
            loading: {
                type: BooleanConstructor;
                default: boolean;
            };
            pressedBehavior: {
                type: import("vue").PropType<"mask" | "opacity">;
                default: string;
                validator: (value: string) => boolean;
            };
            pressedOpacity: {
                type: NumberConstructor;
                default: number;
            };
            pressedMaskColor: {
                type: StringConstructor;
                default: string;
            };
            hoverBehavior: {
                type: import("vue").PropType<"mask" | "opacity">;
                default: string;
                validator: (value: string) => boolean;
            };
            hoverOpacity: {
                type: NumberConstructor;
                default: number;
            };
            hoverMaskColor: {
                type: StringConstructor;
                default: string;
            };
            sizesConfig: {
                type: import("vue").PropType<Record<string, any>>;
                default: () => import("../../services/global-config").SizeConfig;
            };
            fontSizesConfig: {
                type: import("vue").PropType<Record<string, any>>;
                default: () => import("../../services/global-config").SizeConfig;
            };
            preset: {
                type: StringConstructor;
                default: undefined;
            };
        }>>, {
            replace: boolean;
            sizesConfig: Record<string, any>;
            backgroundOpacity: number;
            hoverBehavior: "mask" | "opacity";
            hoverOpacity: number;
            pressedBehavior: "mask" | "opacity";
            pressedOpacity: number;
            plain: boolean;
            textOpacity: number;
            icon: string;
            color: string;
            type: string;
            tag: string;
            preset: string;
            size: "small" | "medium" | "large";
            fontSizesConfig: Record<string, any>;
            block: boolean;
            disabled: boolean;
            textColor: string;
            borderColor: string;
            gradient: boolean;
            round: boolean;
            iconRight: string;
            iconColor: string;
            to: string | Record<string, any>;
            append: boolean;
            exact: boolean;
            activeClass: string;
            exactActiveClass: string;
            href: string;
            target: string;
            loading: boolean;
            pressedMaskColor: string;
            hoverMaskColor: string;
        }>;
        VaDateInput: import("vue").DefineComponent<{
            clearValue: {
                type: import("vue").PropType<import("../va-date-input/types").DateInputModelValue>;
                default: undefined;
            };
            modelValue: {
                type: import("vue").PropType<import("../va-date-input/types").DateInputModelValue>;
            };
            resetOnClose: {
                type: BooleanConstructor;
                default: boolean;
            };
            isOpen: {
                type: BooleanConstructor;
                default: undefined;
            };
            format: {
                type: import("vue").PropType<(date: import("../va-date-input/types").DateInputModelValue) => string>;
            };
            formatDate: {
                type: import("vue").PropType<(date: Date) => string>;
                default: (d: Date) => string;
            };
            parse: {
                type: import("vue").PropType<(input: string) => import("../va-date-input/types").DateInputValue>;
            };
            parseDate: {
                type: import("vue").PropType<(input: string) => Date>;
            };
            parseValue: {
                type: import("vue").PropType<(date: import("../va-date-input/types").DateInputModelValue) => import("../va-date-picker/types").DatePickerModelValue>;
            };
            delimiter: {
                type: StringConstructor;
                default: string;
            };
            rangeDelimiter: {
                type: StringConstructor;
                default: string;
            };
            manualInput: {
                type: BooleanConstructor;
                default: boolean;
            };
            color: {
                type: StringConstructor;
                default: string;
            };
            leftIcon: {
                type: BooleanConstructor;
                default: boolean;
            };
            icon: {
                type: StringConstructor;
                default: string;
            };
            preset: {
                type: StringConstructor;
                default: undefined;
            };
            error: {
                type: BooleanConstructor;
                default: undefined;
            };
            errorMessages: {
                type: import("vue").PropType<string | string[]>;
                default: undefined;
            };
            errorCount: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            rules: {
                type: import("vue").PropType<import("../../composables").ValidationRule<any>[]>;
                default: () => any;
            } & {
                type: import("vue").PropType<import("../../composables").ValidationRule<import("../va-date-input/types").DateInputModelValue>[]>;
            };
            success: {
                type: BooleanConstructor;
                default: boolean;
            };
            messages: {
                type: import("vue").PropType<string | string[]>;
                default: () => never[];
            };
            immediateValidation: {
                type: BooleanConstructor;
                default: boolean;
            };
            readonly: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            type: {
                type: import("vue").PropType<import("../va-date-picker/types").DatePickerType>;
                required: true;
                default: import("../va-date-picker/types").DatePickerType;
            };
            mode: {
                type: import("vue").PropType<import("../va-date-picker/types").DatePickerMode>;
                required: true;
                default: import("../va-date-picker/types").DatePickerMode;
            };
            disabled: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            stateful: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            highlightWeekend: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            highlightToday: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            monthNames: {
                type: import("vue").PropType<string[]>;
                required: true;
                default: string[];
            };
            weekdayNames: {
                type: import("vue").PropType<string[]>;
                required: true;
                default: string[];
            };
            firstWeekday: {
                type: import("vue").PropType<"Monday" | "Sunday">;
                required: true;
                default: "Monday" | "Sunday";
            };
            hideWeekDays: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            showOtherMonths: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            startYear: {
                type: import("vue").PropType<number>;
                required: true;
                default: number;
            };
            endYear: {
                type: import("vue").PropType<number>;
                required: true;
                default: number;
            };
            view: {
                type: import("vue").PropType<import("../va-date-picker/types").DatePickerView | undefined>;
                required: false;
                default: undefined;
            };
            textColor: {
                type: import("vue").PropType<string | undefined>;
                required: false;
                default: undefined;
            };
            "onUpdate:modelValue": {
                type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                required: false;
                default: undefined;
            };
            "onHover:day": {
                type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                required: false;
                default: undefined;
            };
            "onClick:day": {
                type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                required: false;
                default: undefined;
            };
            allowedDays: {
                type: import("vue").PropType<((date: Date) => boolean) | undefined>;
                required: false;
                default: undefined;
            };
            weekends: {
                type: import("vue").PropType<((date: Date) => boolean) | undefined>;
                required: false;
                default: undefined;
            };
            "onUpdate:view": {
                type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                required: false;
                default: undefined;
            };
            "onHover:month": {
                type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                required: false;
                default: undefined;
            };
            "onClick:month": {
                type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                required: false;
                default: undefined;
            };
            allowedMonths: {
                type: import("vue").PropType<((date: Date) => boolean) | undefined>;
                required: false;
                default: undefined;
            };
            "onHover:year": {
                type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                required: false;
                default: undefined;
            };
            "onClick:year": {
                type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                required: false;
                default: undefined;
            };
            allowedYears: {
                type: import("vue").PropType<((date: Date) => boolean) | undefined>;
                required: false;
                default: undefined;
            };
            weekendsColor: {
                type: import("vue").PropType<string | undefined>;
                required: false;
                default: undefined;
            };
            label: {
                type: import("vue").PropType<string>;
                required: true;
                default: string;
            };
            bordered: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            background: {
                type: import("vue").PropType<string>;
                required: true;
                default: string;
            };
            outline: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            focused: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            requiredMark: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            counterValue: {
                type: import("vue").PropType<number | undefined>;
                required: false;
                default: undefined;
            };
            maxLength: {
                type: import("vue").PropType<number | undefined>;
                required: false;
                default: undefined;
            };
            onClick: {
                type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                required: false;
                default: undefined;
            };
            "onClick-prepend": {
                type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                required: false;
                default: undefined;
            };
            "onClick-append": {
                type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                required: false;
                default: undefined;
            };
            "onClick-prepend-inner": {
                type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                required: false;
                default: undefined;
            };
            "onClick-append-inner": {
                type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                required: false;
                default: undefined;
            };
            clearable: {
                type: BooleanConstructor;
                default: boolean;
            };
            clearableIcon: {
                type: StringConstructor;
                default: string;
            };
            cursor: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            offset: {
                type: import("vue").PropType<import("../va-dropdown/types").DropdownOffsetProp>;
                required: true;
                default: import("../va-dropdown/types").DropdownOffsetProp;
            };
            placement: {
                type: import("vue").PropType<import("../../composables").PlacementWithAlias>;
                required: true;
                default: import("../../composables").PlacementWithAlias;
            };
            keepAnchorWidth: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            autoPlacement: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            stickToEdges: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            anchorSelector: {
                type: import("vue").PropType<string>;
                required: true;
                default: string;
            };
            innerAnchorSelector: {
                type: import("vue").PropType<string>;
                required: true;
                default: string;
            };
            preventOverflow: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            isContentHoverable: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            closeOnContentClick: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            closeOnClickOutside: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            closeOnAnchorClick: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            hoverOverTimeout: {
                type: import("vue").PropType<number>;
                required: true;
                default: number;
            };
            hoverOutTimeout: {
                type: import("vue").PropType<number>;
                required: true;
                default: number;
            };
            trigger: {
                type: import("vue").PropType<"none" | "click" | "dblclick" | "right-click" | "hover">;
                required: true;
                default: "none" | "click" | "dblclick" | "right-click" | "hover";
            };
            keyboardNavigation: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            target: {
                type: import("vue").PropType<import("../../composables").MaybeHTMLElementOrSelector>;
                required: false;
                default: undefined;
            };
        }, {
            t: (key: string, values?: Record<string, string | number | boolean | undefined> | undefined) => string;
            datePicker: import("vue").Ref<import("vue").DefineComponent<{
                modelValue: {
                    type: import("vue").PropType<import("../va-date-picker/types").DatePickerModelValue>;
                };
                monthNames: {
                    type: import("vue").PropType<string[]>;
                    default: string[];
                };
                weekdayNames: {
                    type: import("vue").PropType<string[]>;
                    default: string[];
                };
                view: {
                    type: import("vue").PropType<import("../va-date-picker/types").DatePickerView>;
                };
                type: {
                    type: import("vue").PropType<import("../va-date-picker/types").DatePickerType>;
                    default: string;
                };
                readonly: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                disabled: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                color: {
                    type: StringConstructor;
                    default: undefined;
                };
                weekendsColor: {
                    type: StringConstructor;
                    default: undefined;
                };
                mode: {
                    type: import("vue").PropType<import("../va-date-picker/types").DatePickerMode>;
                    required: true;
                    default: import("../va-date-picker/types").DatePickerMode;
                };
                highlightToday: {
                    type: import("vue").PropType<boolean>;
                    required: true;
                    default: boolean;
                };
                startYear: {
                    type: import("vue").PropType<number>;
                    required: true;
                    default: number;
                };
                endYear: {
                    type: import("vue").PropType<number>;
                    required: true;
                    default: number;
                };
                allowedYears: {
                    type: import("vue").PropType<((date: Date) => boolean) | undefined>;
                    required: false;
                    default: undefined;
                };
                "onUpdate:modelValue": {
                    type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                    required: false;
                    default: undefined;
                };
                "onHover:year": {
                    type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                    required: false;
                    default: undefined;
                };
                "onClick:year": {
                    type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                    required: false;
                    default: undefined;
                };
                allowedMonths: {
                    type: import("vue").PropType<((date: Date) => boolean) | undefined>;
                    required: false;
                    default: undefined;
                };
                "onHover:month": {
                    type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                    required: false;
                    default: undefined;
                };
                "onClick:month": {
                    type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                    required: false;
                    default: undefined;
                };
                highlightWeekend: {
                    type: import("vue").PropType<boolean>;
                    required: true;
                    default: boolean;
                };
                firstWeekday: {
                    type: import("vue").PropType<"Monday" | "Sunday">;
                    required: true;
                    default: "Monday" | "Sunday";
                };
                hideWeekDays: {
                    type: import("vue").PropType<boolean>;
                    required: true;
                    default: boolean;
                };
                showOtherMonths: {
                    type: import("vue").PropType<boolean>;
                    required: true;
                    default: boolean;
                };
                allowedDays: {
                    type: import("vue").PropType<((date: Date) => boolean) | undefined>;
                    required: false;
                    default: undefined;
                };
                weekends: {
                    type: import("vue").PropType<((date: Date) => boolean) | undefined>;
                    required: false;
                    default: undefined;
                };
                "onHover:day": {
                    type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                    required: false;
                    default: undefined;
                };
                "onClick:day": {
                    type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                    required: false;
                    default: undefined;
                };
                textColor: {
                    type: import("vue").PropType<string | undefined>;
                    required: false;
                    default: undefined;
                };
                "onUpdate:view": {
                    type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                    required: false;
                    default: undefined;
                };
                preset: {
                    type: StringConstructor;
                    default: undefined;
                };
                stateful: {
                    type: import("vue").PropType<boolean>;
                    default: boolean;
                };
            }, {
                dayPickerProps: import("vue").ComputedRef<import("vue").ExtractPropTypes<{
                    readonly: {
                        type: import("vue").PropType<boolean>;
                        required: true;
                        default: boolean;
                    };
                    view: {
                        type: import("vue").PropType<import("../va-date-picker/types").DatePickerView>;
                        required: true;
                        default: import("../va-date-picker/types").DatePickerView;
                    };
                    color: {
                        type: import("vue").PropType<string>;
                        required: true;
                        default: string;
                    };
                    mode: {
                        type: import("vue").PropType<import("../va-date-picker/types").DatePickerMode>;
                        required: true;
                        default: import("../va-date-picker/types").DatePickerMode;
                    };
                    highlightWeekend: {
                        type: import("vue").PropType<boolean>;
                        required: true;
                        default: boolean;
                    };
                    highlightToday: {
                        type: import("vue").PropType<boolean>;
                        required: true;
                        default: boolean;
                    };
                    monthNames: {
                        type: import("vue").PropType<string[]>;
                        required: true;
                        default: string[];
                    };
                    weekdayNames: {
                        type: import("vue").PropType<string[]>;
                        required: true;
                        default: string[];
                    };
                    firstWeekday: {
                        type: import("vue").PropType<"Monday" | "Sunday">;
                        required: true;
                        default: "Monday" | "Sunday";
                    };
                    hideWeekDays: {
                        type: import("vue").PropType<boolean>;
                        required: true;
                        default: boolean;
                    };
                    showOtherMonths: {
                        type: import("vue").PropType<boolean>;
                        required: true;
                        default: boolean;
                    };
                    modelValue: {
                        type: import("vue").PropType<import("../va-date-picker/types").DatePickerModelValue>;
                        required: false;
                        default: undefined;
                    };
                    allowedDays: {
                        type: import("vue").PropType<((date: Date) => boolean) | undefined>;
                        required: false;
                        default: undefined;
                    };
                    weekends: {
                        type: import("vue").PropType<((date: Date) => boolean) | undefined>;
                        required: false;
                        default: undefined;
                    };
                    "onUpdate:modelValue": {
                        type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                        required: false;
                        default: undefined;
                    };
                    "onHover:day": {
                        type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                        required: false;
                        default: undefined;
                    };
                    "onClick:day": {
                        type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                        required: false;
                        default: undefined;
                    };
                }>>;
                headerProps: import("vue").ComputedRef<import("vue").ExtractPropTypes<{
                    disabled: {
                        type: import("vue").PropType<boolean>;
                        required: true;
                        default: boolean;
                    };
                    monthNames: {
                        type: import("vue").PropType<unknown[]>;
                        required: true;
                        default: unknown[];
                    };
                    view: {
                        type: import("vue").PropType<import("../va-date-picker/types").DatePickerView | undefined>;
                        required: false;
                        default: undefined;
                    };
                    color: {
                        type: import("vue").PropType<string | undefined>;
                        required: false;
                        default: undefined;
                    };
                    textColor: {
                        type: import("vue").PropType<string | undefined>;
                        required: false;
                        default: undefined;
                    };
                    "onUpdate:view": {
                        type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                        required: false;
                        default: undefined;
                    };
                }>>;
                monthPickerProps: import("vue").ComputedRef<import("vue").ExtractPropTypes<{
                    readonly: {
                        type: import("vue").PropType<boolean>;
                        required: true;
                        default: boolean;
                    };
                    view: {
                        type: import("vue").PropType<import("../va-date-picker/types").DatePickerView>;
                        required: true;
                        default: import("../va-date-picker/types").DatePickerView;
                    };
                    color: {
                        type: import("vue").PropType<string>;
                        required: true;
                        default: string;
                    };
                    mode: {
                        type: import("vue").PropType<import("../va-date-picker/types").DatePickerMode>;
                        required: true;
                        default: import("../va-date-picker/types").DatePickerMode;
                    };
                    highlightToday: {
                        type: import("vue").PropType<boolean>;
                        required: true;
                        default: boolean;
                    };
                    monthNames: {
                        type: import("vue").PropType<string[]>;
                        required: true;
                        default: string[];
                    };
                    modelValue: {
                        type: import("vue").PropType<import("../va-date-picker/types").DatePickerModelValue>;
                        required: false;
                        default: undefined;
                    };
                    allowedMonths: {
                        type: import("vue").PropType<((date: Date) => boolean) | undefined>;
                        required: false;
                        default: undefined;
                    };
                    "onUpdate:modelValue": {
                        type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                        required: false;
                        default: undefined;
                    };
                    "onHover:month": {
                        type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                        required: false;
                        default: undefined;
                    };
                    "onClick:month": {
                        type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                        required: false;
                        default: undefined;
                    };
                }>>;
                yearPickerProps: import("vue").ComputedRef<import("vue").ExtractPropTypes<{
                    readonly: {
                        type: import("vue").PropType<boolean>;
                        required: true;
                        default: boolean;
                    };
                    view: {
                        type: import("vue").PropType<import("../va-date-picker/types").DatePickerView>;
                        required: true;
                        default: import("../va-date-picker/types").DatePickerView;
                    };
                    color: {
                        type: import("vue").PropType<string>;
                        required: true;
                        default: string;
                    };
                    mode: {
                        type: import("vue").PropType<import("../va-date-picker/types").DatePickerMode>;
                        required: true;
                        default: import("../va-date-picker/types").DatePickerMode;
                    };
                    highlightToday: {
                        type: import("vue").PropType<boolean>;
                        required: true;
                        default: boolean;
                    };
                    startYear: {
                        type: import("vue").PropType<number>;
                        required: true;
                        default: number;
                    };
                    endYear: {
                        type: import("vue").PropType<number>;
                        required: true;
                        default: number;
                    };
                    modelValue: {
                        type: import("vue").PropType<import("../va-date-picker/types").DatePickerModelValue>;
                        required: false;
                        default: undefined;
                    };
                    allowedYears: {
                        type: import("vue").PropType<((date: Date) => boolean) | undefined>;
                        required: false;
                        default: undefined;
                    };
                    "onUpdate:modelValue": {
                        type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                        required: false;
                        default: undefined;
                    };
                    "onHover:year": {
                        type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                        required: false;
                        default: undefined;
                    };
                    "onClick:year": {
                        type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                        required: false;
                        default: undefined;
                    };
                }>>;
                syncView: import("vue").WritableComputedRef<import("../va-date-picker/types").DatePickerView>;
                classComputed: import("vue").ComputedRef<{
                    'va-date-picker_without-week-days': boolean;
                    'va-date-picker_disabled': boolean;
                }>;
                valueComputed: import("vue").WritableComputedRef<any>;
                onDayModelValueUpdate: (modelValue: import("../va-date-picker/types").DatePickerModelValue) => void;
                onMonthClick: (date: Date) => void;
                onMonthModelValueUpdate: (modelValue: import("../va-date-picker/types").DatePickerModelValue) => void;
                onYearClick: (date: Date) => void;
                onYearModelValueUpdate: (modelValue: import("../va-date-picker/types").DatePickerModelValue) => void;
                styleComputed: import("vue").ComputedRef<{
                    color: string;
                }>;
                currentPicker: import("vue").Ref<import("vue").DefineComponent<{
                    monthNames: {
                        type: import("vue").PropType<string[]>;
                        required: true;
                    };
                    weekdayNames: {
                        type: import("vue").PropType<string[]>;
                        required: true;
                    };
                    firstWeekday: {
                        type: import("vue").PropType<"Monday" | "Sunday">;
                        default: string;
                    };
                    hideWeekDays: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    view: {
                        type: import("vue").PropType<import("../va-date-picker/types").DatePickerView>;
                        default: () => {
                            type: string;
                        };
                    };
                    modelValue: {
                        type: import("vue").PropType<import("../va-date-picker/types").DatePickerModelValue>;
                    };
                    mode: {
                        type: import("vue").PropType<import("../va-date-picker/types").DatePickerMode>;
                        default: string;
                    };
                    showOtherMonths: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    allowedDays: {
                        type: import("vue").PropType<(date: Date) => boolean>;
                    };
                    weekends: {
                        type: import("vue").PropType<(date: Date) => boolean>;
                    };
                    highlightWeekend: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    highlightToday: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    readonly: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    color: {
                        type: StringConstructor;
                        default: string;
                    };
                }, {
                    hoveredIndex: import("vue").Ref<number>;
                    calendarDates: import("vue").ComputedRef<Date[]>;
                    onClick: (date: Date) => void;
                    isToday: (date: Date) => boolean;
                    isSelected: (date: Date) => boolean;
                    isInRange: (date: Date) => boolean;
                    isOtherMonth: (date: Date) => boolean;
                    isDateDisabled: (date: Date) => boolean;
                    isDateWeekend: (date: Date) => boolean;
                    containerAttributes: {
                        onFocus: () => void;
                        onKeydown: (e: KeyboardEvent) => void;
                        onBlur: () => void;
                        onMousedown: () => void;
                        tabindex: number;
                    };
                    weekdayNamesComputed: import("vue").ComputedRef<string[]>;
                    focusedCellIndex: import("vue").Ref<number>;
                }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "hover:day" | "click:day")[], "update:modelValue" | "hover:day" | "click:day", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
                    monthNames: {
                        type: import("vue").PropType<string[]>;
                        required: true;
                    };
                    weekdayNames: {
                        type: import("vue").PropType<string[]>;
                        required: true;
                    };
                    firstWeekday: {
                        type: import("vue").PropType<"Monday" | "Sunday">;
                        default: string;
                    };
                    hideWeekDays: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    view: {
                        type: import("vue").PropType<import("../va-date-picker/types").DatePickerView>;
                        default: () => {
                            type: string;
                        };
                    };
                    modelValue: {
                        type: import("vue").PropType<import("../va-date-picker/types").DatePickerModelValue>;
                    };
                    mode: {
                        type: import("vue").PropType<import("../va-date-picker/types").DatePickerMode>;
                        default: string;
                    };
                    showOtherMonths: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    allowedDays: {
                        type: import("vue").PropType<(date: Date) => boolean>;
                    };
                    weekends: {
                        type: import("vue").PropType<(date: Date) => boolean>;
                    };
                    highlightWeekend: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    highlightToday: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    readonly: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    color: {
                        type: StringConstructor;
                        default: string;
                    };
                }>> & {
                    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
                    "onHover:day"?: ((...args: any[]) => any) | undefined;
                    "onClick:day"?: ((...args: any[]) => any) | undefined;
                }, {
                    readonly: boolean;
                    view: import("../va-date-picker/types").DatePickerView;
                    color: string;
                    mode: import("../va-date-picker/types").DatePickerMode;
                    highlightWeekend: boolean;
                    highlightToday: boolean;
                    firstWeekday: "Monday" | "Sunday";
                    hideWeekDays: boolean;
                    showOtherMonths: boolean;
                }> | import("vue").DefineComponent<{
                    modelValue: {
                        type: import("vue").PropType<import("../va-date-picker/types").DatePickerModelValue>;
                    };
                    monthNames: {
                        type: import("vue").PropType<string[]>;
                        required: true;
                    };
                    view: {
                        type: import("vue").PropType<import("../va-date-picker/types").DatePickerView>;
                        default: () => {
                            type: string;
                        };
                    };
                    allowedMonths: {
                        type: import("vue").PropType<(date: Date) => boolean>;
                        default: undefined;
                    };
                    highlightToday: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    mode: {
                        type: import("vue").PropType<import("../va-date-picker/types").DatePickerMode>;
                        default: string;
                    };
                    readonly: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    color: {
                        type: StringConstructor;
                        default: string;
                    };
                }, {
                    months: import("vue").ComputedRef<Date[]>;
                    hoveredIndex: import("vue").Ref<number>;
                    onClick: (date: Date) => void;
                    isToday: (date: Date) => boolean;
                    isSelected: (date: Date) => boolean;
                    isInRange: (date: Date) => boolean;
                    isDisabled: (date: Date) => boolean;
                    containerAttributes: {
                        onFocus: () => void;
                        onKeydown: (e: KeyboardEvent) => void;
                        onBlur: () => void;
                        onMousedown: () => void;
                        tabindex: number;
                    };
                    focusedCellIndex: import("vue").Ref<number>;
                }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "hover:month" | "click:month")[], "update:modelValue" | "hover:month" | "click:month", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
                    modelValue: {
                        type: import("vue").PropType<import("../va-date-picker/types").DatePickerModelValue>;
                    };
                    monthNames: {
                        type: import("vue").PropType<string[]>;
                        required: true;
                    };
                    view: {
                        type: import("vue").PropType<import("../va-date-picker/types").DatePickerView>;
                        default: () => {
                            type: string;
                        };
                    };
                    allowedMonths: {
                        type: import("vue").PropType<(date: Date) => boolean>;
                        default: undefined;
                    };
                    highlightToday: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    mode: {
                        type: import("vue").PropType<import("../va-date-picker/types").DatePickerMode>;
                        default: string;
                    };
                    readonly: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    color: {
                        type: StringConstructor;
                        default: string;
                    };
                }>> & {
                    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
                    "onHover:month"?: ((...args: any[]) => any) | undefined;
                    "onClick:month"?: ((...args: any[]) => any) | undefined;
                }, {
                    readonly: boolean;
                    view: import("../va-date-picker/types").DatePickerView;
                    color: string;
                    mode: import("../va-date-picker/types").DatePickerMode;
                    highlightToday: boolean;
                    allowedMonths: (date: Date) => boolean;
                }> | import("vue").DefineComponent<{
                    modelValue: {
                        type: import("vue").PropType<import("../va-date-picker/types").DatePickerModelValue>;
                    };
                    allowedYears: {
                        type: import("vue").PropType<(date: Date) => boolean>;
                        default: undefined;
                    };
                    highlightToday: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    startYear: {
                        type: NumberConstructor;
                        default: number;
                    };
                    mode: {
                        type: import("vue").PropType<import("../va-date-picker/types").DatePickerMode>;
                        default: string;
                    };
                    view: {
                        type: import("vue").PropType<import("../va-date-picker/types").DatePickerView>;
                        default: () => {
                            type: string;
                        };
                    };
                    endYear: {
                        type: NumberConstructor;
                        default: () => number;
                    };
                    readonly: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    color: {
                        type: StringConstructor;
                        default: string;
                    };
                }, {
                    hoveredIndex: import("vue").Ref<number>;
                    years: import("vue").ComputedRef<Date[]>;
                    rootNode: import("vue").ShallowRef<HTMLElement | undefined>;
                    onClick: (date: Date) => void;
                    isToday: (date: Date) => boolean;
                    isSelected: (date: Date) => boolean;
                    isInRange: (date: Date) => boolean;
                    isYearDisabled: (year: Date) => boolean;
                    focusedCellIndex: import("vue").Ref<number>;
                    containerAttributes: {
                        onFocus: () => void;
                        onKeydown: (e: KeyboardEvent) => void;
                        onBlur: () => void;
                        onMousedown: () => void;
                        tabindex: number;
                    };
                }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "hover:year" | "click:year")[], "update:modelValue" | "hover:year" | "click:year", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
                    modelValue: {
                        type: import("vue").PropType<import("../va-date-picker/types").DatePickerModelValue>;
                    };
                    allowedYears: {
                        type: import("vue").PropType<(date: Date) => boolean>;
                        default: undefined;
                    };
                    highlightToday: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    startYear: {
                        type: NumberConstructor;
                        default: number;
                    };
                    mode: {
                        type: import("vue").PropType<import("../va-date-picker/types").DatePickerMode>;
                        default: string;
                    };
                    view: {
                        type: import("vue").PropType<import("../va-date-picker/types").DatePickerView>;
                        default: () => {
                            type: string;
                        };
                    };
                    endYear: {
                        type: NumberConstructor;
                        default: () => number;
                    };
                    readonly: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    color: {
                        type: StringConstructor;
                        default: string;
                    };
                }>> & {
                    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
                    "onHover:year"?: ((...args: any[]) => any) | undefined;
                    "onClick:year"?: ((...args: any[]) => any) | undefined;
                }, {
                    readonly: boolean;
                    view: import("../va-date-picker/types").DatePickerView;
                    color: string;
                    mode: import("../va-date-picker/types").DatePickerMode;
                    highlightToday: boolean;
                    allowedYears: (date: Date) => boolean;
                    startYear: number;
                    endYear: number;
                }> | undefined>;
                textColorComputed: import("vue").ComputedRef<string>;
                focusCurrentPicker: () => any;
                isPickerReadonly: (pickerName: "year" | "month" | "day") => boolean;
            }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, string[], string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
                modelValue: {
                    type: import("vue").PropType<import("../va-date-picker/types").DatePickerModelValue>;
                };
                monthNames: {
                    type: import("vue").PropType<string[]>;
                    default: string[];
                };
                weekdayNames: {
                    type: import("vue").PropType<string[]>;
                    default: string[];
                };
                view: {
                    type: import("vue").PropType<import("../va-date-picker/types").DatePickerView>;
                };
                type: {
                    type: import("vue").PropType<import("../va-date-picker/types").DatePickerType>;
                    default: string;
                };
                readonly: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                disabled: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                color: {
                    type: StringConstructor;
                    default: undefined;
                };
                weekendsColor: {
                    type: StringConstructor;
                    default: undefined;
                };
                mode: {
                    type: import("vue").PropType<import("../va-date-picker/types").DatePickerMode>;
                    required: true;
                    default: import("../va-date-picker/types").DatePickerMode;
                };
                highlightToday: {
                    type: import("vue").PropType<boolean>;
                    required: true;
                    default: boolean;
                };
                startYear: {
                    type: import("vue").PropType<number>;
                    required: true;
                    default: number;
                };
                endYear: {
                    type: import("vue").PropType<number>;
                    required: true;
                    default: number;
                };
                allowedYears: {
                    type: import("vue").PropType<((date: Date) => boolean) | undefined>;
                    required: false;
                    default: undefined;
                };
                "onUpdate:modelValue": {
                    type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                    required: false;
                    default: undefined;
                };
                "onHover:year": {
                    type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                    required: false;
                    default: undefined;
                };
                "onClick:year": {
                    type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                    required: false;
                    default: undefined;
                };
                allowedMonths: {
                    type: import("vue").PropType<((date: Date) => boolean) | undefined>;
                    required: false;
                    default: undefined;
                };
                "onHover:month": {
                    type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                    required: false;
                    default: undefined;
                };
                "onClick:month": {
                    type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                    required: false;
                    default: undefined;
                };
                highlightWeekend: {
                    type: import("vue").PropType<boolean>;
                    required: true;
                    default: boolean;
                };
                firstWeekday: {
                    type: import("vue").PropType<"Monday" | "Sunday">;
                    required: true;
                    default: "Monday" | "Sunday";
                };
                hideWeekDays: {
                    type: import("vue").PropType<boolean>;
                    required: true;
                    default: boolean;
                };
                showOtherMonths: {
                    type: import("vue").PropType<boolean>;
                    required: true;
                    default: boolean;
                };
                allowedDays: {
                    type: import("vue").PropType<((date: Date) => boolean) | undefined>;
                    required: false;
                    default: undefined;
                };
                weekends: {
                    type: import("vue").PropType<((date: Date) => boolean) | undefined>;
                    required: false;
                    default: undefined;
                };
                "onHover:day": {
                    type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                    required: false;
                    default: undefined;
                };
                "onClick:day": {
                    type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                    required: false;
                    default: undefined;
                };
                textColor: {
                    type: import("vue").PropType<string | undefined>;
                    required: false;
                    default: undefined;
                };
                "onUpdate:view": {
                    type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                    required: false;
                    default: undefined;
                };
                preset: {
                    type: StringConstructor;
                    default: undefined;
                };
                stateful: {
                    type: import("vue").PropType<boolean>;
                    default: boolean;
                };
            }>> & {
                [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
            }, {
                readonly: boolean;
                color: string;
                type: import("../va-date-picker/types").DatePickerType;
                preset: string;
                mode: import("../va-date-picker/types").DatePickerMode;
                disabled: boolean;
                textColor: string | undefined;
                stateful: boolean;
                "onUpdate:modelValue": ((...args: any[]) => any) | undefined;
                highlightWeekend: boolean;
                highlightToday: boolean;
                "onHover:day": ((...args: any[]) => any) | undefined;
                "onClick:day": ((...args: any[]) => any) | undefined;
                monthNames: string[];
                weekdayNames: string[];
                firstWeekday: "Monday" | "Sunday";
                hideWeekDays: boolean;
                showOtherMonths: boolean;
                allowedDays: ((date: Date) => boolean) | undefined;
                weekends: ((date: Date) => boolean) | undefined;
                "onUpdate:view": ((...args: any[]) => any) | undefined;
                "onHover:month": ((...args: any[]) => any) | undefined;
                "onClick:month": ((...args: any[]) => any) | undefined;
                allowedMonths: ((date: Date) => boolean) | undefined;
                "onHover:year": ((...args: any[]) => any) | undefined;
                "onClick:year": ((...args: any[]) => any) | undefined;
                allowedYears: ((date: Date) => boolean) | undefined;
                startYear: number;
                endYear: number;
                weekendsColor: string;
            }> | undefined>;
            valueText: import("vue").ComputedRef<string>;
            valueWithoutText: import("vue").WritableComputedRef<import("../va-date-input/types").DateInputValue>;
            valueComputed: import("vue").WritableComputedRef<string | {
                toString: () => string;
                toDateString: () => string;
                toTimeString: () => string;
                toLocaleString: {
                    (): string;
                    (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                };
                toLocaleDateString: {
                    (): string;
                    (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                };
                toLocaleTimeString: {
                    (): string;
                    (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                };
                valueOf: () => number;
                getTime: () => number;
                getFullYear: () => number;
                getUTCFullYear: () => number;
                getMonth: () => number;
                getUTCMonth: () => number;
                getDate: () => number;
                getUTCDate: () => number;
                getDay: () => number;
                getUTCDay: () => number;
                getHours: () => number;
                getUTCHours: () => number;
                getMinutes: () => number;
                getUTCMinutes: () => number;
                getSeconds: () => number;
                getUTCSeconds: () => number;
                getMilliseconds: () => number;
                getUTCMilliseconds: () => number;
                getTimezoneOffset: () => number;
                setTime: (time: number) => number;
                setMilliseconds: (ms: number) => number;
                setUTCMilliseconds: (ms: number) => number;
                setSeconds: (sec: number, ms?: number | undefined) => number;
                setUTCSeconds: (sec: number, ms?: number | undefined) => number;
                setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                setDate: (date: number) => number;
                setUTCDate: (date: number) => number;
                setMonth: (month: number, date?: number | undefined) => number;
                setUTCMonth: (month: number, date?: number | undefined) => number;
                setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                toUTCString: () => string;
                toISOString: () => string;
                toJSON: (key?: any) => string;
                [Symbol.toPrimitive]: {
                    (hint: "default"): string;
                    (hint: "string"): string;
                    (hint: "number"): number;
                    (hint: string): string | number;
                };
            } | {
                start?: string | {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: {
                        (): string;
                        (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                    };
                    toLocaleDateString: {
                        (): string;
                        (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                    };
                    toLocaleTimeString: {
                        (): string;
                        (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                    };
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number | undefined) => number;
                    setUTCSeconds: (sec: number, ms?: number | undefined) => number;
                    setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                    setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                    setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                    setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number | undefined) => number;
                    setUTCMonth: (month: number, date?: number | undefined) => number;
                    setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                    setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    [Symbol.toPrimitive]: {
                        (hint: "default"): string;
                        (hint: "string"): string;
                        (hint: "number"): number;
                        (hint: string): string | number;
                    };
                } | null | undefined;
                end?: string | {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: {
                        (): string;
                        (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                    };
                    toLocaleDateString: {
                        (): string;
                        (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                    };
                    toLocaleTimeString: {
                        (): string;
                        (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                    };
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number | undefined) => number;
                    setUTCSeconds: (sec: number, ms?: number | undefined) => number;
                    setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                    setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                    setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                    setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number | undefined) => number;
                    setUTCMonth: (month: number, date?: number | undefined) => number;
                    setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                    setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    [Symbol.toPrimitive]: {
                        (hint: "default"): string;
                        (hint: "string"): string;
                        (hint: "number"): number;
                        (hint: string): string | number;
                    };
                } | null | undefined;
            } | (string | {
                toString: () => string;
                toDateString: () => string;
                toTimeString: () => string;
                toLocaleString: {
                    (): string;
                    (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                };
                toLocaleDateString: {
                    (): string;
                    (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                };
                toLocaleTimeString: {
                    (): string;
                    (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                };
                valueOf: () => number;
                getTime: () => number;
                getFullYear: () => number;
                getUTCFullYear: () => number;
                getMonth: () => number;
                getUTCMonth: () => number;
                getDate: () => number;
                getUTCDate: () => number;
                getDay: () => number;
                getUTCDay: () => number;
                getHours: () => number;
                getUTCHours: () => number;
                getMinutes: () => number;
                getUTCMinutes: () => number;
                getSeconds: () => number;
                getUTCSeconds: () => number;
                getMilliseconds: () => number;
                getUTCMilliseconds: () => number;
                getTimezoneOffset: () => number;
                setTime: (time: number) => number;
                setMilliseconds: (ms: number) => number;
                setUTCMilliseconds: (ms: number) => number;
                setSeconds: (sec: number, ms?: number | undefined) => number;
                setUTCSeconds: (sec: number, ms?: number | undefined) => number;
                setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                setDate: (date: number) => number;
                setUTCDate: (date: number) => number;
                setMonth: (month: number, date?: number | undefined) => number;
                setUTCMonth: (month: number, date?: number | undefined) => number;
                setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                toUTCString: () => string;
                toISOString: () => string;
                toJSON: (key?: any) => string;
                [Symbol.toPrimitive]: {
                    (hint: "default"): string;
                    (hint: "string"): string;
                    (hint: "number"): number;
                    (hint: string): string | number;
                };
            })[] | undefined>;
            isOpenSync: import("vue").WritableComputedRef<boolean | undefined>;
            onInputTextChanged: ({ target }: Event) => void;
            isFocused: import("vue").Ref<boolean>;
            input: import("vue").ShallowRef<HTMLInputElement | undefined>;
            inputWrapperProps: import("vue").ComputedRef<{
                focused: boolean;
                error: boolean;
                errorMessages: string[];
                readonly: boolean;
                label: string;
                success: boolean;
                color: string;
                disabled: boolean;
                bordered: boolean;
                background: string;
                outline: boolean;
                errorCount: string | number;
                messages: string | string[];
                immediateValidation: boolean;
                requiredMark: boolean;
                onClick?: ((...args: any[]) => any) | undefined;
                modelValue?: undefined;
                counterValue?: number | undefined;
                rules?: import("../../composables").ValidationRule<any>[] | undefined;
                maxLength?: number | undefined;
                "onClick-prepend"?: ((...args: any[]) => any) | undefined;
                "onClick-append"?: ((...args: any[]) => any) | undefined;
                "onClick-prepend-inner"?: ((...args: any[]) => any) | undefined;
                "onClick-append-inner"?: ((...args: any[]) => any) | undefined;
            }>;
            inputListeners: import("vue").ComputedRef<{
                focus: () => void;
                blur: () => void;
            }>;
            inputAttributesComputed: import("vue").ComputedRef<{
                'aria-invalid': boolean;
                'aria-errormessage': string;
                readonly: boolean;
                disabled: boolean;
                tabindex: number;
                value: string;
                ariaLabel: string;
                ariaRequired: boolean;
                ariaDisabled: boolean;
                ariaReadOnly: boolean;
            }>;
            datePickerProps: import("vue").ComputedRef<import("vue").ExtractPropTypes<{
                [x: string & `on${string}`]: {
                    type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                    required: false;
                    default: undefined;
                };
                readonly: {
                    type: import("vue").PropType<boolean>;
                    required: true;
                    default: boolean;
                };
                type: {
                    type: import("vue").PropType<import("../va-date-picker/types").DatePickerType>;
                    required: true;
                    default: import("../va-date-picker/types").DatePickerType;
                };
                mode: {
                    type: import("vue").PropType<import("../va-date-picker/types").DatePickerMode>;
                    required: true;
                    default: import("../va-date-picker/types").DatePickerMode;
                };
                disabled: {
                    type: import("vue").PropType<boolean>;
                    required: true;
                    default: boolean;
                };
                stateful: {
                    type: import("vue").PropType<boolean>;
                    required: true;
                    default: boolean;
                };
                highlightWeekend: {
                    type: import("vue").PropType<boolean>;
                    required: true;
                    default: boolean;
                };
                highlightToday: {
                    type: import("vue").PropType<boolean>;
                    required: true;
                    default: boolean;
                };
                monthNames: {
                    type: import("vue").PropType<string[]>;
                    required: true;
                    default: string[];
                };
                weekdayNames: {
                    type: import("vue").PropType<string[]>;
                    required: true;
                    default: string[];
                };
                firstWeekday: {
                    type: import("vue").PropType<"Monday" | "Sunday">;
                    required: true;
                    default: "Monday" | "Sunday";
                };
                hideWeekDays: {
                    type: import("vue").PropType<boolean>;
                    required: true;
                    default: boolean;
                };
                showOtherMonths: {
                    type: import("vue").PropType<boolean>;
                    required: true;
                    default: boolean;
                };
                startYear: {
                    type: import("vue").PropType<number>;
                    required: true;
                    default: number;
                };
                endYear: {
                    type: import("vue").PropType<number>;
                    required: true;
                    default: number;
                };
                view: {
                    type: import("vue").PropType<import("../va-date-picker/types").DatePickerView | undefined>;
                    required: false;
                    default: undefined;
                };
                color: {
                    type: import("vue").PropType<string | undefined>;
                    required: false;
                    default: undefined;
                };
                preset: {
                    type: import("vue").PropType<string | undefined>;
                    required: false;
                    default: undefined;
                };
                modelValue: {
                    type: import("vue").PropType<import("../va-date-picker/types").DatePickerModelValue>;
                    required: false;
                    default: undefined;
                };
                textColor: {
                    type: import("vue").PropType<string | undefined>;
                    required: false;
                    default: undefined;
                };
                "onUpdate:modelValue": {
                    type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                    required: false;
                    default: undefined;
                };
                "onHover:day": {
                    type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                    required: false;
                    default: undefined;
                };
                "onClick:day": {
                    type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                    required: false;
                    default: undefined;
                };
                allowedDays: {
                    type: import("vue").PropType<((date: Date) => boolean) | undefined>;
                    required: false;
                    default: undefined;
                };
                weekends: {
                    type: import("vue").PropType<((date: Date) => boolean) | undefined>;
                    required: false;
                    default: undefined;
                };
                "onUpdate:view": {
                    type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                    required: false;
                    default: undefined;
                };
                "onHover:month": {
                    type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                    required: false;
                    default: undefined;
                };
                "onClick:month": {
                    type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                    required: false;
                    default: undefined;
                };
                allowedMonths: {
                    type: import("vue").PropType<((date: Date) => boolean) | undefined>;
                    required: false;
                    default: undefined;
                };
                "onHover:year": {
                    type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                    required: false;
                    default: undefined;
                };
                "onClick:year": {
                    type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                    required: false;
                    default: undefined;
                };
                allowedYears: {
                    type: import("vue").PropType<((date: Date) => boolean) | undefined>;
                    required: false;
                    default: undefined;
                };
                weekendsColor: {
                    type: import("vue").PropType<string | undefined>;
                    required: false;
                    default: undefined;
                };
            }>>;
            dropdownPropsComputed: import("vue").ComputedRef<{
                offset: import("../va-dropdown/types").DropdownOffsetProp;
                stateful: boolean;
                keyboardNavigation: boolean;
                closeOnContentClick: boolean;
                innerAnchorSelector: string;
                readonly: boolean;
                disabled: boolean;
                cursor: boolean;
                placement: import("../../composables").PlacementWithAlias;
                keepAnchorWidth: boolean;
                autoPlacement: boolean;
                stickToEdges: boolean;
                anchorSelector: string;
                preventOverflow: boolean;
                isContentHoverable: boolean;
                closeOnClickOutside: boolean;
                closeOnAnchorClick: boolean;
                hoverOverTimeout: number;
                hoverOutTimeout: number;
                trigger: "none" | "click" | "dblclick" | "right-click" | "hover";
                preset?: string | undefined;
                modelValue?: boolean | undefined;
                target?: import("../../composables").MaybeHTMLElementOrSelector;
            }>;
            filterSlots: import("vue").ComputedRef<string[]>;
            canBeCleared: import("vue").ComputedRef<boolean>;
            clearIconProps: import("vue").ComputedRef<{
                name: string;
                color: string;
                size: string;
            }>;
            iconProps: import("vue").ComputedRef<{
                role: string;
                ariaHidden: boolean;
                size: string;
                name: string;
                color: string;
                tabindex: number;
            }>;
            cursorStyleComputed: import("vue").ComputedRef<{
                cursor?: undefined;
            } | {
                cursor: string;
            }>;
            hideAndFocus: () => void;
            toggleDropdown: (event: Event | KeyboardEvent) => void;
            showDropdown: () => void;
            focusInputOrPicker: () => void;
            focusDatePicker: () => void;
            reset: () => void;
            focus: () => void;
            blur: () => void;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, string[], string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            clearValue: {
                type: import("vue").PropType<import("../va-date-input/types").DateInputModelValue>;
                default: undefined;
            };
            modelValue: {
                type: import("vue").PropType<import("../va-date-input/types").DateInputModelValue>;
            };
            resetOnClose: {
                type: BooleanConstructor;
                default: boolean;
            };
            isOpen: {
                type: BooleanConstructor;
                default: undefined;
            };
            format: {
                type: import("vue").PropType<(date: import("../va-date-input/types").DateInputModelValue) => string>;
            };
            formatDate: {
                type: import("vue").PropType<(date: Date) => string>;
                default: (d: Date) => string;
            };
            parse: {
                type: import("vue").PropType<(input: string) => import("../va-date-input/types").DateInputValue>;
            };
            parseDate: {
                type: import("vue").PropType<(input: string) => Date>;
            };
            parseValue: {
                type: import("vue").PropType<(date: import("../va-date-input/types").DateInputModelValue) => import("../va-date-picker/types").DatePickerModelValue>;
            };
            delimiter: {
                type: StringConstructor;
                default: string;
            };
            rangeDelimiter: {
                type: StringConstructor;
                default: string;
            };
            manualInput: {
                type: BooleanConstructor;
                default: boolean;
            };
            color: {
                type: StringConstructor;
                default: string;
            };
            leftIcon: {
                type: BooleanConstructor;
                default: boolean;
            };
            icon: {
                type: StringConstructor;
                default: string;
            };
            preset: {
                type: StringConstructor;
                default: undefined;
            };
            error: {
                type: BooleanConstructor;
                default: undefined;
            };
            errorMessages: {
                type: import("vue").PropType<string | string[]>;
                default: undefined;
            };
            errorCount: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            rules: {
                type: import("vue").PropType<import("../../composables").ValidationRule<any>[]>;
                default: () => any;
            } & {
                type: import("vue").PropType<import("../../composables").ValidationRule<import("../va-date-input/types").DateInputModelValue>[]>;
            };
            success: {
                type: BooleanConstructor;
                default: boolean;
            };
            messages: {
                type: import("vue").PropType<string | string[]>;
                default: () => never[];
            };
            immediateValidation: {
                type: BooleanConstructor;
                default: boolean;
            };
            readonly: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            type: {
                type: import("vue").PropType<import("../va-date-picker/types").DatePickerType>;
                required: true;
                default: import("../va-date-picker/types").DatePickerType;
            };
            mode: {
                type: import("vue").PropType<import("../va-date-picker/types").DatePickerMode>;
                required: true;
                default: import("../va-date-picker/types").DatePickerMode;
            };
            disabled: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            stateful: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            highlightWeekend: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            highlightToday: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            monthNames: {
                type: import("vue").PropType<string[]>;
                required: true;
                default: string[];
            };
            weekdayNames: {
                type: import("vue").PropType<string[]>;
                required: true;
                default: string[];
            };
            firstWeekday: {
                type: import("vue").PropType<"Monday" | "Sunday">;
                required: true;
                default: "Monday" | "Sunday";
            };
            hideWeekDays: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            showOtherMonths: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            startYear: {
                type: import("vue").PropType<number>;
                required: true;
                default: number;
            };
            endYear: {
                type: import("vue").PropType<number>;
                required: true;
                default: number;
            };
            view: {
                type: import("vue").PropType<import("../va-date-picker/types").DatePickerView | undefined>;
                required: false;
                default: undefined;
            };
            textColor: {
                type: import("vue").PropType<string | undefined>;
                required: false;
                default: undefined;
            };
            "onUpdate:modelValue": {
                type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                required: false;
                default: undefined;
            };
            "onHover:day": {
                type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                required: false;
                default: undefined;
            };
            "onClick:day": {
                type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                required: false;
                default: undefined;
            };
            allowedDays: {
                type: import("vue").PropType<((date: Date) => boolean) | undefined>;
                required: false;
                default: undefined;
            };
            weekends: {
                type: import("vue").PropType<((date: Date) => boolean) | undefined>;
                required: false;
                default: undefined;
            };
            "onUpdate:view": {
                type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                required: false;
                default: undefined;
            };
            "onHover:month": {
                type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                required: false;
                default: undefined;
            };
            "onClick:month": {
                type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                required: false;
                default: undefined;
            };
            allowedMonths: {
                type: import("vue").PropType<((date: Date) => boolean) | undefined>;
                required: false;
                default: undefined;
            };
            "onHover:year": {
                type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                required: false;
                default: undefined;
            };
            "onClick:year": {
                type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                required: false;
                default: undefined;
            };
            allowedYears: {
                type: import("vue").PropType<((date: Date) => boolean) | undefined>;
                required: false;
                default: undefined;
            };
            weekendsColor: {
                type: import("vue").PropType<string | undefined>;
                required: false;
                default: undefined;
            };
            label: {
                type: import("vue").PropType<string>;
                required: true;
                default: string;
            };
            bordered: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            background: {
                type: import("vue").PropType<string>;
                required: true;
                default: string;
            };
            outline: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            focused: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            requiredMark: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            counterValue: {
                type: import("vue").PropType<number | undefined>;
                required: false;
                default: undefined;
            };
            maxLength: {
                type: import("vue").PropType<number | undefined>;
                required: false;
                default: undefined;
            };
            onClick: {
                type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                required: false;
                default: undefined;
            };
            "onClick-prepend": {
                type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                required: false;
                default: undefined;
            };
            "onClick-append": {
                type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                required: false;
                default: undefined;
            };
            "onClick-prepend-inner": {
                type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                required: false;
                default: undefined;
            };
            "onClick-append-inner": {
                type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                required: false;
                default: undefined;
            };
            clearable: {
                type: BooleanConstructor;
                default: boolean;
            };
            clearableIcon: {
                type: StringConstructor;
                default: string;
            };
            cursor: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            offset: {
                type: import("vue").PropType<import("../va-dropdown/types").DropdownOffsetProp>;
                required: true;
                default: import("../va-dropdown/types").DropdownOffsetProp;
            };
            placement: {
                type: import("vue").PropType<import("../../composables").PlacementWithAlias>;
                required: true;
                default: import("../../composables").PlacementWithAlias;
            };
            keepAnchorWidth: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            autoPlacement: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            stickToEdges: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            anchorSelector: {
                type: import("vue").PropType<string>;
                required: true;
                default: string;
            };
            innerAnchorSelector: {
                type: import("vue").PropType<string>;
                required: true;
                default: string;
            };
            preventOverflow: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            isContentHoverable: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            closeOnContentClick: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            closeOnClickOutside: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            closeOnAnchorClick: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            hoverOverTimeout: {
                type: import("vue").PropType<number>;
                required: true;
                default: number;
            };
            hoverOutTimeout: {
                type: import("vue").PropType<number>;
                required: true;
                default: number;
            };
            trigger: {
                type: import("vue").PropType<"none" | "click" | "dblclick" | "right-click" | "hover">;
                required: true;
                default: "none" | "click" | "dblclick" | "right-click" | "hover";
            };
            keyboardNavigation: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            target: {
                type: import("vue").PropType<import("../../composables").MaybeHTMLElementOrSelector>;
                required: false;
                default: undefined;
            };
        }>> & {
            [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
        }, {
            readonly: boolean;
            label: string;
            view: import("../va-date-picker/types").DatePickerView | undefined;
            success: boolean;
            icon: string;
            color: string;
            type: import("../va-date-picker/types").DatePickerType;
            preset: string;
            onClick: ((...args: any[]) => any) | undefined;
            counterValue: number | undefined;
            mode: import("../va-date-picker/types").DatePickerMode;
            disabled: boolean;
            textColor: string | undefined;
            target: import("../../composables").MaybeHTMLElementOrSelector;
            bordered: boolean;
            leftIcon: boolean;
            stateful: boolean;
            cursor: boolean;
            background: string;
            offset: import("../va-dropdown/types").DropdownOffsetProp;
            outline: boolean;
            "onUpdate:modelValue": ((...args: any[]) => any) | undefined;
            error: boolean;
            placement: import("../../composables").PlacementWithAlias;
            keepAnchorWidth: boolean;
            autoPlacement: boolean;
            stickToEdges: boolean;
            errorMessages: string | string[];
            errorCount: string | number;
            rules: import("../../composables").ValidationRule<import("../va-date-input/types").DateInputModelValue>[];
            messages: string | string[];
            immediateValidation: boolean;
            anchorSelector: string;
            innerAnchorSelector: string;
            preventOverflow: boolean;
            isContentHoverable: boolean;
            closeOnContentClick: boolean;
            closeOnClickOutside: boolean;
            closeOnAnchorClick: boolean;
            hoverOverTimeout: number;
            hoverOutTimeout: number;
            trigger: "none" | "click" | "dblclick" | "right-click" | "hover";
            keyboardNavigation: boolean;
            maxLength: number | undefined;
            "onClick-prepend": ((...args: any[]) => any) | undefined;
            "onClick-append": ((...args: any[]) => any) | undefined;
            "onClick-prepend-inner": ((...args: any[]) => any) | undefined;
            "onClick-append-inner": ((...args: any[]) => any) | undefined;
            focused: boolean;
            requiredMark: boolean;
            clearable: boolean;
            clearableIcon: string;
            clearValue: import("../va-date-input/types").DateInputModelValue;
            manualInput: boolean;
            highlightWeekend: boolean;
            highlightToday: boolean;
            "onHover:day": ((...args: any[]) => any) | undefined;
            "onClick:day": ((...args: any[]) => any) | undefined;
            monthNames: string[];
            weekdayNames: string[];
            firstWeekday: "Monday" | "Sunday";
            hideWeekDays: boolean;
            showOtherMonths: boolean;
            allowedDays: ((date: Date) => boolean) | undefined;
            weekends: ((date: Date) => boolean) | undefined;
            "onUpdate:view": ((...args: any[]) => any) | undefined;
            "onHover:month": ((...args: any[]) => any) | undefined;
            "onClick:month": ((...args: any[]) => any) | undefined;
            allowedMonths: ((date: Date) => boolean) | undefined;
            "onHover:year": ((...args: any[]) => any) | undefined;
            "onClick:year": ((...args: any[]) => any) | undefined;
            allowedYears: ((date: Date) => boolean) | undefined;
            startYear: number;
            endYear: number;
            weekendsColor: string | undefined;
            resetOnClose: boolean;
            isOpen: boolean;
            formatDate: (date: Date) => string;
            delimiter: string;
            rangeDelimiter: string;
        }>;
        VaTimeInput: import("vue").DefineComponent<{
            isOpen: {
                type: BooleanConstructor;
                default: undefined;
            };
            modelValue: {
                type: DateConstructor;
                default: undefined;
            };
            clearValue: {
                type: DateConstructor;
                default: undefined;
            };
            format: {
                type: import("vue").PropType<(date?: Date | undefined) => string>;
            };
            parse: {
                type: import("vue").PropType<(input: string) => Date>;
            };
            manualInput: {
                type: BooleanConstructor;
                default: boolean;
            };
            leftIcon: {
                type: BooleanConstructor;
                default: boolean;
            };
            icon: {
                type: StringConstructor;
                default: string;
            };
            error: {
                type: BooleanConstructor;
                default: undefined;
            };
            errorMessages: {
                type: import("vue").PropType<string | string[]>;
                default: undefined;
            };
            errorCount: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            rules: {
                type: import("vue").PropType<import("../../composables").ValidationRule<any>[]>;
                default: () => any;
            } & {
                type: import("vue").PropType<import("../../composables").ValidationRule<Date>[]>;
            };
            success: {
                type: BooleanConstructor;
                default: boolean;
            };
            messages: {
                type: import("vue").PropType<string | string[]>;
                default: () => never[];
            };
            immediateValidation: {
                type: BooleanConstructor;
                default: boolean;
            };
            readonly: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            view: {
                type: import("vue").PropType<"hours" | "minutes" | "seconds">;
                required: true;
                default: "hours" | "minutes" | "seconds";
            };
            disabled: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            stateful: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            ampm: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            hidePeriodSwitch: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            periodUpdatesModelValue: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            cellHeight: {
                type: import("vue").PropType<number>;
                required: true;
                default: number;
            };
            framed: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            visibleCellsCount: {
                type: import("vue").PropType<number>;
                required: true;
                default: number;
            };
            preset: {
                type: import("vue").PropType<string | undefined>;
                required: false;
                default: undefined;
            };
            hoursFilter: {
                type: import("vue").PropType<((h: number) => boolean) | undefined>;
                required: false;
                default: undefined;
            };
            minutesFilter: {
                type: import("vue").PropType<((h: number) => boolean) | undefined>;
                required: false;
                default: undefined;
            };
            secondsFilter: {
                type: import("vue").PropType<((h: number) => boolean) | undefined>;
                required: false;
                default: undefined;
            };
            label: {
                type: import("vue").PropType<string>;
                required: true;
                default: string;
            };
            color: {
                type: import("vue").PropType<string>;
                required: true;
                default: string;
            };
            bordered: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            background: {
                type: import("vue").PropType<string>;
                required: true;
                default: string;
            };
            outline: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            focused: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            requiredMark: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            counterValue: {
                type: import("vue").PropType<number | undefined>;
                required: false;
                default: undefined;
            };
            maxLength: {
                type: import("vue").PropType<number | undefined>;
                required: false;
                default: undefined;
            };
            onClick: {
                type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                required: false;
                default: undefined;
            };
            "onClick-prepend": {
                type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                required: false;
                default: undefined;
            };
            "onClick-append": {
                type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                required: false;
                default: undefined;
            };
            "onClick-prepend-inner": {
                type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                required: false;
                default: undefined;
            };
            "onClick-append-inner": {
                type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                required: false;
                default: undefined;
            };
            clearable: {
                type: BooleanConstructor;
                default: boolean;
            };
            clearableIcon: {
                type: StringConstructor;
                default: string;
            };
            cursor: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            offset: {
                type: import("vue").PropType<import("../va-dropdown/types").DropdownOffsetProp>;
                required: true;
                default: import("../va-dropdown/types").DropdownOffsetProp;
            };
            placement: {
                type: import("vue").PropType<import("../../composables").PlacementWithAlias>;
                required: true;
                default: import("../../composables").PlacementWithAlias;
            };
            keepAnchorWidth: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            autoPlacement: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            stickToEdges: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            anchorSelector: {
                type: import("vue").PropType<string>;
                required: true;
                default: string;
            };
            innerAnchorSelector: {
                type: import("vue").PropType<string>;
                required: true;
                default: string;
            };
            preventOverflow: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            isContentHoverable: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            closeOnContentClick: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            closeOnClickOutside: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            closeOnAnchorClick: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            hoverOverTimeout: {
                type: import("vue").PropType<number>;
                required: true;
                default: number;
            };
            hoverOutTimeout: {
                type: import("vue").PropType<number>;
                required: true;
                default: number;
            };
            trigger: {
                type: import("vue").PropType<"none" | "click" | "dblclick" | "right-click" | "hover">;
                required: true;
                default: "none" | "click" | "dblclick" | "right-click" | "hover";
            };
            keyboardNavigation: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            target: {
                type: import("vue").PropType<import("../../composables").MaybeHTMLElementOrSelector>;
                required: false;
                default: undefined;
            };
        }, {
            t: (key: string, values?: Record<string, string | number | boolean | undefined> | undefined) => string;
            input: import("vue").ShallowRef<HTMLInputElement | undefined>;
            timePicker: import("vue").ShallowRef<import("vue").DefineComponent<{
                modelValue: {
                    type: DateConstructor;
                    required: false;
                };
                ampm: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                hidePeriodSwitch: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                periodUpdatesModelValue: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                view: {
                    type: import("vue").PropType<"hours" | "minutes" | "seconds">;
                    default: string;
                };
                hoursFilter: {
                    type: import("vue").PropType<(h: number) => boolean>;
                };
                minutesFilter: {
                    type: import("vue").PropType<(h: number) => boolean>;
                };
                secondsFilter: {
                    type: import("vue").PropType<(h: number) => boolean>;
                };
                framed: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                cellHeight: {
                    type: NumberConstructor;
                    default: number;
                };
                visibleCellsCount: {
                    type: NumberConstructor;
                    default: number;
                };
                preset: {
                    type: StringConstructor;
                    default: undefined;
                };
                disabled: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                readonly: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                stateful: {
                    type: import("vue").PropType<boolean>;
                    default: boolean;
                };
            }, {
                columns: import("vue").ComputedRef<({
                    items: number[];
                    activeItem: import("vue").WritableComputedRef<number>;
                } | {
                    items: string[];
                    activeItem: import("vue").WritableComputedRef<number>;
                })[]>;
                computedStyles: import("vue").ComputedRef<{
                    [x: string]: string;
                }[]>;
                computedClasses: import("vue").ComputedRef<{
                    'va-time-picker--framed': boolean;
                    asObject: import("vue").ComputedRef<{
                        [x: `va-time-picker--${string}`]: boolean;
                    }>;
                    asArray: import("vue").ComputedRef<`va-time-picker--${string}`[]>;
                    asString: import("vue").ComputedRef<string>;
                }>;
                isPM: import("vue").Ref<boolean>;
                pickers: import("vue").ShallowRef<import("../../composables").TemplateRef[]>;
                setItemRef: (el: any) => void;
                focusNext: () => void;
                focusPrev: () => void;
                activeColumnIndex: import("vue").Ref<number | undefined>;
                focus: (idx?: number) => void;
                blur: (idx?: number | undefined) => void;
            }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, string[], string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
                modelValue: {
                    type: DateConstructor;
                    required: false;
                };
                ampm: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                hidePeriodSwitch: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                periodUpdatesModelValue: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                view: {
                    type: import("vue").PropType<"hours" | "minutes" | "seconds">;
                    default: string;
                };
                hoursFilter: {
                    type: import("vue").PropType<(h: number) => boolean>;
                };
                minutesFilter: {
                    type: import("vue").PropType<(h: number) => boolean>;
                };
                secondsFilter: {
                    type: import("vue").PropType<(h: number) => boolean>;
                };
                framed: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                cellHeight: {
                    type: NumberConstructor;
                    default: number;
                };
                visibleCellsCount: {
                    type: NumberConstructor;
                    default: number;
                };
                preset: {
                    type: StringConstructor;
                    default: undefined;
                };
                disabled: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                readonly: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                stateful: {
                    type: import("vue").PropType<boolean>;
                    default: boolean;
                };
            }>> & {
                [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
            }, {
                readonly: boolean;
                view: "hours" | "minutes" | "seconds";
                preset: string;
                disabled: boolean;
                stateful: boolean;
                ampm: boolean;
                hidePeriodSwitch: boolean;
                periodUpdatesModelValue: boolean;
                cellHeight: number;
                framed: boolean;
                visibleCellsCount: number;
            }> | undefined>;
            timePickerProps: import("vue").ComputedRef<import("vue").ExtractPropTypes<{
                [x: string & `on${string}`]: {
                    type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                    required: false;
                    default: undefined;
                };
                readonly: {
                    type: import("vue").PropType<boolean>;
                    required: true;
                    default: boolean;
                };
                view: {
                    type: import("vue").PropType<"hours" | "minutes" | "seconds">;
                    required: true;
                    default: "hours" | "minutes" | "seconds";
                };
                disabled: {
                    type: import("vue").PropType<boolean>;
                    required: true;
                    default: boolean;
                };
                stateful: {
                    type: import("vue").PropType<boolean>;
                    required: true;
                    default: boolean;
                };
                ampm: {
                    type: import("vue").PropType<boolean>;
                    required: true;
                    default: boolean;
                };
                hidePeriodSwitch: {
                    type: import("vue").PropType<boolean>;
                    required: true;
                    default: boolean;
                };
                periodUpdatesModelValue: {
                    type: import("vue").PropType<boolean>;
                    required: true;
                    default: boolean;
                };
                cellHeight: {
                    type: import("vue").PropType<number>;
                    required: true;
                    default: number;
                };
                framed: {
                    type: import("vue").PropType<boolean>;
                    required: true;
                    default: boolean;
                };
                visibleCellsCount: {
                    type: import("vue").PropType<number>;
                    required: true;
                    default: number;
                };
                preset: {
                    type: import("vue").PropType<string | undefined>;
                    required: false;
                    default: undefined;
                };
                modelValue: {
                    type: import("vue").PropType<Date | undefined>;
                    required: false;
                    default: undefined;
                };
                hoursFilter: {
                    type: import("vue").PropType<((h: number) => boolean) | undefined>;
                    required: false;
                    default: undefined;
                };
                minutesFilter: {
                    type: import("vue").PropType<((h: number) => boolean) | undefined>;
                    required: false;
                    default: undefined;
                };
                secondsFilter: {
                    type: import("vue").PropType<((h: number) => boolean) | undefined>;
                    required: false;
                    default: undefined;
                };
            }>>;
            dropdownPropsComputed: import("vue").ComputedRef<{
                closeOnContentClick: boolean;
                offset: import("../va-dropdown/types").DropdownOffsetProp;
                keyboardNavigation: boolean;
                placement: import("../va-select").Placement;
                innerAnchorSelector: string;
                readonly: boolean;
                disabled: boolean;
                stateful: boolean;
                cursor: boolean;
                keepAnchorWidth: boolean;
                autoPlacement: boolean;
                stickToEdges: boolean;
                anchorSelector: string;
                preventOverflow: boolean;
                isContentHoverable: boolean;
                closeOnClickOutside: boolean;
                closeOnAnchorClick: boolean;
                hoverOverTimeout: number;
                hoverOutTimeout: number;
                trigger: "none" | "click" | "dblclick" | "right-click" | "hover";
                preset?: string | undefined;
                modelValue?: boolean | undefined;
                target?: import("../../composables").MaybeHTMLElementOrSelector;
            }>;
            computedInputWrapperProps: import("vue").ComputedRef<{
                focused: boolean;
                error: boolean;
                errorMessages: string[];
                readonly: boolean;
                label: string;
                success: boolean;
                color: string;
                disabled: boolean;
                bordered: boolean;
                background: string;
                outline: boolean;
                errorCount: string | number;
                messages: string | string[];
                immediateValidation: boolean;
                requiredMark: boolean;
                onClick?: ((...args: any[]) => any) | undefined;
                modelValue?: undefined;
                counterValue?: number | undefined;
                rules?: import("../../composables").ValidationRule<any>[] | undefined;
                maxLength?: number | undefined;
                "onClick-prepend"?: ((...args: any[]) => any) | undefined;
                "onClick-append"?: ((...args: any[]) => any) | undefined;
                "onClick-prepend-inner"?: ((...args: any[]) => any) | undefined;
                "onClick-append-inner"?: ((...args: any[]) => any) | undefined;
            }>;
            computedInputListeners: import("vue").ComputedRef<{
                focus: () => void;
                blur: () => void;
            }>;
            isOpenSync: import("vue").WritableComputedRef<boolean>;
            doShowDropdown: import("vue").WritableComputedRef<boolean>;
            modelValueSync: import("vue").WritableComputedRef<Date | undefined>;
            valueText: import("vue").ComputedRef<string>;
            onInputTextChanged: (e: Event) => void;
            canBeClearedComputed: import("vue").ComputedRef<boolean>;
            iconProps: import("vue").ComputedRef<{
                role: string;
                'aria-hidden': boolean;
                size: string;
                name: string;
                color: string;
                tabindex: number;
            }>;
            clearIconProps: import("vue").ComputedRef<{
                name: string;
                color: string;
                size: string;
            }>;
            filteredSlots: import("vue").ComputedRef<string[]>;
            inputAttributesComputed: import("vue").ComputedRef<{
                'aria-invalid': boolean;
                'aria-errormessage': string;
                readonly: boolean;
                disabled: boolean;
                tabindex: number;
                value: string;
                'aria-label': string;
                'aria-required': boolean;
                'aria-disabled': boolean;
                'aria-readonly': boolean;
            }>;
            cursorStyleComputed: import("vue").ComputedRef<{
                cursor?: undefined;
            } | {
                cursor: string;
            }>;
            hideDropdown: () => void;
            showDropdown: (event?: KeyboardEvent | undefined, cancel?: boolean | undefined, prevent?: boolean | undefined) => void;
            toggleDropdown: (event: Event | KeyboardEvent) => void;
            reset: () => void;
            focus: () => void;
            blur: () => void;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, string[], string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            isOpen: {
                type: BooleanConstructor;
                default: undefined;
            };
            modelValue: {
                type: DateConstructor;
                default: undefined;
            };
            clearValue: {
                type: DateConstructor;
                default: undefined;
            };
            format: {
                type: import("vue").PropType<(date?: Date | undefined) => string>;
            };
            parse: {
                type: import("vue").PropType<(input: string) => Date>;
            };
            manualInput: {
                type: BooleanConstructor;
                default: boolean;
            };
            leftIcon: {
                type: BooleanConstructor;
                default: boolean;
            };
            icon: {
                type: StringConstructor;
                default: string;
            };
            error: {
                type: BooleanConstructor;
                default: undefined;
            };
            errorMessages: {
                type: import("vue").PropType<string | string[]>;
                default: undefined;
            };
            errorCount: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            rules: {
                type: import("vue").PropType<import("../../composables").ValidationRule<any>[]>;
                default: () => any;
            } & {
                type: import("vue").PropType<import("../../composables").ValidationRule<Date>[]>;
            };
            success: {
                type: BooleanConstructor;
                default: boolean;
            };
            messages: {
                type: import("vue").PropType<string | string[]>;
                default: () => never[];
            };
            immediateValidation: {
                type: BooleanConstructor;
                default: boolean;
            };
            readonly: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            view: {
                type: import("vue").PropType<"hours" | "minutes" | "seconds">;
                required: true;
                default: "hours" | "minutes" | "seconds";
            };
            disabled: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            stateful: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            ampm: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            hidePeriodSwitch: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            periodUpdatesModelValue: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            cellHeight: {
                type: import("vue").PropType<number>;
                required: true;
                default: number;
            };
            framed: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            visibleCellsCount: {
                type: import("vue").PropType<number>;
                required: true;
                default: number;
            };
            preset: {
                type: import("vue").PropType<string | undefined>;
                required: false;
                default: undefined;
            };
            hoursFilter: {
                type: import("vue").PropType<((h: number) => boolean) | undefined>;
                required: false;
                default: undefined;
            };
            minutesFilter: {
                type: import("vue").PropType<((h: number) => boolean) | undefined>;
                required: false;
                default: undefined;
            };
            secondsFilter: {
                type: import("vue").PropType<((h: number) => boolean) | undefined>;
                required: false;
                default: undefined;
            };
            label: {
                type: import("vue").PropType<string>;
                required: true;
                default: string;
            };
            color: {
                type: import("vue").PropType<string>;
                required: true;
                default: string;
            };
            bordered: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            background: {
                type: import("vue").PropType<string>;
                required: true;
                default: string;
            };
            outline: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            focused: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            requiredMark: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            counterValue: {
                type: import("vue").PropType<number | undefined>;
                required: false;
                default: undefined;
            };
            maxLength: {
                type: import("vue").PropType<number | undefined>;
                required: false;
                default: undefined;
            };
            onClick: {
                type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                required: false;
                default: undefined;
            };
            "onClick-prepend": {
                type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                required: false;
                default: undefined;
            };
            "onClick-append": {
                type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                required: false;
                default: undefined;
            };
            "onClick-prepend-inner": {
                type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                required: false;
                default: undefined;
            };
            "onClick-append-inner": {
                type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                required: false;
                default: undefined;
            };
            clearable: {
                type: BooleanConstructor;
                default: boolean;
            };
            clearableIcon: {
                type: StringConstructor;
                default: string;
            };
            cursor: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            offset: {
                type: import("vue").PropType<import("../va-dropdown/types").DropdownOffsetProp>;
                required: true;
                default: import("../va-dropdown/types").DropdownOffsetProp;
            };
            placement: {
                type: import("vue").PropType<import("../../composables").PlacementWithAlias>;
                required: true;
                default: import("../../composables").PlacementWithAlias;
            };
            keepAnchorWidth: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            autoPlacement: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            stickToEdges: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            anchorSelector: {
                type: import("vue").PropType<string>;
                required: true;
                default: string;
            };
            innerAnchorSelector: {
                type: import("vue").PropType<string>;
                required: true;
                default: string;
            };
            preventOverflow: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            isContentHoverable: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            closeOnContentClick: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            closeOnClickOutside: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            closeOnAnchorClick: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            hoverOverTimeout: {
                type: import("vue").PropType<number>;
                required: true;
                default: number;
            };
            hoverOutTimeout: {
                type: import("vue").PropType<number>;
                required: true;
                default: number;
            };
            trigger: {
                type: import("vue").PropType<"none" | "click" | "dblclick" | "right-click" | "hover">;
                required: true;
                default: "none" | "click" | "dblclick" | "right-click" | "hover";
            };
            keyboardNavigation: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            target: {
                type: import("vue").PropType<import("../../composables").MaybeHTMLElementOrSelector>;
                required: false;
                default: undefined;
            };
        }>> & {
            [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
        }, {
            readonly: boolean;
            label: string;
            view: "hours" | "minutes" | "seconds";
            success: boolean;
            icon: string;
            color: string;
            preset: string | undefined;
            onClick: ((...args: any[]) => any) | undefined;
            modelValue: Date;
            counterValue: number | undefined;
            disabled: boolean;
            target: import("../../composables").MaybeHTMLElementOrSelector;
            bordered: boolean;
            leftIcon: boolean;
            stateful: boolean;
            cursor: boolean;
            background: string;
            offset: import("../va-dropdown/types").DropdownOffsetProp;
            outline: boolean;
            error: boolean;
            placement: import("../../composables").PlacementWithAlias;
            keepAnchorWidth: boolean;
            autoPlacement: boolean;
            stickToEdges: boolean;
            errorMessages: string | string[];
            errorCount: string | number;
            rules: import("../../composables").ValidationRule<Date>[];
            messages: string | string[];
            immediateValidation: boolean;
            anchorSelector: string;
            innerAnchorSelector: string;
            preventOverflow: boolean;
            isContentHoverable: boolean;
            closeOnContentClick: boolean;
            closeOnClickOutside: boolean;
            closeOnAnchorClick: boolean;
            hoverOverTimeout: number;
            hoverOutTimeout: number;
            trigger: "none" | "click" | "dblclick" | "right-click" | "hover";
            keyboardNavigation: boolean;
            maxLength: number | undefined;
            "onClick-prepend": ((...args: any[]) => any) | undefined;
            "onClick-append": ((...args: any[]) => any) | undefined;
            "onClick-prepend-inner": ((...args: any[]) => any) | undefined;
            "onClick-append-inner": ((...args: any[]) => any) | undefined;
            focused: boolean;
            requiredMark: boolean;
            clearable: boolean;
            clearableIcon: string;
            clearValue: Date;
            manualInput: boolean;
            isOpen: boolean;
            ampm: boolean;
            hidePeriodSwitch: boolean;
            periodUpdatesModelValue: boolean;
            hoursFilter: ((h: number) => boolean) | undefined;
            minutesFilter: ((h: number) => boolean) | undefined;
            secondsFilter: ((h: number) => boolean) | undefined;
            cellHeight: number;
            framed: boolean;
            visibleCellsCount: number;
        }>;
        VaOptionList: import("vue").DefineComponent<{
            type: {
                type: import("vue").PropType<"switch" | "checkbox" | "radio">;
                default: string;
                validator: (type: any) => boolean;
            };
            disabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            readonly: {
                type: BooleanConstructor;
                default: boolean;
            };
            defaultValue: {
                type: import("vue").PropType<import("../va-select").SelectOption | import("../va-select").SelectOption[] | null>;
            };
            name: {
                type: StringConstructor;
                default: string;
            };
            color: {
                type: StringConstructor;
                default: string;
            };
            leftLabel: {
                type: BooleanConstructor;
                default: boolean;
            };
            modelValue: {
                type: import("vue").PropType<import("../va-select").SelectOption | import("../va-select").SelectOption[] | null>;
            };
            stateful: {
                type: import("vue").PropType<boolean>;
                default: boolean;
            };
            error: {
                type: BooleanConstructor;
                default: undefined;
            };
            errorMessages: {
                type: import("vue").PropType<string | string[]>;
                default: undefined;
            };
            errorCount: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            rules: {
                type: import("vue").PropType<import("../../composables").ValidationRule<any>[]>;
                default: () => any;
            };
            success: {
                type: BooleanConstructor;
                default: boolean;
            };
            messages: {
                type: import("vue").PropType<string | string[]>;
                default: () => never[];
            };
            immediateValidation: {
                type: BooleanConstructor;
                default: boolean;
            };
            options: {
                type: import("vue").PropType<import("../va-select").SelectOption[]>;
                default: () => never[];
            };
            textBy: {
                type: import("vue").PropType<string | ((option: import("../va-select").SelectOption) => unknown)>;
                default: string;
            };
            valueBy: {
                type: import("vue").PropType<string | ((option: import("../va-select").SelectOption) => unknown)>;
                default: string;
            };
            trackBy: {
                type: import("vue").PropType<string | ((option: import("../va-select").SelectOption) => unknown)>;
                default: string;
            };
            disabledBy: {
                type: import("vue").PropType<string | ((option: import("../va-select").SelectOption) => unknown)>;
                default: string;
            };
            groupBy: {
                type: import("vue").PropType<string | ((option: import("../va-select").SelectOption) => unknown)>;
                default: string;
            };
            preset: {
                type: StringConstructor;
                default: undefined;
            };
        }, {
            selectedValue: import("vue").WritableComputedRef<import("../va-select").SelectOption | import("../va-select").SelectOption[] | null>;
            computedError: import("vue").WritableComputedRef<boolean>;
            computedErrorMessages: import("vue").WritableComputedRef<string[]>;
            getValue: (option: import("../va-select").SelectOption) => any;
            getText: (option: import("../va-select").SelectOption) => string;
            getKey: (option: import("../va-select").SelectOption) => any;
            isDisabled: (option: import("../va-select").SelectOption) => any;
            reset: () => void;
            focus: () => void;
            setItemRef: (el: any) => void;
            computedProps: import("vue").ComputedRef<Pick<Readonly<import("@vue/shared").LooseRequired<Readonly<import("vue").ExtractPropTypes<{
                type: {
                    type: import("vue").PropType<"switch" | "checkbox" | "radio">;
                    default: string;
                    validator: (type: any) => boolean;
                };
                disabled: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                readonly: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                defaultValue: {
                    type: import("vue").PropType<import("../va-select").SelectOption | import("../va-select").SelectOption[] | null>;
                };
                name: {
                    type: StringConstructor;
                    default: string;
                };
                color: {
                    type: StringConstructor;
                    default: string;
                };
                leftLabel: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                modelValue: {
                    type: import("vue").PropType<import("../va-select").SelectOption | import("../va-select").SelectOption[] | null>;
                };
                stateful: {
                    type: import("vue").PropType<boolean>;
                    default: boolean;
                };
                error: {
                    type: BooleanConstructor;
                    default: undefined;
                };
                errorMessages: {
                    type: import("vue").PropType<string | string[]>;
                    default: undefined;
                };
                errorCount: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: number;
                };
                rules: {
                    type: import("vue").PropType<import("../../composables").ValidationRule<any>[]>;
                    default: () => any;
                };
                success: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                messages: {
                    type: import("vue").PropType<string | string[]>;
                    default: () => never[];
                };
                immediateValidation: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                options: {
                    type: import("vue").PropType<import("../va-select").SelectOption[]>;
                    default: () => never[];
                };
                textBy: {
                    type: import("vue").PropType<string | ((option: import("../va-select").SelectOption) => unknown)>;
                    default: string;
                };
                valueBy: {
                    type: import("vue").PropType<string | ((option: import("../va-select").SelectOption) => unknown)>;
                    default: string;
                };
                trackBy: {
                    type: import("vue").PropType<string | ((option: import("../va-select").SelectOption) => unknown)>;
                    default: string;
                };
                disabledBy: {
                    type: import("vue").PropType<string | ((option: import("../va-select").SelectOption) => unknown)>;
                    default: string;
                };
                groupBy: {
                    type: import("vue").PropType<string | ((option: import("../va-select").SelectOption) => unknown)>;
                    default: string;
                };
                preset: {
                    type: StringConstructor;
                    default: undefined;
                };
            }>> & {
                [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
            }>>, "readonly" | "name" | "color" | "leftLabel">>;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, string[], string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            type: {
                type: import("vue").PropType<"switch" | "checkbox" | "radio">;
                default: string;
                validator: (type: any) => boolean;
            };
            disabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            readonly: {
                type: BooleanConstructor;
                default: boolean;
            };
            defaultValue: {
                type: import("vue").PropType<import("../va-select").SelectOption | import("../va-select").SelectOption[] | null>;
            };
            name: {
                type: StringConstructor;
                default: string;
            };
            color: {
                type: StringConstructor;
                default: string;
            };
            leftLabel: {
                type: BooleanConstructor;
                default: boolean;
            };
            modelValue: {
                type: import("vue").PropType<import("../va-select").SelectOption | import("../va-select").SelectOption[] | null>;
            };
            stateful: {
                type: import("vue").PropType<boolean>;
                default: boolean;
            };
            error: {
                type: BooleanConstructor;
                default: undefined;
            };
            errorMessages: {
                type: import("vue").PropType<string | string[]>;
                default: undefined;
            };
            errorCount: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            rules: {
                type: import("vue").PropType<import("../../composables").ValidationRule<any>[]>;
                default: () => any;
            };
            success: {
                type: BooleanConstructor;
                default: boolean;
            };
            messages: {
                type: import("vue").PropType<string | string[]>;
                default: () => never[];
            };
            immediateValidation: {
                type: BooleanConstructor;
                default: boolean;
            };
            options: {
                type: import("vue").PropType<import("../va-select").SelectOption[]>;
                default: () => never[];
            };
            textBy: {
                type: import("vue").PropType<string | ((option: import("../va-select").SelectOption) => unknown)>;
                default: string;
            };
            valueBy: {
                type: import("vue").PropType<string | ((option: import("../va-select").SelectOption) => unknown)>;
                default: string;
            };
            trackBy: {
                type: import("vue").PropType<string | ((option: import("../va-select").SelectOption) => unknown)>;
                default: string;
            };
            disabledBy: {
                type: import("vue").PropType<string | ((option: import("../va-select").SelectOption) => unknown)>;
                default: string;
            };
            groupBy: {
                type: import("vue").PropType<string | ((option: import("../va-select").SelectOption) => unknown)>;
                default: string;
            };
            preset: {
                type: StringConstructor;
                default: undefined;
            };
        }>> & {
            [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
        }, {
            readonly: boolean;
            success: boolean;
            name: string;
            color: string;
            type: "switch" | "checkbox" | "radio";
            preset: string;
            disabled: boolean;
            stateful: boolean;
            error: boolean;
            errorMessages: string | string[];
            errorCount: string | number;
            rules: import("../../composables").ValidationRule<any>[];
            messages: string | string[];
            immediateValidation: boolean;
            leftLabel: boolean;
            options: import("../va-select").SelectOption[];
            textBy: string | ((option: import("../va-select").SelectOption) => unknown);
            valueBy: string | ((option: import("../va-select").SelectOption) => unknown);
            trackBy: string | ((option: import("../va-select").SelectOption) => unknown);
            disabledBy: string | ((option: import("../va-select").SelectOption) => unknown);
            groupBy: string | ((option: import("../va-select").SelectOption) => unknown);
        }>;
    };
    data(): {
        form: {
            input: string;
            checkbox: boolean;
        };
        resetForm: {
            input: string;
            checkbox: boolean;
            date: Date;
            time: Date;
            options: string[];
            select: string;
            optionsListValue: string;
            validationRules: ((value: any) => true | "Field is required")[];
        };
    };
};
export default _default;
