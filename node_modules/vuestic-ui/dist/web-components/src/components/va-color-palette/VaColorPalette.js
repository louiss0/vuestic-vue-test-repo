import { defineComponent, resolveComponent, openBlock, createElementBlock, Fragment, renderList, createBlock } from "vue";
import { u as useComponentPresetProp } from "../../composables/useComponentPreset.js";
import { u as useStatefulEmits, a as useStatefulProps, b as useStateful } from "../../composables/useStateful.js";
import { u as useTranslation } from "../../composables/useTranslation.js";
import { V as VaColorIndicator } from "../va-color-indicator/index.js";
import { _ as _export_sfc } from "../../../plugin-vue_export-helper.js";
var _style_0 = ".va-color-palette {\n  display: flex;\n  padding-left: 0;\n  margin: 0;\n}\n.va-color-palette > * {\n  margin-right: 0.25rem;\n}\n.va-color-palette > *:last-child {\n  margin-right: 0;\n}";
const _sfc_main = defineComponent({
  name: "VaColorPalette",
  components: { VaColorIndicator },
  emits: useStatefulEmits,
  props: {
    ...useStatefulProps,
    ...useComponentPresetProp,
    modelValue: { type: String, default: null },
    palette: { type: Array, default: () => [] },
    indicator: {
      type: String,
      default: "dot",
      validator: (value) => ["dot", "square"].includes(value)
    }
  },
  setup(props, { emit }) {
    const { valueComputed } = useStateful(props, emit);
    return {
      ...useTranslation(),
      valueComputed,
      isSelected: (color) => valueComputed.value === color
    };
  }
});
const _hoisted_1 = ["aria-label"];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_va_color_indicator = resolveComponent("va-color-indicator");
  return openBlock(), createElementBlock("ul", {
    class: "va-color-palette",
    role: "listbox",
    "aria-label": _ctx.t("colorSelection")
  }, [
    (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.palette, (color, index) => {
      return openBlock(), createBlock(_component_va_color_indicator, {
        key: index,
        role: "option",
        "aria-label": _ctx.t("color", { color }),
        "aria-selected": _ctx.isSelected(color),
        tabindex: "0",
        modelValue: _ctx.isSelected(color),
        color,
        square: _ctx.indicator === "square",
        "onUpdate:modelValue": ($event) => _ctx.valueComputed = color
      }, null, 8, ["aria-label", "aria-selected", "modelValue", "color", "square", "onUpdate:modelValue"]);
    }), 128))
  ], 8, _hoisted_1);
}
var _VaColorPalette = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["styles", [...(   VaColorIndicator .styles || []), _style_0]]]);
export { _VaColorPalette as _ };
//# sourceMappingURL=VaColorPalette.js.map
