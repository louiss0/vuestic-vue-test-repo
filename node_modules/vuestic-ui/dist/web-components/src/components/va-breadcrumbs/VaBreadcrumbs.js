import { defineComponent, computed, ref, h, Fragment } from "vue";
import { u as useAlignProps, a as useAlign } from "../../composables/useAlign.js";
import { u as useColors } from "../../composables/useColors.js";
import { u as useComponentPresetProp } from "../../composables/useComponentPreset.js";
import { u as useTranslation } from "../../composables/useTranslation.js";
import { h as hasOwnProperty } from "../../utils/has-own-property.js";
import { r as resolveSlot } from "../../utils/resolveSlot.js";
import { _ as _export_sfc } from "../../../plugin-vue_export-helper.js";
var _style_0 = ":root,\n:host {\n  /* General */\n  --va-breadcrumbs-display: flex;\n  --va-breadcrumbs-width: 100%;\n  --va-breadcrumbs-justify-content: center;\n  /* Item */\n  --va-breadcrumbs-item-display: inline-flex;\n  /* Separator */\n  --va-breadcrumbs-separator-padding: var(--va-breadcrumbs-separator-py) var(--va-breadcrumbs-separator-px);\n  --va-breadcrumbs-separator-py: 0;\n  --va-breadcrumbs-separator-px: 0.5rem;\n  --va-breadcrumbs-separator-display: inline-flex;\n}\n.va-breadcrumbs {\n  display: var(--va-breadcrumbs-display);\n  width: var(--va-breadcrumbs-width);\n  justify-content: var(--va-breadcrumbs-justify-content);\n  font-family: var(--va-font-family);\n}\n.va-breadcrumbs__item {\n  display: var(--va-breadcrumbs-item-display);\n}\n.va-breadcrumbs__separator {\n  padding: var(--va-breadcrumbs-separator-padding);\n  display: var(--va-breadcrumbs-separator-display);\n}";
const _sfc_main = defineComponent({
  name: "VaBreadcrumbs",
  props: {
    ...useAlignProps,
    ...useComponentPresetProp,
    separator: { type: String, default: "/" },
    color: { type: String, default: "secondary" },
    activeColor: { type: String, default: null },
    separatorColor: { type: String, default: null }
  },
  setup(props, { slots }) {
    const { alignComputed } = useAlign(props);
    const { getColor } = useColors();
    const computedThemesSeparatorColor = computed(() => {
      return props.separatorColor ? getColor(props.separatorColor) : getColor(props.color);
    });
    const computedThemesActiveColor = computed(() => {
      return props.activeColor ? getColor(props.activeColor) : getColor(props.color);
    });
    const childNodeFilter = (result, node) => {
      const nodes = node && node.type === Fragment && node.children ? node.children : [node];
      return [
        ...result,
        ...nodes.filter((node2) => {
          var _a, _b;
          return !!((_b = (_a = node2 == null ? void 0 : node2.type) == null ? void 0 : _a.name) == null ? void 0 : _b.match(/VaBreadcrumbsItem$/));
        })
      ];
    };
    const createSeparatorComponent = () => {
      const separatorNode = resolveSlot(slots.separator) || [props.separator];
      return h("span", {
        "aria-hidden": true,
        class: ["va-breadcrumbs__separator"],
        style: [{ color: computedThemesSeparatorColor.value }]
      }, separatorNode);
    };
    const isDisabledChild = (child) => {
      const childPropData = child == null ? void 0 : child.props;
      if (!childPropData || !hasOwnProperty(childPropData, "disabled")) {
        return false;
      }
      if (childPropData.disabled === "") {
        return true;
      }
      return Boolean(childPropData.disabled);
    };
    const isAllChildLinks = ref(true);
    const getChildren = () => {
      const defaultSlotContent = resolveSlot(slots.default);
      if (!defaultSlotContent) {
        return;
      }
      const childNodes = defaultSlotContent.reduce(childNodeFilter, []) || [];
      const childNodesLength = childNodes.length;
      const isLastIndexChildNodes = (index) => index === childNodesLength - 1;
      const isChildLink = (child) => {
        const childPropData = child == null ? void 0 : child.props;
        if (!childPropData || !hasOwnProperty(childPropData, "to")) {
          return false;
        }
        return !!(childPropData.to && !childPropData.disabled);
      };
      const createChildComponent = (child, index) => h(
        "span",
        {
          class: "va-breadcrumbs__item",
          "aria-current": isLastIndexChildNodes(index) && isChildLink(child) ? "location" : false,
          style: {
            color: !isLastIndexChildNodes(index) && !isDisabledChild(child) ? computedThemesActiveColor.value : null
          }
        },
        [child]
      );
      const children = [];
      if (childNodesLength) {
        childNodes.forEach((child, index) => {
          if (isAllChildLinks.value && !isChildLink(child)) {
            isAllChildLinks.value = false;
          }
          children.push(createChildComponent(child, index));
          if (!isLastIndexChildNodes(index)) {
            children.push(createSeparatorComponent());
          }
        });
      }
      return children;
    };
    const { t } = useTranslation();
    return () => h("div", {
      class: "va-breadcrumbs",
      style: alignComputed.value,
      role: isAllChildLinks.value ? "navigation" : void 0,
      "aria-label": isAllChildLinks.value ? t("breadcrumbs") : void 0
    }, getChildren());
  }
});
var _VaBreadcrumbs = /* @__PURE__ */ _export_sfc(_sfc_main, [["styles", [_style_0]]]);
export { _VaBreadcrumbs as _ };
//# sourceMappingURL=VaBreadcrumbs.js.map
