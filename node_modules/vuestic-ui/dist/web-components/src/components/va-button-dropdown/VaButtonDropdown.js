import { defineComponent, computed, resolveComponent, openBlock, createElementBlock, normalizeClass, createBlock, mergeProps, withCtx, createVNode, toHandlers, withKeys, withModifiers, renderSlot, createTextVNode, toDisplayString, createCommentVNode } from "vue";
import { o as omit_1 } from "../../../vendor.js";
import { e as extractComponentProps } from "../../utils/component-options/extract-component-options.js";
import { f as filterComponentProps } from "../../utils/component-options/filter-props.js";
import { u as useBem } from "../../composables/useBem.js";
import { u as useComponentPresetProp } from "../../composables/useComponentPreset.js";
import { a as usePlacementAliasesProps } from "../../composables/usePlacementAliases.js";
import { u as useEmitProxy } from "../../composables/useEmitProxy.js";
import { a as useStatefulProps, b as useStateful } from "../../composables/useStateful.js";
import { u as useTranslation } from "../../composables/useTranslation.js";
import { V as VaButton } from "../va-button/index.js";
import { V as VaButtonGroup } from "../va-button-group/index.js";
import { V as VaDropdown } from "../va-dropdown/index.js";
import { _ as _export_sfc } from "../../../plugin-vue_export-helper.js";
import { V as VaDropdownContent } from "../va-dropdown/components/VaDropdownContent/index.js";
var _style_0 = ':root,\n:host {\n  --va-button-dropdown-button-margin: 0;\n}\n.va-button-dropdown {\n  display: inline-block;\n  font-family: var(--va-font-family);\n  vertical-align: middle;\n}\n.va-button-dropdown .va-button {\n  margin: var(--va-button-dropdown-button-margin);\n}\n.va-button-dropdown--split .va-dropdown .va-dropdown__anchor {\n  margin: var(--va-button-dropdown-button-margin);\n}\n.va-button-dropdown--split .va-button-group__left-icon .va-dropdown .va-button {\n  border-top-right-radius: 0;\n  border-bottom-right-radius: 0;\n}\n.va-button-dropdown--split .va-button-group__left-icon > .va-button {\n  border-top-left-radius: 0;\n  border-bottom-left-radius: 0;\n  border-left: none;\n}\n.va-button-dropdown--split :not(.va-button-group__left-icon) .va-dropdown .va-button {\n  border-top-left-radius: 0;\n  border-bottom-left-radius: 0;\n}\n.va-button-dropdown--split .va-button:focus-visible {\n  outline: 2px solid var(--va-focus) !important;\n  border-radius: "inherit";\n  outline-offset: -2px;\n}';
const { createEmits, createVOnListeners: createListeners } = useEmitProxy(["click"]);
const { createEmits: createMainButtonEmits, createVOnListeners: createMainButtonListeners } = useEmitProxy(
  [{ listen: "click", emit: "main-button-click" }]
);
const VaButtonProps = omit_1(extractComponentProps(VaButton), ["iconRight", "block"]);
const VaDropdownProps = extractComponentProps(VaDropdown);
const _sfc_main = defineComponent({
  name: "VaButtonDropdown",
  components: {
    VaButton,
    VaDropdown,
    VaButtonGroup,
    VaDropdownContent
  },
  emits: ["update:modelValue", ...createEmits(), ...createMainButtonEmits()],
  props: {
    ...useComponentPresetProp,
    ...VaButtonProps,
    ...VaDropdownProps,
    ...useStatefulProps,
    ...usePlacementAliasesProps,
    modelValue: { type: Boolean, default: false },
    stateful: { type: Boolean, default: true },
    icon: { type: String, default: "va-arrow-down" },
    openedIcon: { type: String, default: "va-arrow-up" },
    hideIcon: { type: Boolean, default: false },
    leftIcon: { type: Boolean, default: false },
    iconColor: { type: String, default: "" },
    disabled: { type: Boolean, default: false },
    disableButton: { type: Boolean, default: false },
    disableDropdown: { type: Boolean, default: false },
    offset: { type: [Number, Array], default: 2 },
    keepAnchorWidth: { type: Boolean, default: false },
    closeOnContentClick: { type: Boolean, default: true },
    split: { type: Boolean },
    splitTo: { type: String, default: "" },
    splitHref: { type: String, default: "" },
    loading: { type: Boolean, default: false },
    label: { type: String }
  },
  setup(props, { emit, slots }) {
    const { valueComputed } = useStateful(props, emit);
    const computedIcon = computed(() => valueComputed.value ? props.openedIcon : props.icon);
    const computedClass = useBem("va-button-dropdown", () => ({
      split: props.split
    }));
    const computedButtonIcons = computed(() => {
      if (props.hideIcon) {
        return {};
      }
      const propName = (props.label || slots.label) && !props.leftIcon ? "icon-right" : "icon";
      return { [propName]: computedIcon.value };
    });
    const buttonPropsFiltered = computed(() => {
      let ignoredProps = ["to", "href", "loading", "icon"];
      const presetProps = [
        "plain",
        "textOpacity",
        "backgroundOpacity",
        "hoverOpacity",
        "hoverBehavior",
        "hoverOpacity",
        "pressedOpacity",
        "pressedBehavior",
        "pressedOpacity"
      ];
      if (props.preset) {
        ignoredProps = [...ignoredProps, ...presetProps];
      }
      const filteredProps = omit_1(VaButtonProps, ignoredProps);
      return Object.keys(filteredProps);
    });
    const buttonPropsComputed = computed(
      () => Object.entries(props).filter(([key, _]) => buttonPropsFiltered.value.includes(key)).reduce((acc, [key, value]) => {
        Object.assign(acc, { [key]: value });
        return acc;
      }, {})
    );
    const computedMainButtonProps = computed(() => ({
      to: props.splitTo,
      href: props.splitHref,
      loading: props.loading
    }));
    const splitButtonClassComputed = computed(() => ({ "va-button-group__left-icon": props.leftIcon }));
    const hideDropdown = () => {
      valueComputed.value = false;
    };
    return {
      ...useTranslation(),
      vaDropdownProps: filterComponentProps(VaDropdownProps),
      hideDropdown,
      valueComputed,
      computedIcon,
      computedClass,
      computedButtonIcons,
      buttonPropsComputed,
      computedMainButtonProps,
      splitButtonClassComputed,
      listeners: createListeners(emit),
      mainButtonListeners: createMainButtonListeners(emit)
    };
  }
});
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_va_button = resolveComponent("va-button");
  const _component_va_dropdown_content = resolveComponent("va-dropdown-content");
  const _component_va_dropdown = resolveComponent("va-dropdown");
  const _component_va_button_group = resolveComponent("va-button-group");
  return openBlock(), createElementBlock("div", {
    class: normalizeClass(["va-button-dropdown", _ctx.computedClass])
  }, [
    !_ctx.$props.split ? (openBlock(), createBlock(_component_va_dropdown, mergeProps({ key: 0 }, _ctx.vaDropdownProps, {
      modelValue: _ctx.valueComputed,
      "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => _ctx.valueComputed = $event),
      disabled: _ctx.$props.disabled || _ctx.$props.disableDropdown
    }), {
      anchor: withCtx(() => [
        createVNode(_component_va_button, mergeProps({ ..._ctx.computedButtonIcons, ..._ctx.buttonPropsComputed }, toHandlers(_ctx.listeners), {
          onKeydown: withKeys(withModifiers(_ctx.hideDropdown, ["prevent"]), ["esc"])
        }), {
          default: withCtx(() => [
            renderSlot(_ctx.$slots, "label", {}, () => [
              createTextVNode(toDisplayString(_ctx.label), 1)
            ])
          ]),
          _: 3
        }, 16, ["onKeydown"])
      ]),
      default: withCtx(() => [
        renderSlot(_ctx.$slots, "content", {}, () => [
          createVNode(_component_va_dropdown_content, null, {
            default: withCtx(() => [
              renderSlot(_ctx.$slots, "default")
            ]),
            _: 3
          })
        ])
      ]),
      _: 3
    }, 16, ["modelValue", "disabled"])) : (openBlock(), createBlock(_component_va_button_group, mergeProps({
      key: 1,
      class: _ctx.splitButtonClassComputed
    }, _ctx.buttonPropsComputed), {
      default: withCtx(() => [
        !_ctx.$props.leftIcon ? (openBlock(), createBlock(_component_va_button, mergeProps({
          key: 0,
          disabled: _ctx.$props.disabled || _ctx.$props.disableButton
        }, _ctx.computedMainButtonProps, toHandlers(_ctx.mainButtonListeners)), {
          default: withCtx(() => [
            renderSlot(_ctx.$slots, "label", {}, () => [
              createTextVNode(toDisplayString(_ctx.label), 1)
            ])
          ]),
          _: 3
        }, 16, ["disabled"])) : createCommentVNode("", true),
        createVNode(_component_va_dropdown, mergeProps({
          modelValue: _ctx.valueComputed,
          "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => _ctx.valueComputed = $event)
        }, _ctx.vaDropdownProps, {
          disabled: _ctx.$props.disabled || _ctx.$props.disableDropdown
        }), {
          anchor: withCtx(() => [
            createVNode(_component_va_button, mergeProps({
              "aria-label": _ctx.t("toggleDropdown"),
              disabled: _ctx.$props.disabled || _ctx.$props.disableDropdown,
              icon: _ctx.computedIcon,
              "icon-color": _ctx.$props.iconColor
            }, toHandlers(_ctx.listeners), {
              onKeydown: withKeys(withModifiers(_ctx.hideDropdown, ["prevent"]), ["esc"])
            }), null, 16, ["aria-label", "disabled", "icon", "icon-color", "onKeydown"])
          ]),
          default: withCtx(() => [
            createVNode(_component_va_dropdown_content, null, {
              default: withCtx(() => [
                renderSlot(_ctx.$slots, "default")
              ]),
              _: 3
            })
          ]),
          _: 3
        }, 16, ["modelValue", "disabled"]),
        _ctx.$props.leftIcon ? (openBlock(), createBlock(_component_va_button, mergeProps({
          key: 1,
          disabled: _ctx.$props.disabled || _ctx.$props.disableButton
        }, _ctx.computedMainButtonProps, toHandlers(_ctx.mainButtonListeners)), {
          default: withCtx(() => [
            renderSlot(_ctx.$slots, "label", {}, () => [
              createTextVNode(toDisplayString(_ctx.label), 1)
            ])
          ]),
          _: 3
        }, 16, ["disabled"])) : createCommentVNode("", true)
      ]),
      _: 3
    }, 16, ["class"]))
  ], 2);
}
var _VaButtonDropdown = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["styles", [...(      VaButton.styles || []), ...(    VaDropdown.styles || []), ...(    VaButtonGroup.styles || []), ...(    VaDropdownContent  .styles || []), _style_0]]]);
export { _VaButtonDropdown as _ };
//# sourceMappingURL=VaButtonDropdown.js.map
