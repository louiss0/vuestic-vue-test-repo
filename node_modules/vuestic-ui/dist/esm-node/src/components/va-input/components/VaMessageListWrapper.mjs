import { defineComponent, computed, toRef, resolveComponent, openBlock, createElementBlock, renderSlot, createVNode } from "vue";
import { u as useValidationProps } from "../../../composables/useValidation.mjs";
import { V as VaMessageList } from "./VaMessageList/index.mjs";
import { _ as _export_sfc } from "../../../../plugin-vue_export-helper.mjs";
var VaMessageListWrapper_vue_vue_type_style_index_0_lang = "";
const _sfc_main = defineComponent({
  name: "VaMessageListWrapper",
  components: { VaMessageList },
  props: {
    ...useValidationProps
  },
  setup(props) {
    return {
      messagesColor: computed(() => {
        if (props.error) {
          return "danger";
        }
        if (props.success) {
          return "success";
        }
        return "";
      }),
      hasError: toRef(props, "error"),
      messagesComputed: computed(() => props.error ? props.errorMessages : props.messages),
      errorLimit: computed(() => props.error ? Number(props.errorCount) : 99)
    };
  }
});
const _hoisted_1 = { class: "va-message-list-wrapper" };
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_va_message_list = resolveComponent("va-message-list");
  return openBlock(), createElementBlock("div", _hoisted_1, [
    renderSlot(_ctx.$slots, "default"),
    createVNode(_component_va_message_list, {
      color: _ctx.messagesColor,
      limit: _ctx.errorLimit,
      "has-error": _ctx.hasError,
      "model-value": _ctx.messagesComputed
    }, null, 8, ["color", "limit", "has-error", "model-value"])
  ]);
}
var VaMessageListWrapper = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { VaMessageListWrapper as V };
//# sourceMappingURL=VaMessageListWrapper.mjs.map
